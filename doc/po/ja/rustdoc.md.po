# Japanese translations for Rust package
# Copyright (C) 2014 The Rust Project Developers
# This file is distributed under the same license as the Rust package.
# Automatically generated, 2014.
#
msgid ""
msgstr ""
"Project-Id-Version: Rust 0.9\n"
"POT-Creation-Date: 2014-01-08 06:14+0900\n"
"PO-Revision-Date: 2014-01-08 06:14+0900\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. type: Plain text
#: doc/rustdoc.md:2
msgid "% Rust Documentation"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:7
msgid ""
"`rustdoc` is the built-in tool for generating documentation. It integrates "
"with the compiler to provide accurate hyperlinking between usage of types "
"and their documentation. Furthermore, by not using a separate parser, it "
"will never reject your valid Rust code."
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:9
msgid "# Creating Documentation"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:12
msgid ""
"Documenting Rust APIs is quite simple. To document a given item, we have "
"\"doc comments\":"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:18
msgid ""
"~~~ // the \"link\" crate attribute is currently required for rustdoc, but "
"normally // isn't needed.  #[crate_id = \"universe\"]; #[crate_type=\"lib\"];"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:22
msgid ""
"//! Tools for dealing with universes (this is a doc comment, and is shown "
"on //! the crate index page. The ! makes it apply to the parent of the "
"comment, //! rather than what follows)."
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:32
#, no-wrap
msgid ""
"/// Widgets are very common (this is a doc comment, and will show up on\n"
"/// Widget's documentation).\n"
"pub struct Widget {\n"
"\t/// All widgets have a purpose (this is a doc comment, and will show up\n"
"\t/// the field's documentation).\n"
"\tpurpose: ~str,\n"
"\t/// Humans are not allowed to understand some widgets\n"
"\tunderstandable: bool\n"
"}\n"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:40
#, no-wrap
msgid ""
"pub fn recalibrate() {\n"
"\t//! Recalibrate a pesky universe (this is also a doc comment, like above,\n"
"\t//! the documentation will be applied to the *parent* item, so\n"
"\t//! `recalibrate`).\n"
"\t/* ... */\n"
"}\n"
"~~~\n"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:46
msgid ""
"Doc comments are markdown, and are currently parsed with the [sundown]"
"[sundown] library. rustdoc does not yet do any fanciness such as referencing "
"other items inline, like javadoc's `@see`. One exception to this is that the "
"first paragrah will be used as the \"summary\" of an item in the generated "
"documentation:"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:53
msgid ""
"~~~ /// A whizbang. Does stuff. (this line is the summary)  /// /// "
"Whizbangs are ...  struct Whizbang; ~~~"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:60
msgid ""
"To generate the docs, run `rustdoc universe.rs`. By default, it generates a "
"directory called `doc`, with the documentation for `universe` being in `doc/"
"universe/index.html`. If you are using other crates with `extern mod`, "
"rustdoc will even link to them when you use their types, as long as their "
"documentation has already been generated by a previous run of rustdoc, or "
"the crate advertises that its documentation is hosted at a given URL."
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:64
msgid ""
"The generated output can be controlled with the `doc` crate attribute, which "
"is how the above advertisement works. An example from the `libstd` "
"documentation:"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:70
#, no-wrap
msgid ""
"~~~\n"
"#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n"
"      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n"
"      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n"
"~~~\n"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:73
msgid ""
"The `html_root_url` is the prefix that rustdoc will apply to any references "
"to that crate's types etc."
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:77
msgid ""
"rustdoc can also generate JSON, for consumption by other tools, with "
"`rustdoc --output-format json`, and also consume already-generated JSON with "
"`rustdoc --input-format json`."
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:79
#, fuzzy
#| msgid "## Using the rust tool"
msgid "# Using the Documentation"
msgstr "## `rust` コマンドを利用する"

#. type: Plain text
#: doc/rustdoc.md:86
msgid ""
"The web pages generated by rustdoc present the same logical heirarchy that "
"one writes a library with. Every kind of item (function, struct, etc) has "
"its own color, and one can always click on a colored type to jump to its "
"documentation. There is a search bar at the top, which is powered by some "
"javascript and a statically-generated search index. No special web server is "
"required for the search."
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:88
msgid "[sundown]: https://github.com/vmg/sundown/"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:90
#, fuzzy
#| msgid "## Using the rust tool"
msgid "# Testing the Documentation"
msgstr "## `rust` コマンドを利用する"

#. type: Plain text
#: doc/rustdoc.md:94
msgid ""
"`rustdoc` has support for testing code examples which appear in the "
"documentation. This is helpful for keeping code examples up to date with the "
"source code."
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:96
msgid "To test documentation, the `--test` argument is passed to rustdoc:"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:100
msgid "~~~ rustdoc --test crate.rs ~~~"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:102
#, fuzzy
#| msgid "# Dereferencing pointers"
msgid "## Defining tests"
msgstr "# ポインタのデリファレンス"

#. type: Plain text
#: doc/rustdoc.md:107
msgid ""
"Rust documentation currently uses the markdown format, and code blocks can "
"refer to any piece of code-related documentation, which isn't always rust. "
"Because of this, only code blocks with the language of \"rust\" will be "
"considered for testing."
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:112
msgid "~~~ ```rust // This is a testable code block ```"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:116
msgid "``` // This is not a testable code block ```"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:119
#, no-wrap
msgid ""
"    // This is not a testable code block (4-space indent)\n"
"~~~\n"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:122
msgid ""
"In addition to only testing \"rust\"-language code blocks, there are "
"additional specifiers that can be used to dictate how a code block is tested:"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:128
msgid ""
"~~~ ```rust,ignore // This code block is ignored by rustdoc, but is passed "
"through to the test // harness ```"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:133
msgid ""
"```rust,should_fail // This code block is expected to generate a failure ``` "
"~~~"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:139
msgid ""
"Rustdoc also supplies some extra sugar for helping with some tedious "
"documentation examples. If a line is prefixed with `# `, then the line will "
"not show up in the HTML documentation, but it will be used when testing the "
"code block (NB. the space after the `#` is required, so that one can still "
"write things like `#[deriving(Eq)]`)."
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:145
msgid ""
"~~~ ```rust # // showing 'fib' in this documentation would just be tedious "
"and detracts from # // what's actualy being documented.  # fn fib(n: int) "
"{ n + 2 }"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:149
msgid "do spawn { fib(200); } ``` ~~~"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:152
msgid ""
"The documentation online would look like `do spawn { fib(200); }`, but when "
"testing this code, the `fib` function will be included (so it can compile)."
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:154
msgid "## Running tests (advanced)"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:160
msgid ""
"Running tests often requires some special configuration to filter tests, "
"find libraries, or try running ignored examples. The testing framework that "
"rustdoc uses is build on `extra::test`, which is also used when you compile "
"crates with rustc's `--test` flag. Extra arguments can be passed to "
"rustdoc's test harness with the `--test-args` flag."
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:164
msgid ""
"~~~ // Only run tests containing 'foo' in their name rustdoc --test lib.rs --"
"test-args 'foo'"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:167
msgid ""
"// See what's possible when running tests rustdoc --test lib.rs --test-args "
"'--help'"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:171
msgid ""
"// Run all ignored tests rustdoc --test lib.rs --test-args '--ignored' ~~~"
msgstr ""

#. type: Plain text
#: doc/rustdoc.md:177
msgid ""
"When testing a library, code examples will often show how functions are "
"used, and this code often requires `use`-ing paths from the crate. To "
"accomodate this, rustdoc will implicitly add `extern mod <crate>;` where "
"`<crate>` is the name of the crate being tested to the top of each code "
"example. This means that rustdoc must be able to find a compiled version of "
"the library crate being tested. Extra search paths may be added via the `-L` "
"flag to `rustdoc`."
msgstr ""
