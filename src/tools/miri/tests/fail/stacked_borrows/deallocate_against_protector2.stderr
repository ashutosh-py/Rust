error: Undefined Behavior: deallocating while item [SharedReadWrite for <TAG>] is protected by call ID
  --> RUSTLIB/alloc/src/alloc.rs:LL:CC
   |
LL |     unsafe { __rust_dealloc(ptr, layout.size(), layout.align()) }
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ deallocating while item [SharedReadWrite for <TAG>] is protected by call ID
   |
   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental
   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information
   = note: BACKTRACE:
   = note: inside `std::alloc::dealloc` at RUSTLIB/alloc/src/alloc.rs:LL:CC
note: inside closure
  --> $DIR/deallocate_against_protector2.rs:LL:CC
   |
LL |         drop(unsafe { dealloc(raw, Layout::new::<NotUnpin>()) });
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = note: inside `<[closure@$DIR/deallocate_against_protector2.rs:LL:CC] as std::ops::FnOnce<(&mut NotUnpin,)>>::call_once - shim` at RUSTLIB/core/src/ops/function.rs:LL:CC
note: inside `inner`
  --> $DIR/deallocate_against_protector2.rs:LL:CC
   |
LL |     f(x)
   |     ^^^^
note: inside `main`
  --> $DIR/deallocate_against_protector2.rs:LL:CC
   |
LL | /     inner(Box::leak(Box::new(NotUnpin(0, PhantomPinned))), |x| {
LL | |         let raw = x as *mut NotUnpin as *mut u8;
LL | |         drop(unsafe { dealloc(raw, Layout::new::<NotUnpin>()) });
LL | |     });
   | |______^

note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace

error: aborting due to previous error

