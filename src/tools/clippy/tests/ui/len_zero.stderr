error: length comparison to zero
  --> tests/ui/len_zero.rs:88:8
   |
LL |     if x.len() == 0 {
   |        ^^^^^^^^^^^^
   |
   = note: `-D clippy::len-zero` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::len_zero)]`
help: using `is_empty` is clearer and more explicit
   |
LL |     if x.is_empty() {
   |        ~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:92:8
   |
LL |     if "".len() == 0 {}
   |        ^^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     if "".is_empty() {}
   |        ~~~~~~~~~~~~~

error: comparison to empty slice
  --> tests/ui/len_zero.rs:101:20
   |
LL |     println!("{}", *s1 == "");
   |                    ^^^^^^^^^
   |
   = note: `-D clippy::comparison-to-empty` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::comparison_to_empty)]`
help: using `is_empty` is clearer and more explicit
   |
LL |     println!("{}", s1.is_empty());
   |                    ~~~~~~~~~~~~~

error: comparison to empty slice
  --> tests/ui/len_zero.rs:102:20
   |
LL |     println!("{}", **s2 == "");
   |                    ^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     println!("{}", s2.is_empty());
   |                    ~~~~~~~~~~~~~

error: comparison to empty slice
  --> tests/ui/len_zero.rs:103:20
   |
LL |     println!("{}", ***s3 == "");
   |                    ^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     println!("{}", s3.is_empty());
   |                    ~~~~~~~~~~~~~

error: comparison to empty slice
  --> tests/ui/len_zero.rs:104:20
   |
LL |     println!("{}", ****s4 == "");
   |                    ^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     println!("{}", s4.is_empty());
   |                    ~~~~~~~~~~~~~

error: comparison to empty slice
  --> tests/ui/len_zero.rs:105:20
   |
LL |     println!("{}", *****s5 == "");
   |                    ^^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     println!("{}", s5.is_empty());
   |                    ~~~~~~~~~~~~~

error: comparison to empty slice
  --> tests/ui/len_zero.rs:106:20
   |
LL |     println!("{}", ******(s6) == "");
   |                    ^^^^^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     println!("{}", (s6).is_empty());
   |                    ~~~~~~~~~~~~~~~

error: comparison to empty slice
  --> tests/ui/len_zero.rs:109:20
   |
LL |     println!("{}", &**d2s == "");
   |                    ^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     println!("{}", (**d2s).is_empty());
   |                    ~~~~~~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:124:8
   |
LL |     if has_is_empty.len() == 0 {
   |        ^^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     if has_is_empty.is_empty() {
   |        ~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:127:8
   |
LL |     if has_is_empty.len() != 0 {
   |        ^^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `!is_empty` is clearer and more explicit
   |
LL |     if !has_is_empty.is_empty() {
   |        ~~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:130:8
   |
LL |     if has_is_empty.len() > 0 {
   |        ^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `!is_empty` is clearer and more explicit
   |
LL |     if !has_is_empty.is_empty() {
   |        ~~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to one
  --> tests/ui/len_zero.rs:133:8
   |
LL |     if has_is_empty.len() < 1 {
   |        ^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     if has_is_empty.is_empty() {
   |        ~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to one
  --> tests/ui/len_zero.rs:136:8
   |
LL |     if has_is_empty.len() >= 1 {
   |        ^^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `!is_empty` is clearer and more explicit
   |
LL |     if !has_is_empty.is_empty() {
   |        ~~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:147:8
   |
LL |     if 0 == has_is_empty.len() {
   |        ^^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     if has_is_empty.is_empty() {
   |        ~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:150:8
   |
LL |     if 0 != has_is_empty.len() {
   |        ^^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `!is_empty` is clearer and more explicit
   |
LL |     if !has_is_empty.is_empty() {
   |        ~~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:153:8
   |
LL |     if 0 < has_is_empty.len() {
   |        ^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `!is_empty` is clearer and more explicit
   |
LL |     if !has_is_empty.is_empty() {
   |        ~~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to one
  --> tests/ui/len_zero.rs:156:8
   |
LL |     if 1 <= has_is_empty.len() {
   |        ^^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `!is_empty` is clearer and more explicit
   |
LL |     if !has_is_empty.is_empty() {
   |        ~~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to one
  --> tests/ui/len_zero.rs:159:8
   |
LL |     if 1 > has_is_empty.len() {
   |        ^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     if has_is_empty.is_empty() {
   |        ~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:173:8
   |
LL |     if with_is_empty.len() == 0 {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     if with_is_empty.is_empty() {
   |        ~~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:185:6
   |
LL |     (has_is_empty.len() > 0).then(|| println!("This can happen."));
   |      ^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `!is_empty` is clearer and more explicit
   |
LL |     (!has_is_empty.is_empty()).then(|| println!("This can happen."));
   |      ~~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:186:6
   |
LL |     (has_is_empty.len() == 0).then(|| println!("Or this!"));
   |      ^^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     (has_is_empty.is_empty()).then(|| println!("Or this!"));
   |      ~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:190:8
   |
LL |     if b.len() != 0 {}
   |        ^^^^^^^^^^^^
   |
help: using `!is_empty` is clearer and more explicit
   |
LL |     if !b.is_empty() {}
   |        ~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:224:8
   |
LL |     if has_is_empty.len() == compare_to!(0) {}
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     if has_is_empty.is_empty() {}
   |        ~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:225:8
   |
LL |     if has_is_empty.len() == zero!() {}
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `is_empty` is clearer and more explicit
   |
LL |     if has_is_empty.is_empty() {}
   |        ~~~~~~~~~~~~~~~~~~~~~~~

error: length comparison to zero
  --> tests/ui/len_zero.rs:227:6
   |
LL |     (compare_to!(0) < has_is_empty.len()).then(|| println!("This can happen."));
   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: using `!is_empty` is clearer and more explicit
   |
LL |     (!has_is_empty.is_empty()).then(|| println!("This can happen."));
   |      ~~~~~~~~~~~~~~~~~~~~~~~~

error: aborting due to 26 previous errors

