error: immediately dereferencing a reference
  --> $DIR/cast_ref_to_mut.rs:20:9
   |
LL |         *&mut *(a as *const _ as *mut String) += " world";
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `*(a as *const _ as *mut String)`
   |
   = note: `-D clippy::deref-addrof` implied by `-D warnings`

error: casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`
  --> $DIR/cast_ref_to_mut.rs:18:15
   |
LL |         (&mut *(a as *const _ as *mut String)).push_str(" world");
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-D clippy::cast-ref-to-mut` implied by `-D warnings`

error: this expression borrows a value the compiler would automatically borrow
  --> $DIR/cast_ref_to_mut.rs:18:9
   |
LL |         (&mut *(a as *const _ as *mut String)).push_str(" world");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: change this to: `(*(a as *const _ as *mut String))`
   |
   = note: `-D clippy::needless-borrow` implied by `-D warnings`

error: casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`
  --> $DIR/cast_ref_to_mut.rs:19:9
   |
LL |         *(a as *const _ as *mut _) = String::from("Replaced");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`
  --> $DIR/cast_ref_to_mut.rs:20:15
   |
LL |         *&mut *(a as *const _ as *mut String) += " world";
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 5 previous errors

