error: strict comparison of `f32` or `f64`
  --> tests/ui/float_cmp.rs:72:5
   |
LL |     ONE as f64 != 2.0;
   |     ^^^^^^^^^^^^^^^^^
   |
   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`
   = note: `-D clippy::float-cmp` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::float_cmp)]`
help: consider comparing them within some margin of error
   |
LL |     (ONE as f64 - 2.0).abs() > error_margin;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: strict comparison of `f32` or `f64`
  --> tests/ui/float_cmp.rs:79:5
   |
LL |     x == 1.0;
   |     ^^^^^^^^
   |
   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`
help: consider comparing them within some margin of error
   |
LL |     (x - 1.0).abs() < error_margin;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: strict comparison of `f32` or `f64`
  --> tests/ui/float_cmp.rs:84:5
   |
LL |     twice(x) != twice(ONE as f64);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`
help: consider comparing them within some margin of error
   |
LL |     (twice(x) - twice(ONE as f64)).abs() > error_margin;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: strict comparison of `f32` or `f64`
  --> tests/ui/float_cmp.rs:106:5
   |
LL |     NON_ZERO_ARRAY[i] == NON_ZERO_ARRAY[j];
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`
help: consider comparing them within some margin of error
   |
LL |     (NON_ZERO_ARRAY[i] - NON_ZERO_ARRAY[j]).abs() < error_margin;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: strict comparison of `f32` or `f64` arrays
  --> tests/ui/float_cmp.rs:113:5
   |
LL |     a1 == a2;
   |     ^^^^^^^^
   |
   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`

error: strict comparison of `f32` or `f64`
  --> tests/ui/float_cmp.rs:116:5
   |
LL |     a1[0] == a2[0];
   |     ^^^^^^^^^^^^^^
   |
   = note: `f32::EPSILON` and `f64::EPSILON` are available for the `error_margin`
help: consider comparing them within some margin of error
   |
LL |     (a1[0] - a2[0]).abs() < error_margin;
   |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

error: aborting due to 6 previous errors

