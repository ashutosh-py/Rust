// run-pass

#![allow(unused_variables)]

macro_rules! m(
    ($e1:expr => $e2:expr) => ({ $e1 })
);

macro_rules! m10(
    ($e1:expr => $e2:expr) => (
        let x = m!($e1 => $e2);
        let x = m!($e1 => $e2);
        let x = m!($e1 => $e2);
        let x = m!($e1 => $e2);
        let x = m!($e1 => $e2);
        let x = m!($e1 => $e2);
        let x = m!($e1 => $e2);
        let x = m!($e1 => $e2);
        let x = m!($e1 => $e2);
        let x = m!($e1 => $e2);
    )
);

macro_rules! m100(
    ($e1:expr => $e2:expr) => (
        m10!($e1 => $e2);
        m10!($e1 => $e2);
        m10!($e1 => $e2);
        m10!($e1 => $e2);
        m10!($e1 => $e2);
        m10!($e1 => $e2);
        m10!($e1 => $e2);
        m10!($e1 => $e2);
        m10!($e1 => $e2);
        m10!($e1 => $e2);
    )
);

fn main() {
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
    m100!(1 => 2);
}
