error[E0308]: mismatched types
  --> $DIR/issue-91762.rs:30:15
   |
LL | pub trait FunctorExt<T>: Sized {
   |                      - found type parameter
...
LL |     fn fmap<U>(self) {
   |             - expected type parameter
LL |         let arg: <Self::Base as Functor>::With<T>;
LL |         let ret: <Self::Base as Functor>::With<U>;
   |                  -------------------------------- expected due to this type
...
LL |         ret = <Self::Base as Functor>::fmap(arg);
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `U`, found type parameter `T`
   |
   = note: expected associated type `<<Self as FunctorExt<T>>::Base as Functor>::With<U>`
              found associated type `<<Self as FunctorExt<T>>::Base as Functor>::With<T>`
   = note: a type parameter was expected, but a different one was found; you might be missing a type parameter or trait bound
   = note: for more information, visit https://doc.rust-lang.org/book/ch10-02-traits.html#traits-as-parameters

error: aborting due to previous error

For more information about this error, try `rustc --explain E0308`.
