error: lifetime may not live long enough
  --> $DIR/type-check-pointer-coercions.rs:4:5
   |
LL | fn shared_to_const<'a, 'b>(x: &&'a i32) -> *const &'b i32 {
   |                    --  -- lifetime `'b` defined here
   |                    |
   |                    lifetime `'a` defined here
LL |     x
   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`
   |
   = help: consider adding the following bound: `'a: 'b`

error: lifetime may not live long enough
  --> $DIR/type-check-pointer-coercions.rs:8:5
   |
LL | fn unique_to_const<'a, 'b>(x: &mut &'a i32) -> *const &'b i32 {
   |                    --  -- lifetime `'b` defined here
   |                    |
   |                    lifetime `'a` defined here
LL |     x
   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`
   |
   = help: consider adding the following bound: `'a: 'b`

error[E0621]: explicit lifetime required in the type of `x`
  --> $DIR/type-check-pointer-coercions.rs:13:5
   |
LL | fn unique_to_mut<'a, 'b>(x: &mut &'a i32) -> *mut &'b i32 {
   |                             ------------ help: add explicit lifetime `'b` to the type of `x`: `&'b mut &'a i32`
LL |     // Two errors because *mut is invariant
LL |     x
   |     ^ lifetime `'b` required

error: lifetime may not live long enough
  --> $DIR/type-check-pointer-coercions.rs:13:5
   |
LL | fn unique_to_mut<'a, 'b>(x: &mut &'a i32) -> *mut &'b i32 {
   |                  --  -- lifetime `'b` defined here
   |                  |
   |                  lifetime `'a` defined here
LL |     // Two errors because *mut is invariant
LL |     x
   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`
   |
   = help: consider adding the following bound: `'a: 'b`
   = note: requirement occurs because of a mutable pointer to `&i32`
   = note: mutable pointers are invariant over their type parameter
   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance

error: lifetime may not live long enough
  --> $DIR/type-check-pointer-coercions.rs:18:5
   |
LL | fn mut_to_const<'a, 'b>(x: *mut &'a i32) -> *const &'b i32 {
   |                 --  -- lifetime `'b` defined here
   |                 |
   |                 lifetime `'a` defined here
LL |     x
   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`
   |
   = help: consider adding the following bound: `'a: 'b`

error: lifetime may not live long enough
  --> $DIR/type-check-pointer-coercions.rs:24:5
   |
LL | fn array_elem<'a, 'b>(x: &'a i32) -> *const &'b i32 {
   |               --  -- lifetime `'b` defined here
   |               |
   |               lifetime `'a` defined here
...
LL |     y
   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`
   |
   = help: consider adding the following bound: `'a: 'b`

error: lifetime may not live long enough
  --> $DIR/type-check-pointer-coercions.rs:30:5
   |
LL | fn array_coerce<'a, 'b>(x: &'a i32) -> *const [&'b i32; 3] {
   |                 --  -- lifetime `'b` defined here
   |                 |
   |                 lifetime `'a` defined here
...
LL |     y
   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`
   |
   = help: consider adding the following bound: `'a: 'b`

error: lifetime may not live long enough
  --> $DIR/type-check-pointer-coercions.rs:36:5
   |
LL | fn nested_array<'a, 'b>(x: &'a i32) -> *const [&'b i32; 2] {
   |                 --  -- lifetime `'b` defined here
   |                 |
   |                 lifetime `'a` defined here
...
LL |     y
   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`
   |
   = help: consider adding the following bound: `'a: 'b`

error: aborting due to 8 previous errors

For more information about this error, try `rustc --explain E0621`.
