error: the type `&T` does not permit zero-initialization
  --> $DIR/invalid_value.rs:50:32
   |
LL |         let _val: &'static T = mem::zeroed();
   |                                ^^^^^^^^^^^^^
   |                                |
   |                                this code causes undefined behavior when executed
   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null
note: the lint level is defined here
  --> $DIR/invalid_value.rs:6:9
   |
LL | #![deny(invalid_value)]
   |         ^^^^^^^^^^^^^

error: the type `&T` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:51:32
   |
LL |         let _val: &'static T = mem::uninitialized();
   |                                ^^^^^^^^^^^^^^^^^^^^
   |                                |
   |                                this code causes undefined behavior when executed
   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null

error: the type `Wrap<&T>` does not permit zero-initialization
  --> $DIR/invalid_value.rs:53:38
   |
LL |         let _val: Wrap<&'static T> = mem::zeroed();
   |                                      ^^^^^^^^^^^^^
   |                                      |
   |                                      this code causes undefined behavior when executed
   |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `Wrap<&T>` must be non-null

error: the type `Wrap<&T>` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:54:38
   |
LL |         let _val: Wrap<&'static T> = mem::uninitialized();
   |                                      ^^^^^^^^^^^^^^^^^^^^
   |                                      |
   |                                      this code causes undefined behavior when executed
   |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `Wrap<&T>` must be non-null

error: the type `!` does not permit zero-initialization
  --> $DIR/invalid_value.rs:61:23
   |
LL |         let _val: ! = mem::zeroed();
   |                       ^^^^^^^^^^^^^
   |                       |
   |                       this code causes undefined behavior when executed
   |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: the `!` type has no valid value

error: the type `!` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:62:23
   |
LL |         let _val: ! = mem::uninitialized();
   |                       ^^^^^^^^^^^^^^^^^^^^
   |                       |
   |                       this code causes undefined behavior when executed
   |                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: the `!` type has no valid value

error: the type `(i32, !)` does not permit zero-initialization
  --> $DIR/invalid_value.rs:64:30
   |
LL |         let _val: (i32, !) = mem::zeroed();
   |                              ^^^^^^^^^^^^^
   |                              |
   |                              this code causes undefined behavior when executed
   |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: the `!` type has no valid value

error: the type `(i32, !)` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:65:30
   |
LL |         let _val: (i32, !) = mem::uninitialized();
   |                              ^^^^^^^^^^^^^^^^^^^^
   |                              |
   |                              this code causes undefined behavior when executed
   |                              help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: integers must not be uninitialized

error: the type `Void` does not permit zero-initialization
  --> $DIR/invalid_value.rs:67:26
   |
LL |         let _val: Void = mem::zeroed();
   |                          ^^^^^^^^^^^^^
   |                          |
   |                          this code causes undefined behavior when executed
   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: enums with no inhabited variants have no valid value
  --> $DIR/invalid_value.rs:13:1
   |
LL | enum Void {}
   | ^^^^^^^^^

error: the type `Void` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:68:26
   |
LL |         let _val: Void = mem::uninitialized();
   |                          ^^^^^^^^^^^^^^^^^^^^
   |                          |
   |                          this code causes undefined behavior when executed
   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: enums with no inhabited variants have no valid value
  --> $DIR/invalid_value.rs:13:1
   |
LL | enum Void {}
   | ^^^^^^^^^

error: the type `&i32` does not permit zero-initialization
  --> $DIR/invalid_value.rs:70:34
   |
LL |         let _val: &'static i32 = mem::zeroed();
   |                                  ^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null

error: the type `&i32` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:71:34
   |
LL |         let _val: &'static i32 = mem::uninitialized();
   |                                  ^^^^^^^^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null

error: the type `Ref` does not permit zero-initialization
  --> $DIR/invalid_value.rs:73:25
   |
LL |         let _val: Ref = mem::zeroed();
   |                         ^^^^^^^^^^^^^
   |                         |
   |                         this code causes undefined behavior when executed
   |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `Ref` must be non-null

error: the type `Ref` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:74:25
   |
LL |         let _val: Ref = mem::uninitialized();
   |                         ^^^^^^^^^^^^^^^^^^^^
   |                         |
   |                         this code causes undefined behavior when executed
   |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `Ref` must be non-null

error: the type `fn()` does not permit zero-initialization
  --> $DIR/invalid_value.rs:76:26
   |
LL |         let _val: fn() = mem::zeroed();
   |                          ^^^^^^^^^^^^^
   |                          |
   |                          this code causes undefined behavior when executed
   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: function pointers must be non-null

error: the type `fn()` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:77:26
   |
LL |         let _val: fn() = mem::uninitialized();
   |                          ^^^^^^^^^^^^^^^^^^^^
   |                          |
   |                          this code causes undefined behavior when executed
   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: function pointers must be non-null

error: the type `Wrap<fn()>` does not permit zero-initialization
  --> $DIR/invalid_value.rs:79:32
   |
LL |         let _val: Wrap<fn()> = mem::zeroed();
   |                                ^^^^^^^^^^^^^
   |                                |
   |                                this code causes undefined behavior when executed
   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `Wrap<fn()>` must be non-null

error: the type `Wrap<fn()>` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:80:32
   |
LL |         let _val: Wrap<fn()> = mem::uninitialized();
   |                                ^^^^^^^^^^^^^^^^^^^^
   |                                |
   |                                this code causes undefined behavior when executed
   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `Wrap<fn()>` must be non-null

error: the type `WrapEnum<fn()>` does not permit zero-initialization
  --> $DIR/invalid_value.rs:82:36
   |
LL |         let _val: WrapEnum<fn()> = mem::zeroed();
   |                                    ^^^^^^^^^^^^^
   |                                    |
   |                                    this code causes undefined behavior when executed
   |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `WrapEnum<fn()>` must be non-null

error: the type `WrapEnum<fn()>` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:83:36
   |
LL |         let _val: WrapEnum<fn()> = mem::uninitialized();
   |                                    ^^^^^^^^^^^^^^^^^^^^
   |                                    |
   |                                    this code causes undefined behavior when executed
   |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `WrapEnum<fn()>` must be non-null

error: the type `Wrap<(RefPair, i32)>` does not permit zero-initialization
  --> $DIR/invalid_value.rs:85:42
   |
LL |         let _val: Wrap<(RefPair, i32)> = mem::zeroed();
   |                                          ^^^^^^^^^^^^^
   |                                          |
   |                                          this code causes undefined behavior when executed
   |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: `RefPair` must be non-null (in this struct field)
  --> $DIR/invalid_value.rs:18:18
   |
LL | struct Wrap<T> { wrapped: T }
   |                  ^^^^^^^^^^

error: the type `Wrap<(RefPair, i32)>` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:86:42
   |
LL |         let _val: Wrap<(RefPair, i32)> = mem::uninitialized();
   |                                          ^^^^^^^^^^^^^^^^^^^^
   |                                          |
   |                                          this code causes undefined behavior when executed
   |                                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: `RefPair` must be non-null (in this struct field)
  --> $DIR/invalid_value.rs:18:18
   |
LL | struct Wrap<T> { wrapped: T }
   |                  ^^^^^^^^^^

error: the type `NonNull<i32>` does not permit zero-initialization
  --> $DIR/invalid_value.rs:88:34
   |
LL |         let _val: NonNull<i32> = mem::zeroed();
   |                                  ^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::ptr::NonNull<i32>` must be non-null

error: the type `NonNull<i32>` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:89:34
   |
LL |         let _val: NonNull<i32> = mem::uninitialized();
   |                                  ^^^^^^^^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::ptr::NonNull<i32>` must be non-null

error: the type `(NonZeroU32, i32)` does not permit zero-initialization
  --> $DIR/invalid_value.rs:91:39
   |
LL |         let _val: (NonZeroU32, i32) = mem::zeroed();
   |                                       ^^^^^^^^^^^^^
   |                                       |
   |                                       this code causes undefined behavior when executed
   |                                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::num::NonZeroU32` must be non-null

error: the type `(NonZeroU32, i32)` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:92:39
   |
LL |         let _val: (NonZeroU32, i32) = mem::uninitialized();
   |                                       ^^^^^^^^^^^^^^^^^^^^
   |                                       |
   |                                       this code causes undefined behavior when executed
   |                                       help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::num::NonZeroU32` must be non-null

error: the type `*const dyn Send` does not permit zero-initialization
  --> $DIR/invalid_value.rs:94:37
   |
LL |         let _val: *const dyn Send = mem::zeroed();
   |                                     ^^^^^^^^^^^^^
   |                                     |
   |                                     this code causes undefined behavior when executed
   |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: the vtable of a wide raw pointer must be non-null

error: the type `*const dyn Send` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:95:37
   |
LL |         let _val: *const dyn Send = mem::uninitialized();
   |                                     ^^^^^^^^^^^^^^^^^^^^
   |                                     |
   |                                     this code causes undefined behavior when executed
   |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: the vtable of a wide raw pointer must be non-null

error: the type `[fn(); 2]` does not permit zero-initialization
  --> $DIR/invalid_value.rs:97:31
   |
LL |         let _val: [fn(); 2] = mem::zeroed();
   |                               ^^^^^^^^^^^^^
   |                               |
   |                               this code causes undefined behavior when executed
   |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: function pointers must be non-null

error: the type `[fn(); 2]` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:98:31
   |
LL |         let _val: [fn(); 2] = mem::uninitialized();
   |                               ^^^^^^^^^^^^^^^^^^^^
   |                               |
   |                               this code causes undefined behavior when executed
   |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: function pointers must be non-null

error: the type `TwoUninhabited` does not permit zero-initialization
  --> $DIR/invalid_value.rs:100:36
   |
LL |         let _val: TwoUninhabited = mem::zeroed();
   |                                    ^^^^^^^^^^^^^
   |                                    |
   |                                    this code causes undefined behavior when executed
   |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: enums with no inhabited variants have no valid value
  --> $DIR/invalid_value.rs:40:1
   |
LL | enum TwoUninhabited {
   | ^^^^^^^^^^^^^^^^^^^

error: the type `TwoUninhabited` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:101:36
   |
LL |         let _val: TwoUninhabited = mem::uninitialized();
   |                                    ^^^^^^^^^^^^^^^^^^^^
   |                                    |
   |                                    this code causes undefined behavior when executed
   |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
note: enums with no inhabited variants have no valid value
  --> $DIR/invalid_value.rs:40:1
   |
LL | enum TwoUninhabited {
   | ^^^^^^^^^^^^^^^^^^^

error: the type `OneFruitNonZero` does not permit zero-initialization
  --> $DIR/invalid_value.rs:103:37
   |
LL |         let _val: OneFruitNonZero = mem::zeroed();
   |                                     ^^^^^^^^^^^^^
   |                                     |
   |                                     this code causes undefined behavior when executed
   |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `OneFruitNonZero` must be non-null

error: the type `OneFruitNonZero` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:104:37
   |
LL |         let _val: OneFruitNonZero = mem::uninitialized();
   |                                     ^^^^^^^^^^^^^^^^^^^^
   |                                     |
   |                                     this code causes undefined behavior when executed
   |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `OneFruitNonZero` must be non-null

error: the type `bool` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:108:26
   |
LL |         let _val: bool = mem::uninitialized();
   |                          ^^^^^^^^^^^^^^^^^^^^
   |                          |
   |                          this code causes undefined behavior when executed
   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: booleans must be either `true` or `false`

error: the type `Wrap<char>` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:111:32
   |
LL |         let _val: Wrap<char> = mem::uninitialized();
   |                                ^^^^^^^^^^^^^^^^^^^^
   |                                |
   |                                this code causes undefined behavior when executed
   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `Wrap<char>` must be initialized inside its custom valid range

error: the type `Ranged<u64, RangeInclusive::<u128> { start: 0, end: 128, exhausted: false }>` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:114:28
   |
LL |         let _val: NonBig = mem::uninitialized();
   |                            ^^^^^^^^^^^^^^^^^^^^
   |                            |
   |                            this code causes undefined behavior when executed
   |                            help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::num::Ranged<u64, std::ops::RangeInclusive::<u128> { start: 0, end: 128, exhausted: false }>` must be initialized inside its custom valid range

error: the type `Fruit` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:117:27
   |
LL |         let _val: Fruit = mem::uninitialized();
   |                           ^^^^^^^^^^^^^^^^^^^^
   |                           |
   |                           this code causes undefined behavior when executed
   |                           help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `Fruit` must be initialized inside its custom valid range

error: the type `[bool; 2]` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:120:31
   |
LL |         let _val: [bool; 2] = mem::uninitialized();
   |                               ^^^^^^^^^^^^^^^^^^^^
   |                               |
   |                               this code causes undefined behavior when executed
   |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: booleans must be either `true` or `false`

error: the type `i32` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:123:25
   |
LL |         let _val: i32 = mem::uninitialized();
   |                         ^^^^^^^^^^^^^^^^^^^^
   |                         |
   |                         this code causes undefined behavior when executed
   |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: integers must not be uninitialized

error: the type `f32` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:126:25
   |
LL |         let _val: f32 = mem::uninitialized();
   |                         ^^^^^^^^^^^^^^^^^^^^
   |                         |
   |                         this code causes undefined behavior when executed
   |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: floats must not be uninitialized

error: the type `*const ()` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:129:31
   |
LL |         let _val: *const () = mem::uninitialized();
   |                               ^^^^^^^^^^^^^^^^^^^^
   |                               |
   |                               this code causes undefined behavior when executed
   |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: raw pointers must not be uninitialized

error: the type `*const [()]` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:132:33
   |
LL |         let _val: *const [()] = mem::uninitialized();
   |                                 ^^^^^^^^^^^^^^^^^^^^
   |                                 |
   |                                 this code causes undefined behavior when executed
   |                                 help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: raw pointers must not be uninitialized

error: the type `Ranged<u8, RangeInclusive::<u128> { start: 254, end: 1, exhausted: false }>` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:135:37
   |
LL |         let _val: WrapAroundRange = mem::uninitialized();
   |                                     ^^^^^^^^^^^^^^^^^^^^
   |                                     |
   |                                     this code causes undefined behavior when executed
   |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::num::Ranged<u8, std::ops::RangeInclusive::<u128> { start: 254, end: 1, exhausted: false }>` must be initialized inside its custom valid range

error: the type `Result<i32, i32>` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:140:38
   |
LL |         let _val: Result<i32, i32> = mem::uninitialized();
   |                                      ^^^^^^^^^^^^^^^^^^^^
   |                                      |
   |                                      this code causes undefined behavior when executed
   |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::result::Result<i32, i32>` must be initialized inside its custom valid range

error: the type `&i32` does not permit zero-initialization
  --> $DIR/invalid_value.rs:148:34
   |
LL |         let _val: &'static i32 = mem::transmute(0usize);
   |                                  ^^^^^^^^^^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null

error: the type `&[i32]` does not permit zero-initialization
  --> $DIR/invalid_value.rs:149:36
   |
LL |         let _val: &'static [i32] = mem::transmute((0usize, 0usize));
   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                                    |
   |                                    this code causes undefined behavior when executed
   |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null

error: the type `NonZeroU32` does not permit zero-initialization
  --> $DIR/invalid_value.rs:150:32
   |
LL |         let _val: NonZeroU32 = mem::transmute(0);
   |                                ^^^^^^^^^^^^^^^^^
   |                                |
   |                                this code causes undefined behavior when executed
   |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::num::NonZeroU32` must be non-null

error: the type `NonNull<i32>` does not permit zero-initialization
  --> $DIR/invalid_value.rs:153:34
   |
LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::ptr::NonNull<i32>` must be non-null

error: the type `NonNull<i32>` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:154:34
   |
LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                                  |
   |                                  this code causes undefined behavior when executed
   |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: `std::ptr::NonNull<i32>` must be non-null

error: the type `bool` does not permit being left uninitialized
  --> $DIR/invalid_value.rs:155:26
   |
LL |         let _val: bool = MaybeUninit::uninit().assume_init();
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                          |
   |                          this code causes undefined behavior when executed
   |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: booleans must be either `true` or `false`

error: aborting due to 51 previous errors

