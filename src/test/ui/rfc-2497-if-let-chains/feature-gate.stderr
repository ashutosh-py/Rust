error: invalid parentheses around `let` expression in `if let`
  --> $DIR/feature-gate.rs:14:8
   |
LL |     if (let 0 = 1) {}
   |        ^         ^
   |
help: `if let` needs to be written without parentheses
   |
LL |     if let 0 = 1 {}
   |       --       --

error: invalid parentheses around `let` expression in `if let`
  --> $DIR/feature-gate.rs:17:8
   |
LL |     if (((let 0 = 1))) {}
   |        ^^^         ^^^
   |
help: `if let` needs to be written without parentheses
   |
LL |     if let 0 = 1 {}
   |       --       --

error: invalid parentheses around `let` expression in `if let`
  --> $DIR/feature-gate.rs:125:15
   |
LL |     use_expr!((let 0 = 1));
   |               ^         ^
   |
help: `if let` needs to be written without parentheses
   |
LL |     use_expr!(let 0 = 1);
   |              --       --

error: no rules expected the token `let`
  --> $DIR/feature-gate.rs:130:15
   |
LL |     macro_rules! use_expr {
   |     --------------------- when calling this macro
...
LL |     use_expr!(let 0 = 1);
   |               ^^^ no rules expected this token in macro call

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:20:16
   |
LL |     if true && let 0 = 1 {}
   |                ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:24:8
   |
LL |     if let 0 = 1 && true {}
   |        ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:28:9
   |
LL |     if (let 0 = 1) && true {}
   |         ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:32:17
   |
LL |     if true && (let 0 = 1) {}
   |                 ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:36:9
   |
LL |     if (let 0 = 1) && (let 0 = 1) {}
   |         ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:36:24
   |
LL |     if (let 0 = 1) && (let 0 = 1) {}
   |                        ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:42:8
   |
LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |        ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:42:21
   |
LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                     ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:42:35
   |
LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                                   ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:42:48
   |
LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                                                ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:42:61
   |
LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                                                             ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:54:8
   |
LL |     if let Range { start: _, end: _ } = (true..true) && false {}
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:62:12
   |
LL |     while (let 0 = 1) {}
   |            ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:66:14
   |
LL |     while (((let 0 = 1))) {}
   |              ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:70:19
   |
LL |     while true && let 0 = 1 {}
   |                   ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:74:11
   |
LL |     while let 0 = 1 && true {}
   |           ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:78:12
   |
LL |     while (let 0 = 1) && true {}
   |            ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:82:20
   |
LL |     while true && (let 0 = 1) {}
   |                    ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:86:12
   |
LL |     while (let 0 = 1) && (let 0 = 1) {}
   |            ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:86:27
   |
LL |     while (let 0 = 1) && (let 0 = 1) {}
   |                           ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:92:11
   |
LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |           ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:92:24
   |
LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                        ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:92:38
   |
LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                                      ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:92:51
   |
LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                                                   ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:92:64
   |
LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                                                                ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:104:11
   |
LL |     while let Range { start: _, end: _ } = (true..true) && false {}
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:128:20
   |
LL |     #[cfg(FALSE)] (let 0 = 1);
   |                    ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:112:17
   |
LL |     noop_expr!((let 0 = 1));
   |                 ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error[E0658]: `let` expressions in this position are experimental
  --> $DIR/feature-gate.rs:121:16
   |
LL |     use_expr!((let 0 = 1 && 0 == 0));
   |                ^^^^^^^^^
   |
   = note: see issue #53667 <https://github.com/rust-lang/rust/issues/53667> for more information
   = help: add `#![feature(let_chains)]` to the crate attributes to enable
   = help: you can write `matches!(<expr>, <pattern>)` instead of `let <pattern> = <expr>`

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:20:16
   |
LL |     if true && let 0 = 1 {}
   |                ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:24:8
   |
LL |     if let 0 = 1 && true {}
   |        ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:28:9
   |
LL |     if (let 0 = 1) && true {}
   |         ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:32:17
   |
LL |     if true && (let 0 = 1) {}
   |                 ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:36:9
   |
LL |     if (let 0 = 1) && (let 0 = 1) {}
   |         ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:36:24
   |
LL |     if (let 0 = 1) && (let 0 = 1) {}
   |                        ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:42:8
   |
LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |        ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:42:21
   |
LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                     ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:42:35
   |
LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                                   ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:42:48
   |
LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                                                ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:42:61
   |
LL |     if let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                                                             ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:54:8
   |
LL |     if let Range { start: _, end: _ } = (true..true) && false {}
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:62:12
   |
LL |     while (let 0 = 1) {}
   |            ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:66:14
   |
LL |     while (((let 0 = 1))) {}
   |              ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:70:19
   |
LL |     while true && let 0 = 1 {}
   |                   ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:74:11
   |
LL |     while let 0 = 1 && true {}
   |           ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:78:12
   |
LL |     while (let 0 = 1) && true {}
   |            ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:82:20
   |
LL |     while true && (let 0 = 1) {}
   |                    ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:86:12
   |
LL |     while (let 0 = 1) && (let 0 = 1) {}
   |            ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:86:27
   |
LL |     while (let 0 = 1) && (let 0 = 1) {}
   |                           ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:92:11
   |
LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |           ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:92:24
   |
LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                        ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:92:38
   |
LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                                      ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:92:51
   |
LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                                                   ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:92:64
   |
LL |     while let 0 = 1 && let 1 = 2 && (let 2 = 3 && let 3 = 4 && let 4 = 5) {}
   |                                                                ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:104:11
   |
LL |     while let Range { start: _, end: _ } = (true..true) && false {}
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:121:16
   |
LL |     use_expr!((let 0 = 1 && 0 == 0));
   |                ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:121:16
   |
LL |     use_expr!((let 0 = 1 && 0 == 0));
   |                ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: `let` expressions are not supported here
  --> $DIR/feature-gate.rs:125:16
   |
LL |     use_expr!((let 0 = 1));
   |                ^^^^^^^^^
   |
   = note: only supported directly without parentheses in conditions of `if`- and `while`-expressions, as well as in `let` chains within parentheses

error: aborting due to 62 previous errors

For more information about this error, try `rustc --explain E0658`.
