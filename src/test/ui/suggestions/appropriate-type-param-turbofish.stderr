error[E0283]: type annotations needed
  --> $DIR/appropriate-type-param-turbofish.rs:3:35
   |
LL |         vec![1, 2, 3].into_iter().collect();
   |                                   ^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `collect`
   |
   = note: cannot satisfy `_: FromIterator<i32>`
help: consider specifying the type argument in the method call
   |
LL |         vec![1, 2, 3].into_iter().collect::<Vec<_>>();
   |                                          ^^^^^^^^^^
LL |         vec![1, 2, 3].into_iter().collect::<HashSet<_, _>>();
   |                                          ^^^^^^^^^^^^^^^^^
LL |         vec![1, 2, 3].into_iter().collect::<PathBuf>();
   |                                          ^^^^^^^^^^^
LL |         vec![1, 2, 3].into_iter().collect::<Box<[_]>>();
   |                                          ^^^^^^^^^^^^
     and 8 other candidates

error[E0283]: type annotations needed
  --> $DIR/appropriate-type-param-turbofish.rs:6:41
   |
LL |         vec!["a", "b", "c"].into_iter().collect();
   |                                         ^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `collect`
   |
   = note: cannot satisfy `_: FromIterator<&str>`
help: consider specifying the type argument in the method call
   |
LL |         vec!["a", "b", "c"].into_iter().collect::<Vec<_>>();
   |                                                ^^^^^^^^^^
LL |         vec!["a", "b", "c"].into_iter().collect::<String>();
   |                                                ^^^^^^^^^^
LL |         vec!["a", "b", "c"].into_iter().collect::<HashSet<_, _>>();
   |                                                ^^^^^^^^^^^^^^^^^
LL |         vec!["a", "b", "c"].into_iter().collect::<PathBuf>();
   |                                                ^^^^^^^^^^^
     and 10 other candidates

error[E0283]: type annotations needed
  --> $DIR/appropriate-type-param-turbofish.rs:9:41
   |
LL |         vec!['a', 'b', 'c'].into_iter().collect();
   |                                         ^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `collect`
   |
   = note: cannot satisfy `_: FromIterator<char>`
help: consider specifying the type argument in the method call
   |
LL |         vec!['a', 'b', 'c'].into_iter().collect::<Vec<_>>();
   |                                                ^^^^^^^^^^
LL |         vec!['a', 'b', 'c'].into_iter().collect::<String>();
   |                                                ^^^^^^^^^^
LL |         vec!['a', 'b', 'c'].into_iter().collect::<HashSet<_, _>>();
   |                                                ^^^^^^^^^^^^^^^^^
LL |         vec!['a', 'b', 'c'].into_iter().collect::<PathBuf>();
   |                                                ^^^^^^^^^^^
     and 10 other candidates

error[E0283]: type annotations needed
  --> $DIR/appropriate-type-param-turbofish.rs:14:43
   |
LL |         let _ = vec![1, 2, 3].into_iter().collect();
   |                                           ^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `collect`
   |
   = note: cannot satisfy `_: FromIterator<i32>`
help: consider giving this binding a type
   |
LL |         let _: Vec<_> = vec![1, 2, 3].into_iter().collect();
   |              ^^^^^^^^
LL |         let _: HashSet<_, _> = vec![1, 2, 3].into_iter().collect();
   |              ^^^^^^^^^^^^^^^
LL |         let _: PathBuf = vec![1, 2, 3].into_iter().collect();
   |              ^^^^^^^^^
LL |         let _: Box<[_]> = vec![1, 2, 3].into_iter().collect();
   |              ^^^^^^^^^^
     and 8 other candidates

error[E0283]: type annotations needed
  --> $DIR/appropriate-type-param-turbofish.rs:17:49
   |
LL |         let _ = vec!["a", "b", "c"].into_iter().collect();
   |                                                 ^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `collect`
   |
   = note: cannot satisfy `_: FromIterator<&str>`
help: consider giving this binding a type
   |
LL |         let _: Vec<_> = vec!["a", "b", "c"].into_iter().collect();
   |              ^^^^^^^^
LL |         let _: String = vec!["a", "b", "c"].into_iter().collect();
   |              ^^^^^^^^
LL |         let _: HashSet<_, _> = vec!["a", "b", "c"].into_iter().collect();
   |              ^^^^^^^^^^^^^^^
LL |         let _: PathBuf = vec!["a", "b", "c"].into_iter().collect();
   |              ^^^^^^^^^
     and 10 other candidates

error[E0283]: type annotations needed
  --> $DIR/appropriate-type-param-turbofish.rs:20:49
   |
LL |         let _ = vec!['a', 'b', 'c'].into_iter().collect();
   |                                                 ^^^^^^^ cannot infer type for type parameter `B` declared on the associated function `collect`
   |
   = note: cannot satisfy `_: FromIterator<char>`
help: consider giving this binding a type
   |
LL |         let _: Vec<_> = vec!['a', 'b', 'c'].into_iter().collect();
   |              ^^^^^^^^
LL |         let _: String = vec!['a', 'b', 'c'].into_iter().collect();
   |              ^^^^^^^^
LL |         let _: HashSet<_, _> = vec!['a', 'b', 'c'].into_iter().collect();
   |              ^^^^^^^^^^^^^^^
LL |         let _: PathBuf = vec!['a', 'b', 'c'].into_iter().collect();
   |              ^^^^^^^^^
     and 10 other candidates

error[E0283]: type annotations needed
  --> $DIR/appropriate-type-param-turbofish.rs:38:5
   |
LL | fn x<X: T>() -> X {
   |         - required by this bound in `x`
...
LL |     x();
   |     ^ cannot infer type for type parameter `X` declared on the function `x`
   |
   = note: cannot satisfy `_: T`
help: consider specifying the type argument in the function call
   |
LL |     x::<S>();
   |      ^^^^^

error[E0283]: type annotations needed
  --> $DIR/appropriate-type-param-turbofish.rs:42:13
   |
LL | fn x<X: T>() -> X {
   |         - required by this bound in `x`
...
LL |     let _ = x();
   |             ^ cannot infer type for type parameter `X` declared on the function `x`
   |
   = note: cannot satisfy `_: T`
help: consider giving this binding the explicit type `S`
   |
LL |     let _: S = x();
   |          ^^^
help: consider specifying the type argument in the function call
   |
LL |     let _ = x::<S>();
   |              ^^^^^

error: aborting due to 8 previous errors

For more information about this error, try `rustc --explain E0283`.
