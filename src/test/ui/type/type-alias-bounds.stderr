warning: where clauses are not enforced in type aliases
  --> $DIR/type-alias-bounds.rs:19:21
   |
LL | type S2Vec<T> where T: /*Send*/ = Vec<T>; // NOTE(eddyb) moved to `type-alias-bounds-err.rs`
   |                     ^^
   |
   = note: #[warn(type_alias_bounds)] on by default
   = help: the clause will not be checked when the type alias is used, and should be removed

warning: bounds on generic parameters are not enforced in type aliases
  --> $DIR/type-alias-bounds.rs:21:19
   |
LL | type VVec<'b, 'a: 'b+'b> = (&'b u32, Vec<&'a i32>);
   |                   ^^ ^^
   |
   = help: the bound will not be checked when the type alias is used, and should be removed

warning: bounds on generic parameters are not enforced in type aliases
  --> $DIR/type-alias-bounds.rs:23:18
   |
LL | type WVec<'b, T: 'b+'b> = (&'b u32, Vec<T>);
   |                  ^^ ^^
   |
   = help: the bound will not be checked when the type alias is used, and should be removed

warning: where clauses are not enforced in type aliases
  --> $DIR/type-alias-bounds.rs:25:25
   |
LL | type W2Vec<'b, T> where T: 'b, T: 'b = (&'b u32, Vec<T>);
   |                         ^^^^^  ^^^^^
   |
   = help: the clause will not be checked when the type alias is used, and should be removed

warning: bounds on generic parameters are not enforced in type aliases
  --> $DIR/type-alias-bounds.rs:56:12
   |
LL | type T1<U: Bound + ?Sized> = U::Assoc; //~ WARN not enforced in type aliases
   |            ^^^^^   ^^^^^^
   |
   = help: the bound will not be checked when the type alias is used, and should be removed
help: use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to associated types in type aliases
  --> $DIR/type-alias-bounds.rs:56:30
   |
LL | type T1<U: Bound + ?Sized> = U::Assoc; //~ WARN not enforced in type aliases
   |                              ^^^^^^^^

warning: where clauses are not enforced in type aliases
  --> $DIR/type-alias-bounds.rs:57:18
   |
LL | type T2<U> where U: Bound + ?Sized = U::Assoc;  //~ WARN not enforced in type aliases
   |                  ^^^^^^^^^^^^^^^^^
   |
   = help: the clause will not be checked when the type alias is used, and should be removed
help: use fully disambiguated paths (i.e., `<T as Trait>::Assoc`) to refer to associated types in type aliases
  --> $DIR/type-alias-bounds.rs:57:38
   |
LL | type T2<U> where U: Bound + ?Sized = U::Assoc;  //~ WARN not enforced in type aliases
   |                                      ^^^^^^^^

warning: bounds on generic parameters are not enforced in type aliases
  --> $DIR/type-alias-bounds.rs:57:29
   |
LL | type T2<U> where U: Bound + ?Sized = U::Assoc;  //~ WARN not enforced in type aliases
   |                             ^^^^^^
   |
   = help: the bound will not be checked when the type alias is used, and should be removed

warning: bounds on generic parameters are not enforced in type aliases
  --> $DIR/type-alias-bounds.rs:65:12
   |
LL | type T5<U: Bound + ?Sized> = <U as Bound>::Assoc;  //~ WARN not enforced in type aliases
   |            ^^^^^   ^^^^^^
   |
   = help: the bound will not be checked when the type alias is used, and should be removed

