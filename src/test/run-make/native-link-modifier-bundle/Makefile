# ignore-cross-compile
# ignore-windows-msvc

-include ../../run-make-fulldeps/tools.mk

# We're using the llvm-nm instead of the system nm to ensure it is compatible
# with the LLVM bitcode generated by rustc.
NM = "$(LLVM_BIN_DIR)"/llvm-nm
SPLIT = "-Zsplit-bundled-libs"
BUNDLED_LIB = "libbundled_split.rlib.bundle.native-staticlib.a"


all: $(call NATIVE_STATICLIB,native-staticlib)
	# Build a staticlib and a rlib, the `native_func` symbol will be bundled into them
	$(RUSTC) bundled.rs --crate-type=staticlib --crate-type=rlib
	$(NM) $(TMPDIR)/libbundled.a | $(CGREP) -e "T _*native_func"
	$(NM) $(TMPDIR)/libbundled.a | $(CGREP) -e "U _*native_func"
	$(NM) $(TMPDIR)/libbundled.rlib | $(CGREP) -e "T _*native_func"
	$(NM) $(TMPDIR)/libbundled.rlib | $(CGREP) -e "U _*native_func"

	# Build a staticlib and a rlib, the `native_func` symbol will not be bundled into it
	$(RUSTC) non-bundled.rs --crate-type=staticlib --crate-type=rlib
	$(NM) $(TMPDIR)/libnon_bundled.a | $(CGREP) -ve "T _*native_func"
	$(NM) $(TMPDIR)/libnon_bundled.a | $(CGREP) -e "U _*native_func"
	$(NM) $(TMPDIR)/libnon_bundled.rlib | $(CGREP) -ve "T _*native_func"
	$(NM) $(TMPDIR)/libnon_bundled.rlib | $(CGREP) -e "U _*native_func"

	# Build a cdylib, `native-staticlib` will not appear on the linker line because it was bundled previously
	# The cdylib will contain the `native_func` symbol in the end
	$(RUSTC) cdylib-bundled.rs --crate-type=cdylib --print link-args | $(CGREP) -ve '-l[" ]*native-staticlib'
	$(NM) $(call DYLIB,cdylib_bundled) | $(CGREP) -e "[Tt] _*native_func"

	# Build a cdylib, `native-staticlib` will appear on the linker line because it was not bundled previously
	# The cdylib will contain the `native_func` symbol in the end
	$(RUSTC) cdylib-non-bundled.rs --crate-type=cdylib --print link-args | $(CGREP) -e '-l[" ]*native-staticlib'
	$(NM) $(call DYLIB,cdylib_non_bundled) | $(CGREP) -e "[Tt] _*native_func"

	# Build a staticlib and a rlib, the `native_func` symbol will be bundled only into staticlib
	$(RUSTC) bundled.rs --crate-type=staticlib --crate-type=rlib $(SPLIT) --crate-name=bundled_split
	$(NM) $(TMPDIR)/libbundled_split.a | $(CGREP) -e "T _*native_func"
	$(NM) $(TMPDIR)/libbundled_split.a | $(CGREP) -e "U _*native_func"
	$(NM) $(TMPDIR)/libbundled_split.rlib | $(CGREP) -ve "T _*native_func"
	$(NM) $(TMPDIR)/libbundled_split.rlib | $(CGREP) -e "U _*native_func"

	# Build a cdylib, 'BUNDLED_LIB' will appear on the linker line
	# The cdylib will contain the `native_func` symbol in the end
	$(RUSTC) cdylib-bundled-split.rs --crate-type=cdylib --print link-args $(SPLIT) | $(CGREP) -e $(BUNDLED_LIB)
	$(NM) $(call DYLIB,cdylib_bundled_split) | $(CGREP) -e "[Tt] _*native_func"