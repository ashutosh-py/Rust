- // MIR for `exhaustive_match` before MatchBranchSimplification
+ // MIR for `exhaustive_match` after MatchBranchSimplification
  
  fn exhaustive_match(_1: E) -> u8 {
      debug e => _1;                       // in scope 0 at $DIR/matches_u8.rs:11:25: 11:26
      let mut _0: u8;                      // return place in scope 0 at $DIR/matches_u8.rs:11:34: 11:36
      let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:13:9: 13:13
  
      bb0: {
          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:13:9: 13:13
          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/matches_u8.rs:13:9: 13:13
      }
  
      bb1: {
          _0 = const 1_u8;                 // scope 0 at $DIR/matches_u8.rs:14:17: 14:18
          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6
      }
  
      bb2: {
          unreachable;                     // scope 0 at $DIR/matches_u8.rs:12:11: 12:12
      }
  
      bb3: {
          _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:13:17: 13:18
          goto -> bb4;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6
      }
  
      bb4: {
          return;                          // scope 0 at $DIR/matches_u8.rs:16:2: 16:2
      }
  }
  
