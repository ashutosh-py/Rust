- // MIR for `opt` before InstCombine
+ // MIR for `opt` after InstCombine
  
  fn opt(_1: bool) -> i32 {
      debug x => _1;                       // in scope 0 at $DIR/equal_true.rs:3:8: 3:9
      let mut _0: i32;                     // return place in scope 0 at $DIR/equal_true.rs:3:20: 3:23
      let mut _2: bool;                    // in scope 0 at $DIR/equal_true.rs:4:8: 4:17
  
      bb0: {
          _2 = _1;                         // scope 0 at $DIR/equal_true.rs:4:8: 4:9
          switchInt(move _2) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/equal_true.rs:4:5: 4:34
      }
  
      bb1: {
          _0 = const 0_i32;                // scope 0 at $DIR/equal_true.rs:4:20: 4:21
          return;                          // scope 0 at $DIR/equal_true.rs:4:5: 4:34
      }
  
      bb2: {
          _0 = const 1_i32;                // scope 0 at $DIR/equal_true.rs:4:31: 4:32
          return;                          // scope 0 at $DIR/equal_true.rs:4:5: 4:34
      }
  }
  
