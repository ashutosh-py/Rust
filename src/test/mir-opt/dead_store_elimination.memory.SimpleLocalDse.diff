- // MIR for `memory` before SimpleLocalDse
+ // MIR for `memory` after SimpleLocalDse
  
  fn memory() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/dead_store_elimination.rs:56:17: 56:17
      let mut _1: i32;                     // in scope 0 at $DIR/dead_store_elimination.rs:57:9: 57:14
      let mut _4: i32;                     // in scope 0 at $DIR/dead_store_elimination.rs:60:9: 60:11
      let _5: ();                          // in scope 0 at $DIR/dead_store_elimination.rs:62:5: 62:12
      let mut _6: i32;                     // in scope 0 at $DIR/dead_store_elimination.rs:62:10: 62:11
      scope 1 {
          debug x => _1;                   // in scope 1 at $DIR/dead_store_elimination.rs:57:9: 57:14
          let mut _2: i32;                 // in scope 1 at $DIR/dead_store_elimination.rs:58:9: 58:14
          scope 2 {
              debug y => _2;               // in scope 2 at $DIR/dead_store_elimination.rs:58:9: 58:14
              let _3: &mut i32;            // in scope 2 at $DIR/dead_store_elimination.rs:59:9: 59:10
              scope 3 {
                  debug r => _3;           // in scope 3 at $DIR/dead_store_elimination.rs:59:9: 59:10
              }
          }
      }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/dead_store_elimination.rs:57:9: 57:14
          _1 = const 0_i32;                // scope 0 at $DIR/dead_store_elimination.rs:57:17: 57:18
          StorageLive(_2);                 // scope 1 at $DIR/dead_store_elimination.rs:58:9: 58:14
          _2 = const 1_i32;                // scope 1 at $DIR/dead_store_elimination.rs:58:17: 58:18
          StorageLive(_3);                 // scope 2 at $DIR/dead_store_elimination.rs:59:9: 59:10
          _3 = &mut _2;                    // scope 2 at $DIR/dead_store_elimination.rs:59:13: 59:19
          StorageLive(_4);                 // scope 3 at $DIR/dead_store_elimination.rs:60:9: 60:11
          _4 = (*_3);                      // scope 3 at $DIR/dead_store_elimination.rs:60:9: 60:11
          _1 = move _4;                    // scope 3 at $DIR/dead_store_elimination.rs:60:5: 60:11
          StorageDead(_4);                 // scope 3 at $DIR/dead_store_elimination.rs:60:10: 60:11
          _2 = const 2_i32;                // scope 3 at $DIR/dead_store_elimination.rs:61:5: 61:10
          StorageLive(_5);                 // scope 3 at $DIR/dead_store_elimination.rs:62:5: 62:12
          StorageLive(_6);                 // scope 3 at $DIR/dead_store_elimination.rs:62:10: 62:11
          _6 = _1;                         // scope 3 at $DIR/dead_store_elimination.rs:62:10: 62:11
          _5 = read::<i32>(move _6) -> bb1; // scope 3 at $DIR/dead_store_elimination.rs:62:5: 62:12
                                           // mir::Constant
                                           // + span: $DIR/dead_store_elimination.rs:62:5: 62:9
                                           // + literal: Const { ty: fn(i32) {read::<i32>}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
          StorageDead(_6);                 // scope 3 at $DIR/dead_store_elimination.rs:62:11: 62:12
          StorageDead(_5);                 // scope 3 at $DIR/dead_store_elimination.rs:62:12: 62:13
          nop;                             // scope 0 at $DIR/dead_store_elimination.rs:56:17: 63:2
          StorageDead(_3);                 // scope 2 at $DIR/dead_store_elimination.rs:63:1: 63:2
          StorageDead(_2);                 // scope 1 at $DIR/dead_store_elimination.rs:63:1: 63:2
          StorageDead(_1);                 // scope 0 at $DIR/dead_store_elimination.rs:63:1: 63:2
          return;                          // scope 0 at $DIR/dead_store_elimination.rs:63:2: 63:2
      }
  }
  
