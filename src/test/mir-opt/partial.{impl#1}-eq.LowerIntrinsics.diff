- // MIR for `<impl at $DIR/partial.rs:9:10: 9:19>::eq` before LowerIntrinsics
+ // MIR for `<impl at $DIR/partial.rs:9:10: 9:19>::eq` after LowerIntrinsics
  
  fn <impl at $DIR/partial.rs:9:10: 9:19>::eq(_1: &E, _2: &E) -> bool {
      debug self => _1;                    // in scope 0 at $DIR/partial.rs:9:10: 9:19
      debug other => _2;                   // in scope 0 at $DIR/partial.rs:9:10: 9:19
      let mut _0: bool;                    // return place in scope 0 at $DIR/partial.rs:9:10: 9:19
      let _3: isize;                       // in scope 0 at $DIR/partial.rs:9:10: 9:19
      let mut _4: &E;                      // in scope 0 at $DIR/partial.rs:9:10: 9:19
      let _5: &E;                          // in scope 0 at $DIR/partial.rs:9:10: 9:19
      let mut _7: &E;                      // in scope 0 at $DIR/partial.rs:9:10: 9:19
      let _8: &E;                          // in scope 0 at $DIR/partial.rs:9:10: 9:19
      let mut _9: bool;                    // in scope 0 at $DIR/partial.rs:9:10: 9:19
      let mut _10: bool;                   // in scope 0 at $DIR/partial.rs:9:10: 9:19
      let mut _11: isize;                  // in scope 0 at $DIR/partial.rs:9:10: 9:19
      let mut _12: isize;                  // in scope 0 at $DIR/partial.rs:9:10: 9:19
      let mut _13: (&E, &E);               // in scope 0 at $DIR/partial.rs:9:10: 9:19
      let mut _14: &E;                     // in scope 0 at $DIR/partial.rs:9:10: 9:19
      let mut _15: &E;                     // in scope 0 at $DIR/partial.rs:9:10: 9:19
      scope 1 {
          debug __self_vi => _3;           // in scope 1 at $DIR/partial.rs:9:10: 9:19
          let _6: isize;                   // in scope 1 at $DIR/partial.rs:9:10: 9:19
          scope 2 {
              debug __arg_1_vi => _6;      // in scope 2 at $DIR/partial.rs:9:10: 9:19
          }
      }
  
      bb0: {
          StorageLive(_3);                 // scope 0 at $DIR/partial.rs:9:10: 9:19
          StorageLive(_4);                 // scope 0 at $DIR/partial.rs:9:10: 9:19
          StorageLive(_5);                 // scope 0 at $DIR/partial.rs:9:10: 9:19
          _5 = &(*_1);                     // scope 0 at $DIR/partial.rs:9:10: 9:19
          _4 = &(*_5);                     // scope 0 at $DIR/partial.rs:9:10: 9:19
-         _3 = discriminant_value::<E>(move _4) -> bb1; // scope 0 at $DIR/partial.rs:9:10: 9:19
-                                          // mir::Constant
-                                          // + span: $DIR/partial.rs:9:10: 9:19
-                                          // + literal: Const { ty: for<'r> extern "rust-intrinsic" fn(&'r E) -> <E as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<E>}, val: Value(Scalar(<ZST>)) }
+         _3 = discriminant((*_4));        // scope 0 at $DIR/partial.rs:9:10: 9:19
+         goto -> bb1;                     // scope 0 at $DIR/partial.rs:9:10: 9:19
      }
  
      bb1: {
          StorageDead(_4);                 // scope 0 at $DIR/partial.rs:9:18: 9:19
          StorageDead(_5);                 // scope 0 at $DIR/partial.rs:9:18: 9:19
          StorageLive(_6);                 // scope 1 at $DIR/partial.rs:9:10: 9:19
          StorageLive(_7);                 // scope 1 at $DIR/partial.rs:9:10: 9:19
          StorageLive(_8);                 // scope 1 at $DIR/partial.rs:9:10: 9:19
          _8 = &(*_2);                     // scope 1 at $DIR/partial.rs:9:10: 9:19
          _7 = &(*_8);                     // scope 1 at $DIR/partial.rs:9:10: 9:19
-         _6 = discriminant_value::<E>(move _7) -> bb2; // scope 1 at $DIR/partial.rs:9:10: 9:19
-                                          // mir::Constant
-                                          // + span: $DIR/partial.rs:9:10: 9:19
-                                          // + literal: Const { ty: for<'r> extern "rust-intrinsic" fn(&'r E) -> <E as std::marker::DiscriminantKind>::Discriminant {std::intrinsics::discriminant_value::<E>}, val: Value(Scalar(<ZST>)) }
+         _6 = discriminant((*_7));        // scope 1 at $DIR/partial.rs:9:10: 9:19
+         goto -> bb2;                     // scope 1 at $DIR/partial.rs:9:10: 9:19
      }
  
      bb2: {
          StorageDead(_7);                 // scope 1 at $DIR/partial.rs:9:18: 9:19
          StorageDead(_8);                 // scope 1 at $DIR/partial.rs:9:18: 9:19
          StorageLive(_9);                 // scope 2 at $DIR/partial.rs:9:10: 9:19
          StorageLive(_10);                // scope 2 at $DIR/partial.rs:9:10: 9:19
          StorageLive(_11);                // scope 2 at $DIR/partial.rs:9:10: 9:19
          _11 = _3;                        // scope 2 at $DIR/partial.rs:9:10: 9:19
          StorageLive(_12);                // scope 2 at $DIR/partial.rs:9:10: 9:19
          _12 = _6;                        // scope 2 at $DIR/partial.rs:9:10: 9:19
          _10 = Eq(move _11, move _12);    // scope 2 at $DIR/partial.rs:9:10: 9:19
          StorageDead(_12);                // scope 2 at $DIR/partial.rs:9:18: 9:19
          StorageDead(_11);                // scope 2 at $DIR/partial.rs:9:18: 9:19
          _9 = move _10;                   // scope 2 at $DIR/partial.rs:9:10: 9:19
          StorageDead(_10);                // scope 2 at $DIR/partial.rs:9:18: 9:19
          switchInt(move _9) -> [false: bb4, otherwise: bb3]; // scope 2 at $DIR/partial.rs:9:10: 9:19
      }
  
      bb3: {
          StorageLive(_13);                // scope 2 at $DIR/partial.rs:9:10: 9:19
          StorageLive(_14);                // scope 2 at $DIR/partial.rs:9:10: 9:19
          _14 = &(*_1);                    // scope 2 at $DIR/partial.rs:9:10: 9:19
          StorageLive(_15);                // scope 2 at $DIR/partial.rs:9:10: 9:19
          _15 = &(*_2);                    // scope 2 at $DIR/partial.rs:9:10: 9:19
          _13 = (move _14, move _15);      // scope 2 at $DIR/partial.rs:9:10: 9:19
          StorageDead(_15);                // scope 2 at $DIR/partial.rs:9:18: 9:19
          StorageDead(_14);                // scope 2 at $DIR/partial.rs:9:18: 9:19
          _0 = const true;                 // scope 2 at $DIR/partial.rs:9:10: 9:19
          StorageDead(_13);                // scope 2 at $DIR/partial.rs:9:18: 9:19
          goto -> bb5;                     // scope 2 at $DIR/partial.rs:9:10: 9:19
      }
  
      bb4: {
          _0 = const false;                // scope 2 at $DIR/partial.rs:9:10: 9:19
          goto -> bb5;                     // scope 2 at $DIR/partial.rs:9:10: 9:19
      }
  
      bb5: {
          StorageDead(_9);                 // scope 2 at $DIR/partial.rs:9:18: 9:19
          StorageDead(_6);                 // scope 1 at $DIR/partial.rs:9:18: 9:19
          StorageDead(_3);                 // scope 0 at $DIR/partial.rs:9:18: 9:19
          return;                          // scope 0 at $DIR/partial.rs:9:19: 9:19
      }
  
      bb6 (cleanup): {
          resume;                          // scope 0 at $DIR/partial.rs:9:10: 9:19
      }
  }
  
