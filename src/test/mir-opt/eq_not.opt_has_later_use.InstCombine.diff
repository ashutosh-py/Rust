- // MIR for `opt_has_later_use` before InstCombine
+ // MIR for `opt_has_later_use` after InstCombine
  
  fn opt_has_later_use(_1: Vec<u8>) -> u8 {
      debug x => _1;                       // in scope 0 at $DIR/eq_not.rs:12:22: 12:23
      let mut _0: u8;                      // return place in scope 0 at $DIR/eq_not.rs:12:37: 12:39
      let _2: bool;                        // in scope 0 at $DIR/eq_not.rs:13:9: 13:10
      let mut _3: bool;                    // in scope 0 at $DIR/eq_not.rs:13:14: 13:28
      let mut _4: usize;                   // in scope 0 at $DIR/eq_not.rs:13:15: 13:22
      let mut _5: &std::vec::Vec<u8>;      // in scope 0 at $DIR/eq_not.rs:13:15: 13:16
      let mut _6: bool;                    // in scope 0 at $DIR/eq_not.rs:14:8: 14:9
      scope 1 {
          debug x => _2;                   // in scope 1 at $DIR/eq_not.rs:13:9: 13:10
      }
      scope 2 {
          debug self => _5;                // in scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL
      }
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/eq_not.rs:13:9: 13:10
          StorageLive(_3);                 // scope 0 at $DIR/eq_not.rs:13:14: 13:28
          StorageLive(_4);                 // scope 0 at $DIR/eq_not.rs:13:15: 13:22
          StorageLive(_5);                 // scope 0 at $DIR/eq_not.rs:13:15: 13:16
          _5 = &_1;                        // scope 0 at $DIR/eq_not.rs:13:15: 13:16
          _4 = ((*_5).1: usize);           // scope 2 at $SRC_DIR/alloc/src/vec.rs:LL:COL
          StorageDead(_5);                 // scope 0 at $DIR/eq_not.rs:13:21: 13:22
-         _3 = Eq(move _4, const 2_usize); // scope 0 at $DIR/eq_not.rs:13:14: 13:28
+         nop;                             // scope 0 at $DIR/eq_not.rs:13:14: 13:28
+         _2 = Ne(move _4, const 2_usize); // scope 0 at $DIR/eq_not.rs:13:13: 13:28
          StorageDead(_4);                 // scope 0 at $DIR/eq_not.rs:13:27: 13:28
-         _2 = Not(move _3);               // scope 0 at $DIR/eq_not.rs:13:13: 13:28
          StorageDead(_3);                 // scope 0 at $DIR/eq_not.rs:13:27: 13:28
          StorageLive(_6);                 // scope 1 at $DIR/eq_not.rs:14:8: 14:9
          _6 = _2;                         // scope 1 at $DIR/eq_not.rs:14:8: 14:9
          switchInt(_6) -> [false: bb2, otherwise: bb3]; // scope 1 at $DIR/eq_not.rs:14:5: 14:26
      }
  
      bb1 (cleanup): {
          resume;                          // scope 0 at $DIR/eq_not.rs:12:1: 15:2
      }
  
      bb2: {
          _0 = const 1_u8;                 // scope 1 at $DIR/eq_not.rs:14:23: 14:24
          goto -> bb4;                     // scope 1 at $DIR/eq_not.rs:14:5: 14:26
      }
  
      bb3: {
          _0 = const 0_u8;                 // scope 1 at $DIR/eq_not.rs:14:12: 14:13
          goto -> bb4;                     // scope 1 at $DIR/eq_not.rs:14:5: 14:26
      }
  
      bb4: {
          StorageDead(_2);                 // scope 0 at $DIR/eq_not.rs:15:1: 15:2
          StorageDead(_6);                 // scope 0 at $DIR/eq_not.rs:15:1: 15:2
          drop(_1) -> [return: bb5, unwind: bb1]; // scope 0 at $DIR/eq_not.rs:15:1: 15:2
      }
  
      bb5: {
          return;                          // scope 0 at $DIR/eq_not.rs:15:2: 15:2
      }
  }
  
