- // MIR for `test_other` before SimplifyDebugInfo
+ // MIR for `test_other` after SimplifyDebugInfo
  
  fn test_other(_1: &Vec<usize>) -> usize {
      debug x => _1;                       // in scope 0 at $DIR/simplify_debuginfo_moves.rs:4:19: 4:20
      let mut _0: usize;                   // return place in scope 0 at $DIR/simplify_debuginfo_moves.rs:4:38: 4:43
      let mut _2: &std::vec::Vec<&usize>;  // in scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
      let _3: std::vec::Vec<&usize>;       // in scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
      let mut _4: std::slice::Iter<usize>; // in scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
      let mut _5: &[usize];                // in scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:6
      let _6: &[usize];                    // in scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
      let mut _7: &std::vec::Vec<usize>;   // in scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:6
      scope 1 (inlined core::slice::<impl [usize]>::iter) { // at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
-         debug self => _5;                // in scope 1 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
+         debug self => _6;                // in scope 1 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
          let mut _8: &[usize];            // in scope 1 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
      }
      scope 2 (inlined <std::slice::Iter<usize> as Iterator>::collect::<Vec<&usize>>) { // at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          debug self => _4;                // in scope 2 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          let mut _9: std::slice::Iter<usize>; // in scope 2 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          scope 3 (inlined <Vec<&usize> as FromIterator<&usize>>::from_iter::<std::slice::Iter<usize>>) { // at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
-             debug iter => _9;            // in scope 3 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
+             debug iter => _4;            // in scope 3 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
              let mut _10: std::slice::Iter<usize>; // in scope 3 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
              let mut _11: std::slice::Iter<usize>; // in scope 3 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
              scope 4 (inlined <std::slice::Iter<usize> as IntoIterator>::into_iter) { // at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
-                 debug self => _11;       // in scope 4 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
+                 debug self => _4;        // in scope 4 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
              }
              scope 5 (inlined <Vec<&usize> as vec::spec_from_iter::SpecFromIter<&usize, std::slice::Iter<usize>>>::from_iter) { // at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
-                 debug iterator => _10;   // in scope 5 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
+                 debug iterator => _4;    // in scope 5 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
                  let mut _12: std::slice::Iter<usize>; // in scope 5 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
              }
          }
      }
      scope 6 (inlined Vec::<&usize>::len) { // at $DIR/simplify_debuginfo_moves.rs:5:5: 5:39
          debug self => _2;                // in scope 6 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:39
      }
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          StorageLive(_3);                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          StorageLive(_4);                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
          StorageLive(_5);                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:6
          StorageLive(_6);                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
          StorageLive(_7);                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:6
          _7 = _1;                         // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:6
          _6 = <Vec<usize> as Deref>::deref(move _7) -> bb1; // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
                                           // mir::Constant
                                           // + span: $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
                                           // + literal: Const { ty: for<'r> fn(&'r std::vec::Vec<usize>) -> &'r <std::vec::Vec<usize> as std::ops::Deref>::Target {<std::vec::Vec<usize> as std::ops::Deref>::deref}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
          _5 = _6;                         // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:6
          StorageDead(_7);                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:6
          StorageLive(_8);                 // scope 1 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
          _8 = _5;                         // scope 1 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
          _4 = std::slice::Iter::<usize>::new(move _8) -> bb3; // scope 1 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
                                           // mir::Constant
                                           // + span: $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
                                           // + user_ty: UserType(0)
                                           // + literal: Const { ty: fn(&[usize]) -> std::slice::Iter<usize> {std::slice::Iter::<usize>::new}, val: Value(Scalar(<ZST>)) }
      }
  
      bb2: {
          StorageDead(_6);                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:6:1: 6:2
          StorageDead(_3);                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:6:1: 6:2
          return;                          // scope 0 at $DIR/simplify_debuginfo_moves.rs:6:2: 6:2
      }
  
      bb3: {
          StorageDead(_8);                 // scope 1 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:13
          StorageDead(_5);                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:12: 5:13
          StorageLive(_9);                 // scope 2 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          _9 = move _4;                    // scope 2 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          StorageLive(_10);                // scope 3 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          StorageLive(_11);                // scope 3 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          _11 = move _9;                   // scope 3 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          _10 = move _11;                  // scope 4 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          StorageDead(_11);                // scope 3 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          StorageLive(_12);                // scope 5 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          _12 = move _10;                  // scope 5 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          _3 = <Vec<&usize> as vec::spec_from_iter_nested::SpecFromIterNested<&usize, std::slice::Iter<usize>>>::from_iter(move _12) -> bb4; // scope 5 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
                                           // mir::Constant
                                           // + span: $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
                                           // + literal: Const { ty: fn(std::slice::Iter<usize>) -> std::vec::Vec<&usize> {<std::vec::Vec<&usize> as std::vec::spec_from_iter_nested::SpecFromIterNested<&usize, std::slice::Iter<usize>>>::from_iter}, val: Value(Scalar(<ZST>)) }
      }
  
      bb4: {
          StorageDead(_12);                // scope 5 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          StorageDead(_10);                // scope 3 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          StorageDead(_9);                 // scope 2 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          _2 = &_3;                        // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:33
          StorageDead(_4);                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:32: 5:33
          _0 = ((*_2).1: usize);           // scope 6 at $DIR/simplify_debuginfo_moves.rs:5:5: 5:39
          StorageDead(_2);                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:5:38: 5:39
          drop(_3) -> bb2;                 // scope 0 at $DIR/simplify_debuginfo_moves.rs:6:1: 6:2
      }
  }
  
