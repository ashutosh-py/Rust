// MIR for `num_to_digit` after PreCodegen

fn num_to_digit(_1: char) -> u32 {
    debug num => _1;                     // in scope 0 at $DIR/issue-59352.rs:12:21: 12:24
    let mut _0: u32;                     // return place in scope 0 at $DIR/issue-59352.rs:12:35: 12:38
    let mut _2: char;                    // in scope 0 at $DIR/issue-59352.rs:14:8: 14:11
    let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/issue-59352.rs:14:26: 14:41
    let mut _4: char;                    // in scope 0 at $DIR/issue-59352.rs:14:26: 14:29
    let mut _5: u32;                     // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23
    let mut _10: isize;                  // in scope 0 at $DIR/issue-59352.rs:14:8: 14:23
    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue-59352.rs:14:8: 14:23
        debug self => _2;                // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        debug radix => _5;               // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        let mut _6: &std::option::Option<u32>; // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        let _7: std::option::Option<u32>; // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        let mut _8: char;                // in scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        scope 2 (inlined Option::<u32>::is_some) { // at $DIR/issue-59352.rs:14:8: 14:23
            debug self => _6;            // in scope 2 at $DIR/issue-59352.rs:14:8: 14:23
            let mut _9: isize;           // in scope 2 at $DIR/issue-59352.rs:14:8: 14:23
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:11
        _2 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:8: 14:11
        StorageLive(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23
        _5 = const 8_u32;                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23
        StorageLive(_6);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        StorageLive(_7);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        StorageLive(_8);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        _8 = _2;                         // scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        _7 = char::methods::<impl char>::to_digit(move _8, const 8_u32) -> bb6; // scope 1 at $DIR/issue-59352.rs:14:8: 14:23
                                         // mir::Constant
                                         // + span: $DIR/issue-59352.rs:14:8: 14:23
                                         // + literal: Const { ty: fn(char, u32) -> std::option::Option<u32> {std::char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_10);                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23
        StorageLive(_3);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:41
        StorageLive(_4);                 // scope 0 at $DIR/issue-59352.rs:14:26: 14:29
        _4 = _1;                         // scope 0 at $DIR/issue-59352.rs:14:26: 14:29
        _3 = char::methods::<impl char>::to_digit(move _4, const 8_u32) -> bb2; // scope 0 at $DIR/issue-59352.rs:14:26: 14:41
                                         // mir::Constant
                                         // + span: $DIR/issue-59352.rs:14:30: 14:38
                                         // + literal: Const { ty: fn(char, u32) -> std::option::Option<u32> {std::char::methods::<impl char>::to_digit}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_4);                 // scope 0 at $DIR/issue-59352.rs:14:40: 14:41
        _0 = Option::<u32>::unwrap(move _3) -> bb3; // scope 0 at $DIR/issue-59352.rs:14:26: 14:50
                                         // mir::Constant
                                         // + span: $DIR/issue-59352.rs:14:42: 14:48
                                         // + literal: Const { ty: fn(std::option::Option<u32>) -> u32 {std::option::Option::<u32>::unwrap}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at $DIR/issue-59352.rs:14:49: 14:50
        goto -> bb5;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63
    }

    bb4: {
        StorageDead(_10);                // scope 0 at $DIR/issue-59352.rs:14:8: 14:23
        _0 = const 0_u32;                // scope 0 at $DIR/issue-59352.rs:14:60: 14:61
        goto -> bb5;                     // scope 0 at $DIR/issue-59352.rs:14:5: 14:63
    }

    bb5: {
        return;                          // scope 0 at $DIR/issue-59352.rs:15:2: 15:2
    }

    bb6: {
        _6 = &_7;                        // scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        StorageDead(_8);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        StorageLive(_9);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        _9 = discriminant((*_6));        // scope 2 at $DIR/issue-59352.rs:14:8: 14:23
        StorageLive(_10);                // scope 2 at $DIR/issue-59352.rs:14:8: 14:23
        _10 = move _9;                   // scope 2 at $DIR/issue-59352.rs:14:8: 14:23
        StorageDead(_9);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        StorageDead(_6);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        StorageDead(_7);                 // scope 1 at $DIR/issue-59352.rs:14:8: 14:23
        StorageDead(_5);                 // scope 0 at $DIR/issue-59352.rs:14:8: 14:23
        StorageDead(_2);                 // scope 0 at $DIR/issue-59352.rs:14:22: 14:23
        switchInt(move _10) -> [1_isize: bb1, otherwise: bb4]; // scope 0 at $DIR/issue-59352.rs:14:8: 14:23
    }
}
