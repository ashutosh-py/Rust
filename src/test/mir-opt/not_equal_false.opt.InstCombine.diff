- // MIR for `opt` before InstCombine
+ // MIR for `opt` after InstCombine
  
  fn opt(_1: Option<()>) -> bool {
      debug x => _1;                       // in scope 0 at $DIR/not_equal_false.rs:3:8: 3:9
      let mut _0: bool;                    // return place in scope 0 at $DIR/not_equal_false.rs:3:26: 3:30
      let mut _2: isize;                   // in scope 0 at $DIR/not_equal_false.rs:4:17: 4:21
      let mut _3: isize;                   // in scope 0 at $DIR/not_equal_false.rs:4:38: 4:45
  
      bb0: {
          _2 = discriminant(_1);           // scope 0 at $DIR/not_equal_false.rs:4:17: 4:21
          switchInt(move _2) -> [0_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/not_equal_false.rs:4:17: 4:21
      }
  
      bb1: {
          _0 = const true;                 // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46
          return;                          // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46
      }
  
      bb2: {
          _3 = discriminant(_1);           // scope 0 at $DIR/not_equal_false.rs:4:38: 4:45
          switchInt(move _3) -> [1_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/not_equal_false.rs:4:38: 4:45
      }
  
      bb3: {
          goto -> bb1;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      }
  
      bb4: {
          _0 = const false;                // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46
          return;                          // scope 0 at $DIR/not_equal_false.rs:4:5: 4:46
      }
  
      bb5: {
          goto -> bb1;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      }
  }
  
