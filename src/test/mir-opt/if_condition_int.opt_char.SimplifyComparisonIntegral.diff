- // MIR for `opt_char` before SimplifyComparisonIntegral
+ // MIR for `opt_char` after SimplifyComparisonIntegral
  
  fn opt_char(_1: char) -> u32 {
      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:20:13: 20:14
      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:20:25: 20:28
      let mut _2: char;                    // in scope 0 at $DIR/if-condition-int.rs:21:8: 21:9
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:21:8: 21:9
          _2 = _1;                         // scope 0 at $DIR/if-condition-int.rs:21:8: 21:9
          switchInt(move _2) -> ['x': bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33
      }
  
      bb1: {
          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33
          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:21:19: 21:20
          return;                          // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33
      }
  
      bb2: {
          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33
          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:21:30: 21:31
          return;                          // scope 0 at $DIR/if-condition-int.rs:21:5: 21:33
      }
  }
  
