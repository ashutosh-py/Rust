- // MIR for `main` before DestinationPropagation
+ // MIR for `main` after DestinationPropagation
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/cycle.rs:8:11: 8:11
      let mut _1: i32;                     // in scope 0 at $DIR/cycle.rs:12:9: 12:10
      let mut _2: i32;                     // in scope 0 at $DIR/cycle.rs:14:10: 14:11
      scope 1 {
-         debug x => _1;                   // in scope 1 at $DIR/cycle.rs:9:9: 9:14
+         debug x => _2;                   // in scope 1 at $DIR/cycle.rs:9:9: 9:14
          scope 2 {
-             debug y => _1;               // in scope 2 at $DIR/cycle.rs:10:9: 10:10
+             debug y => _2;               // in scope 2 at $DIR/cycle.rs:10:9: 10:10
              scope 3 {
-                 debug z => _1;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10
+                 debug z => _2;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10
                  scope 4 (inlined std::mem::drop::<i32>) { // at $DIR/cycle.rs:14:5: 14:12
                      debug _x => _2;      // in scope 4 at $DIR/cycle.rs:14:5: 14:12
                  }
              }
          }
      }
  
      bb0: {
-         _1 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:9:17: 9:22
+         _2 = val() -> bb1;               // scope 0 at $DIR/cycle.rs:9:17: 9:22
                                           // mir::Constant
                                           // + span: $DIR/cycle.rs:9:17: 9:20
                                           // + literal: Const { ty: fn() -> i32 {val}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
-         StorageLive(_2);                 // scope 3 at $DIR/cycle.rs:14:10: 14:11
-         _2 = _1;                         // scope 3 at $DIR/cycle.rs:14:10: 14:11
-         StorageDead(_2);                 // scope 3 at $DIR/cycle.rs:14:11: 14:12
+         nop;                             // scope 3 at $DIR/cycle.rs:14:10: 14:11
+         nop;                             // scope 3 at $DIR/cycle.rs:14:10: 14:11
+         nop;                             // scope 3 at $DIR/cycle.rs:14:11: 14:12
          _0 = const ();                   // scope 0 at $DIR/cycle.rs:8:11: 15:2
          return;                          // scope 0 at $DIR/cycle.rs:15:2: 15:2
      }
  }
  
