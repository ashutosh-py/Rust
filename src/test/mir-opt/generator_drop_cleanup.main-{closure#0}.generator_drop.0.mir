// MIR for `main::{closure#0}` 0 generator_drop

/* generator_layout = GeneratorLayout {
    field_tys: {
        _0: std::string::String,
    },
    variant_fields: {
        Unresumed(0): [],
        Returned (1): [],
        Panicked (2): [],
        Suspend0 (3): [_0],
    },
    storage_conflicts: BitMatrix(1x1) {
        (_0, _0),
    },
} */

fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 10:17]) -> () {
    let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17
    let mut _2: u32;                     // in scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17
    scope 1 {
        debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:11:13: 11:15
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17
        switchInt(move _2) -> [0_u32: bb3, 3_u32: bb4, otherwise: bb5]; // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17
    }

    bb1: {
        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17
    }

    bb3: {
        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17
    }

    bb4: {
        drop((((*_1) as variant#3).0: std::string::String)) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/generator-drop-cleanup.rs:13:5: 13:6
    }

    bb5: {
        return;                          // scope 0 at $DIR/generator-drop-cleanup.rs:+0:15: +0:17
    }
}
