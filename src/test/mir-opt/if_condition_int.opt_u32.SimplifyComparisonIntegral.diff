- // MIR for `opt_u32` before SimplifyComparisonIntegral
+ // MIR for `opt_u32` after SimplifyComparisonIntegral
  
  fn opt_u32(_1: u32) -> u32 {
      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:11:12: 11:13
      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:11:23: 11:26
      let mut _2: u32;                     // in scope 0 at $DIR/if-condition-int.rs:12:8: 12:9
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:12:8: 12:9
          _2 = _1;                         // scope 0 at $DIR/if-condition-int.rs:12:8: 12:9
          switchInt(move _2) -> [42_u32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32
      }
  
      bb1: {
          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32
          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:12:18: 12:19
          return;                          // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32
      }
  
      bb2: {
          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32
          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:12:29: 12:30
          return;                          // scope 0 at $DIR/if-condition-int.rs:12:5: 12:32
      }
  }
  
