- // MIR for `foo` before MatchBranchSimplification
+ // MIR for `foo` after MatchBranchSimplification
  
  fn foo(_1: Option<()>) -> () {
      debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:6:8: 6:11
      let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:6:25: 6:25
      let mut _2: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26
  
      bb0: {
          _2 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26
          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:7:22: 7:26
      }
  
      bb1: {
          _0 = const ();                   // scope 0 at $DIR/matches_reduce_branches.rs:7:5: 9:6
          goto -> bb3;                     // scope 0 at $DIR/matches_reduce_branches.rs:7:5: 9:6
      }
  
      bb2: {
          goto -> bb3;                     // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      }
  
      bb3: {
          return;                          // scope 0 at $DIR/matches_reduce_branches.rs:10:2: 10:2
      }
  }
  
