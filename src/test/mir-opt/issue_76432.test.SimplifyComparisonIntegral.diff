- // MIR for `test` before SimplifyComparisonIntegral
+ // MIR for `test` after SimplifyComparisonIntegral
  
  fn test(_1: T) -> () {
      debug x => _1;                       // in scope 0 at $DIR/issue_76432.rs:6:38: 6:39
      let mut _0: ();                      // return place in scope 0 at $DIR/issue_76432.rs:6:44: 6:44
      let _2: &[T];                        // in scope 0 at $DIR/issue_76432.rs:7:9: 7:10
      let mut _3: &[T; 3];                 // in scope 0 at $DIR/issue_76432.rs:7:19: 7:29
      let _4: [T; 3];                      // in scope 0 at $DIR/issue_76432.rs:7:20: 7:29
      let mut _5: T;                       // in scope 0 at $DIR/issue_76432.rs:7:21: 7:22
      let mut _6: T;                       // in scope 0 at $DIR/issue_76432.rs:7:24: 7:25
      let mut _7: T;                       // in scope 0 at $DIR/issue_76432.rs:7:27: 7:28
      let mut _8: usize;                   // in scope 0 at $DIR/issue_76432.rs:9:9: 9:33
      scope 1 {
          debug v => _2;                   // in scope 1 at $DIR/issue_76432.rs:7:9: 7:10
          let _9: &T;                      // in scope 1 at $DIR/issue_76432.rs:9:10: 9:16
          let _10: &T;                     // in scope 1 at $DIR/issue_76432.rs:9:18: 9:24
          let _11: &T;                     // in scope 1 at $DIR/issue_76432.rs:9:26: 9:32
          scope 2 {
              debug v1 => _9;              // in scope 2 at $DIR/issue_76432.rs:9:10: 9:16
              debug v2 => _10;             // in scope 2 at $DIR/issue_76432.rs:9:18: 9:24
              debug v3 => _11;             // in scope 2 at $DIR/issue_76432.rs:9:26: 9:32
          }
      }
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/issue_76432.rs:7:9: 7:10
          StorageLive(_4);                 // scope 0 at $DIR/issue_76432.rs:7:20: 7:29
          StorageLive(_5);                 // scope 0 at $DIR/issue_76432.rs:7:21: 7:22
          _5 = _1;                         // scope 0 at $DIR/issue_76432.rs:7:21: 7:22
          StorageLive(_6);                 // scope 0 at $DIR/issue_76432.rs:7:24: 7:25
          _6 = _1;                         // scope 0 at $DIR/issue_76432.rs:7:24: 7:25
          StorageLive(_7);                 // scope 0 at $DIR/issue_76432.rs:7:27: 7:28
          _7 = _1;                         // scope 0 at $DIR/issue_76432.rs:7:27: 7:28
          _4 = [move _5, move _6, move _7]; // scope 0 at $DIR/issue_76432.rs:7:20: 7:29
          StorageDead(_7);                 // scope 0 at $DIR/issue_76432.rs:7:28: 7:29
          StorageDead(_6);                 // scope 0 at $DIR/issue_76432.rs:7:28: 7:29
          StorageDead(_5);                 // scope 0 at $DIR/issue_76432.rs:7:28: 7:29
          _3 = &_4;                        // scope 0 at $DIR/issue_76432.rs:7:19: 7:29
          _2 = move _3 as &[T] (Pointer(Unsize)); // scope 0 at $DIR/issue_76432.rs:7:19: 7:29
          _8 = Len((*_2));                 // scope 1 at $DIR/issue_76432.rs:9:9: 9:33
          switchInt(move _8) -> [3_usize: bb2, otherwise: bb1]; // scope 1 at $DIR/issue_76432.rs:9:9: 9:33
      }
  
      bb1: {
          core::panicking::panic(const "internal error: entered unreachable code"); // scope 1 at $SRC_DIR/core/src/panic.rs:LL:COL
                                           // mir::Constant
                                           // + span: $SRC_DIR/core/src/panic.rs:LL:COL
                                           // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(Scalar(<ZST>)) }
                                           // ty::Const
                                           // + ty: &str
                                           // + val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, size: Size { raw: 40 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 })
                                           // mir::Constant
                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [105, 110, 116, 101, 114, 110, 97, 108, 32, 101, 114, 114, 111, 114, 58, 32, 101, 110, 116, 101, 114, 101, 100, 32, 117, 110, 114, 101, 97, 99, 104, 97, 98, 108, 101, 32, 99, 111, 100, 101], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1099511627775], len: Size { raw: 40 } }, size: Size { raw: 40 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 40 }) }
      }
  
      bb2: {
          StorageLive(_9);                 // scope 1 at $DIR/issue_76432.rs:9:10: 9:16
          _9 = &(*_2)[0 of 3];             // scope 1 at $DIR/issue_76432.rs:9:10: 9:16
          StorageLive(_10);                // scope 1 at $DIR/issue_76432.rs:9:18: 9:24
          _10 = &(*_2)[1 of 3];            // scope 1 at $DIR/issue_76432.rs:9:18: 9:24
          StorageLive(_11);                // scope 1 at $DIR/issue_76432.rs:9:26: 9:32
          _11 = &(*_2)[2 of 3];            // scope 1 at $DIR/issue_76432.rs:9:26: 9:32
          StorageDead(_11);                // scope 1 at $DIR/issue_76432.rs:9:84: 9:85
          StorageDead(_10);                // scope 1 at $DIR/issue_76432.rs:9:84: 9:85
          StorageDead(_9);                 // scope 1 at $DIR/issue_76432.rs:9:84: 9:85
          _0 = const ();                   // scope 0 at $DIR/issue_76432.rs:6:44: 12:2
          StorageDead(_4);                 // scope 0 at $DIR/issue_76432.rs:12:1: 12:2
          StorageDead(_2);                 // scope 0 at $DIR/issue_76432.rs:12:1: 12:2
          return;                          // scope 0 at $DIR/issue_76432.rs:12:2: 12:2
      }
  }
  
