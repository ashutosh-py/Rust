- // MIR for `opt_negative` before SimplifyComparisonIntegral
+ // MIR for `opt_negative` after SimplifyComparisonIntegral
  
  fn opt_negative(_1: i32) -> u32 {
      debug x => _1;                       // in scope 0 at $DIR/if-condition-int.rs:28:17: 28:18
      let mut _0: u32;                     // return place in scope 0 at $DIR/if-condition-int.rs:28:28: 28:31
      let mut _2: i32;                     // in scope 0 at $DIR/if-condition-int.rs:29:8: 29:9
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/if-condition-int.rs:29:8: 29:9
          _2 = _1;                         // scope 0 at $DIR/if-condition-int.rs:29:8: 29:9
          switchInt(move _2) -> [-42_i32: bb1, otherwise: bb2]; // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33
      }
  
      bb1: {
          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33
          _0 = const 0_u32;                // scope 0 at $DIR/if-condition-int.rs:29:19: 29:20
          return;                          // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33
      }
  
      bb2: {
          StorageDead(_2);                 // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33
          _0 = const 1_u32;                // scope 0 at $DIR/if-condition-int.rs:29:30: 29:31
          return;                          // scope 0 at $DIR/if-condition-int.rs:29:5: 29:33
      }
  }
  
