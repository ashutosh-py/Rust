- // MIR for `main` before SingleEnum
+ // MIR for `main` after SingleEnum
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/enum_prop.rs:3:11: 3:11
      let _1: i32;                         // in scope 0 at $DIR/enum_prop.rs:4:7: 4:8
      let mut _2: std::option::Option<std::boxed::Box<i32>>; // in scope 0 at $DIR/enum_prop.rs:4:17: 4:35
      let mut _3: std::boxed::Box<i32>;    // in scope 0 at $DIR/enum_prop.rs:4:22: 4:34
      let mut _4: isize;                   // in scope 0 at $DIR/enum_prop.rs:5:5: 5:12
      let _5: std::boxed::Box<i32>;        // in scope 0 at $DIR/enum_prop.rs:5:10: 5:11
      let _6: ();                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _7: (&i32, &i32);            // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _8: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _9: &i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let _10: i32;                        // in scope 0 at $DIR/enum_prop.rs:10:16: 10:18
      let mut _13: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _14: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _15: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _16: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _17: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let _19: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _20: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _21: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let _22: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _23: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let _24: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _25: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _27: std::option::Option<i32>; // in scope 0 at $DIR/enum_prop.rs:13:17: 13:24
      let mut _28: isize;                  // in scope 0 at $DIR/enum_prop.rs:14:14: 14:21
      let _30: ();                         // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _31: (&i32, &i32);           // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _32: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _33: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let _34: i32;                        // in scope 0 at $DIR/enum_prop.rs:17:17: 17:18
      let mut _37: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _38: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _39: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _40: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _41: !;                      // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let _43: !;                          // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _44: core::panicking::AssertKind; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _45: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let _46: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _47: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let _48: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _49: std::option::Option<std::fmt::Arguments>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      let mut _53: bool;                   // in scope 0 at $DIR/enum_prop.rs:9:4: 9:5
      let mut _54: isize;                  // in scope 0 at $DIR/enum_prop.rs:9:4: 9:5
      let mut _55: isize;                  // in scope 0 at $DIR/enum_prop.rs:9:4: 9:5
      let mut _56: isize;                  // in scope 0 at $DIR/enum_prop.rs:9:4: 9:5
      let mut _57: *const i32;             // in scope 0 at $DIR/enum_prop.rs:5:10: 5:11
      let mut _58: *const i32;             // in scope 0 at $DIR/enum_prop.rs:5:10: 5:11
      let mut _59: i32;                    // in scope 0 at $DIR/enum_prop.rs:4:22: 4:34
      scope 1 {
          debug v => _1;                   // in scope 1 at $DIR/enum_prop.rs:4:7: 4:8
          let _11: &i32;                   // in scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          let _12: &i32;                   // in scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          let _26: i32;                    // in scope 1 at $DIR/enum_prop.rs:13:7: 13:8
          let _29: &std::option::Option<i32>; // in scope 1 at $DIR/enum_prop.rs:14:5: 14:21
          let mut _51: &std::option::Option<i32>; // in scope 1 at $DIR/enum_prop.rs:14:5: 14:21
          let mut _52: &i32;               // in scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          scope 3 {
              debug left_val => _11;       // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
              debug right_val => _12;      // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
              let _18: core::panicking::AssertKind; // in scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
              scope 4 {
                  debug kind => _18;       // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
              }
          }
          scope 5 {
              debug x => _26;              // in scope 5 at $DIR/enum_prop.rs:13:7: 13:8
              let _35: &i32;               // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
              let _36: &i32;               // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
              let mut _50: &i32;           // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
              scope 7 {
                  debug left_val => _35;   // in scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
                  debug right_val => _36;  // in scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
                  let _42: core::panicking::AssertKind; // in scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
                  scope 8 {
                      debug kind => _42;   // in scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
                  }
              }
          }
          scope 6 {
              debug _y => _29;             // in scope 6 at $DIR/enum_prop.rs:14:5: 14:21
          }
      }
      scope 2 {
          debug x => _5;                   // in scope 2 at $DIR/enum_prop.rs:5:10: 5:11
      }
      scope 9 (inlined Box::<i32>::new) {  // at $DIR/enum_prop.rs:4:22: 4:34
          debug x => _59;                  // in scope 9 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
          let mut _60: usize;              // in scope 9 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
          let mut _61: usize;              // in scope 9 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
          let mut _62: *mut u8;            // in scope 9 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
          let mut _63: *const i32;         // in scope 9 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
          scope 10 {
          }
      }
  
      bb0: {
          _53 = const false;               // scope 0 at $DIR/enum_prop.rs:4:7: 4:8
          StorageLive(_1);                 // scope 0 at $DIR/enum_prop.rs:4:7: 4:8
          StorageLive(_2);                 // scope 0 at $DIR/enum_prop.rs:4:17: 4:35
          StorageLive(_3);                 // scope 0 at $DIR/enum_prop.rs:4:22: 4:34
          StorageLive(_59);                // scope 0 at $DIR/enum_prop.rs:4:22: 4:34
          _59 = const 10_i32;              // scope 0 at $DIR/enum_prop.rs:4:22: 4:34
          StorageLive(_60);                // scope 0 at $DIR/enum_prop.rs:4:22: 4:34
          StorageLive(_61);                // scope 0 at $DIR/enum_prop.rs:4:22: 4:34
          StorageLive(_62);                // scope 0 at $DIR/enum_prop.rs:4:22: 4:34
          _60 = const 4_usize;             // scope 10 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
          _61 = const 4_usize;             // scope 10 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
          _62 = alloc::alloc::exchange_malloc(const 4_usize, const 4_usize) -> [return: bb17, unwind: bb18]; // scope 10 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
                                           // mir::Constant
                                           // + span: $SRC_DIR/alloc/src/boxed.rs:LL:COL
                                           // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
      }
  
      bb1: {
          _1 = const 3_i32;                // scope 0 at $DIR/enum_prop.rs:8:10: 8:11
          goto -> bb15;                    // scope 0 at $DIR/enum_prop.rs:8:10: 8:11
      }
  
      bb2: {
          StorageLive(_5);                 // scope 0 at $DIR/enum_prop.rs:5:10: 5:11
          _53 = const false;               // scope 0 at $DIR/enum_prop.rs:5:10: 5:11
          _5 = move ((_2 as Some).0: std::boxed::Box<i32>); // scope 0 at $DIR/enum_prop.rs:5:10: 5:11
          StorageLive(_57);                // scope 2 at $DIR/enum_prop.rs:6:7: 6:9
          _57 = (((_5.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 2 at $DIR/enum_prop.rs:6:7: 6:9
          _1 = (*_57);                     // scope 2 at $DIR/enum_prop.rs:6:7: 6:9
          StorageDead(_57);                // scope 0 at $DIR/enum_prop.rs:7:5: 7:6
          drop(_5) -> [return: bb3, unwind: bb16]; // scope 0 at $DIR/enum_prop.rs:7:5: 7:6
      }
  
      bb3: {
          StorageDead(_5);                 // scope 0 at $DIR/enum_prop.rs:7:5: 7:6
          goto -> bb15;                    // scope 0 at $DIR/enum_prop.rs:7:5: 7:6
      }
  
      bb4: {
          StorageLive(_18);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          Deinit(_18);                     // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          discriminant(_18) = 0;           // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _20 = const core::panicking::AssertKind::Eq; // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // mir::Constant
                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
          StorageLive(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _22 = _11;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _21 = _22;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_23);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_24);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _24 = _12;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _23 = _24;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_25);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          Deinit(_25);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          discriminant(_25) = 0;           // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _19 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _21, move _23, move _25); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // mir::Constant
                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
                                           // mir::Constant
                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
      }
  
      bb5: {
          StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_12);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_11);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_7);                 // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_6);                 // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_26);                // scope 1 at $DIR/enum_prop.rs:13:7: 13:8
          StorageLive(_27);                // scope 1 at $DIR/enum_prop.rs:13:17: 13:24
          Deinit(_27);                     // scope 1 at $DIR/enum_prop.rs:13:17: 13:24
          ((_27 as Some).0: i32) = const 1_i32; // scope 1 at $DIR/enum_prop.rs:13:17: 13:24
          discriminant(_27) = 1;           // scope 1 at $DIR/enum_prop.rs:13:17: 13:24
          _28 = const 1_isize;             // scope 1 at $DIR/enum_prop.rs:13:17: 13:24
          switchInt(const 1_isize) -> [0_isize: bb6, otherwise: bb7]; // scope 1 at $DIR/enum_prop.rs:13:11: 13:24
      }
  
      bb6: {
          _26 = const 2_i32;               // scope 1 at $DIR/enum_prop.rs:15:13: 15:14
          goto -> bb8;                     // scope 1 at $DIR/enum_prop.rs:15:13: 15:14
      }
  
      bb7: {
          StorageLive(_29);                // scope 1 at $DIR/enum_prop.rs:14:5: 14:21
          _51 = const main::promoted[1];   // scope 1 at $DIR/enum_prop.rs:14:5: 14:21
                                           // mir::Constant
                                           // + span: $DIR/enum_prop.rs:14:5: 14:21
                                           // + literal: Const { ty: &Option<i32>, val: Unevaluated(main, [], Some(promoted[1])) }
          _29 = _51;                       // scope 1 at $DIR/enum_prop.rs:14:5: 14:21
          _26 = const 1_i32;               // scope 6 at $DIR/enum_prop.rs:14:25: 14:26
          StorageDead(_29);                // scope 1 at $DIR/enum_prop.rs:14:25: 14:26
          goto -> bb8;                     // scope 1 at $DIR/enum_prop.rs:14:25: 14:26
      }
  
      bb8: {
          StorageDead(_27);                // scope 1 at $DIR/enum_prop.rs:16:4: 16:5
          StorageLive(_30);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_31);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_32);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _32 = &_26;                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_33);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _50 = const main::promoted[0];   // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // mir::Constant
                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
          _33 = _50;                       // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          Deinit(_31);                     // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          (_31.0: &i32) = move _32;        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          (_31.1: &i32) = move _33;        // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_33);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_32);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_35);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _35 = (_31.0: &i32);             // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_36);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _36 = (_31.1: &i32);             // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_37);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_38);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_39);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _39 = (*_35);                    // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_40);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _40 = const 1_i32;               // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _38 = Eq(move _39, const 1_i32); // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_40);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_39);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _37 = Not(move _38);             // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_38);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          switchInt(move _37) -> [false: bb10, otherwise: bb9]; // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      }
  
      bb9: {
          StorageLive(_42);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          Deinit(_42);                     // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          discriminant(_42) = 0;           // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_43);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_44);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _44 = const core::panicking::AssertKind::Eq; // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // mir::Constant
                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
          StorageLive(_45);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_46);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _46 = _35;                       // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _45 = _46;                       // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_47);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_48);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _48 = _36;                       // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _47 = _48;                       // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_49);                // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          Deinit(_49);                     // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          discriminant(_49) = 0;           // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _43 = core::panicking::assert_failed::<i32, i32>(const core::panicking::AssertKind::Eq, move _45, move _47, move _49); // scope 8 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // mir::Constant
                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r i32, &'s i32, Option<Arguments<'t0>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
                                           // mir::Constant
                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
      }
  
      bb10: {
          StorageDead(_37);                // scope 7 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_36);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_35);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_31);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_30);                // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_26);                // scope 1 at $DIR/enum_prop.rs:19:1: 19:2
          StorageDead(_1);                 // scope 0 at $DIR/enum_prop.rs:19:1: 19:2
          return;                          // scope 0 at $DIR/enum_prop.rs:19:2: 19:2
      }
  
      bb11 (cleanup): {
          resume;                          // scope 0 at $DIR/enum_prop.rs:3:1: 19:2
      }
  
      bb12: {
          _53 = const false;               // scope 0 at $DIR/enum_prop.rs:9:4: 9:5
          StorageDead(_2);                 // scope 0 at $DIR/enum_prop.rs:9:4: 9:5
          StorageLive(_6);                 // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_7);                 // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_8);                 // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _8 = &_1;                        // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_9);                 // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _52 = const main::promoted[2];   // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // mir::Constant
                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL
                                           // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
          _9 = _52;                        // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          Deinit(_7);                      // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          (_7.0: &i32) = move _8;          // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          (_7.1: &i32) = move _9;          // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_9);                 // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_8);                 // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_11);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _11 = (_7.0: &i32);              // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_12);                // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _12 = (_7.1: &i32);              // scope 1 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_15);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _15 = (*_11);                    // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageLive(_16);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _16 = const 10_i32;              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _14 = Eq(move _15, const 10_i32); // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_16);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_15);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          _13 = Not(move _14);             // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
          switchInt(move _13) -> [false: bb5, otherwise: bb4]; // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL
      }
  
      bb13: {
          switchInt(_53) -> [false: bb12, otherwise: bb14]; // scope 0 at $DIR/enum_prop.rs:9:4: 9:5
      }
  
      bb14: {
          drop(((_2 as Some).0: std::boxed::Box<i32>)) -> [return: bb12, unwind: bb11]; // scope 0 at $DIR/enum_prop.rs:9:4: 9:5
      }
  
      bb15: {
          _54 = discriminant(_2);          // scope 0 at $DIR/enum_prop.rs:9:4: 9:5
          switchInt(move _54) -> [1_isize: bb13, otherwise: bb12]; // scope 0 at $DIR/enum_prop.rs:9:4: 9:5
      }
  
      bb16 (cleanup): {
          _56 = discriminant(_2);          // scope 0 at $DIR/enum_prop.rs:9:4: 9:5
          goto -> bb11;                    // scope 0 at $DIR/enum_prop.rs:9:4: 9:5
      }
  
      bb17: {
          _3 = ShallowInitBox(move _62, i32); // scope 9 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
          StorageLive(_63);                // scope 9 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
          _63 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 9 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
          (*_63) = const 10_i32;           // scope 9 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
          StorageDead(_63);                // scope 9 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
          StorageDead(_62);                // scope 0 at $DIR/enum_prop.rs:4:22: 4:34
          StorageDead(_61);                // scope 0 at $DIR/enum_prop.rs:4:22: 4:34
          StorageDead(_60);                // scope 0 at $DIR/enum_prop.rs:4:22: 4:34
          StorageDead(_59);                // scope 0 at $DIR/enum_prop.rs:4:22: 4:34
          _53 = const true;                // scope 0 at $DIR/enum_prop.rs:4:17: 4:35
          Deinit(_2);                      // scope 0 at $DIR/enum_prop.rs:4:17: 4:35
          ((_2 as Some).0: std::boxed::Box<i32>) = move _3; // scope 0 at $DIR/enum_prop.rs:4:17: 4:35
          discriminant(_2) = 1;            // scope 0 at $DIR/enum_prop.rs:4:17: 4:35
          StorageDead(_3);                 // scope 0 at $DIR/enum_prop.rs:4:34: 4:35
-         _4 = discriminant(_2);           // scope 0 at $DIR/enum_prop.rs:4:17: 4:35
+         _4 = const 1_isize;              // scope 0 at $DIR/enum_prop.rs:4:17: 4:35
          switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/enum_prop.rs:4:11: 4:35
      }
  
      bb18 (cleanup): {
          resume;                          // scope 9 at $SRC_DIR/alloc/src/boxed.rs:LL:COL
      }
  }
  
