// MIR for `<impl at $DIR/partial.rs:9:10: 9:19>::eq` before PreCodegen

fn <impl at $DIR/partial.rs:9:10: 9:19>::eq(_1: &E, _2: &E) -> bool {
    debug self => _1;                    // in scope 0 at $DIR/partial.rs:9:10: 9:19
    debug other => _2;                   // in scope 0 at $DIR/partial.rs:9:10: 9:19
    let mut _0: bool;                    // return place in scope 0 at $DIR/partial.rs:9:10: 9:19
    let _3: isize;                       // in scope 0 at $DIR/partial.rs:9:10: 9:19
    let mut _5: bool;                    // in scope 0 at $DIR/partial.rs:9:10: 9:19
    scope 1 {
        debug __self_vi => _3;           // in scope 1 at $DIR/partial.rs:9:10: 9:19
        let _4: isize;                   // in scope 1 at $DIR/partial.rs:9:10: 9:19
        scope 2 {
            debug __arg_1_vi => _4;      // in scope 2 at $DIR/partial.rs:9:10: 9:19
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at $DIR/partial.rs:9:10: 9:19
        _4 = discriminant((*_2));        // scope 1 at $DIR/partial.rs:9:10: 9:19
        _5 = Eq(_3, _4);                 // scope 2 at $DIR/partial.rs:9:10: 9:19
        switchInt(_5) -> [false: bb2, otherwise: bb1]; // scope 2 at $DIR/partial.rs:9:10: 9:19
    }

    bb1: {
        _0 = const true;                 // scope 2 at $DIR/partial.rs:9:10: 9:19
        goto -> bb3;                     // scope 2 at $DIR/partial.rs:9:10: 9:19
    }

    bb2: {
        _0 = const false;                // scope 2 at $DIR/partial.rs:9:10: 9:19
        goto -> bb3;                     // scope 2 at $DIR/partial.rs:9:10: 9:19
    }

    bb3: {
        return;                          // scope 0 at $DIR/partial.rs:9:19: 9:19
    }
}
