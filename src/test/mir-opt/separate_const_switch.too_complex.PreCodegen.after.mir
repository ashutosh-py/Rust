// MIR for `too_complex` after PreCodegen

fn too_complex(_1: Result<i32, usize>) -> Option<i32> {
    debug x => _1;                       // in scope 0 at $DIR/separate_const_switch.rs:12:16: 12:17
    let mut _0: std::option::Option<i32>; // return place in scope 0 at $DIR/separate_const_switch.rs:12:42: 12:53
    let mut _2: std::ops::ControlFlow<usize, i32>; // in scope 0 at $DIR/separate_const_switch.rs:17:11: 22:6
    let mut _3: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:19:13: 19:18
    let _4: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:19:16: 19:17
    let mut _5: i32;                     // in scope 0 at $DIR/separate_const_switch.rs:19:44: 19:45
    let _6: usize;                       // in scope 0 at $DIR/separate_const_switch.rs:20:17: 20:18
    let mut _7: usize;                   // in scope 0 at $DIR/separate_const_switch.rs:20:42: 20:43
    let mut _8: isize;                   // in scope 0 at $DIR/separate_const_switch.rs:23:9: 23:33
    let _9: i32;                         // in scope 0 at $DIR/separate_const_switch.rs:23:31: 23:32
    let mut _10: i32;                    // in scope 0 at $DIR/separate_const_switch.rs:23:42: 23:43
    let _11: usize;                      // in scope 0 at $DIR/separate_const_switch.rs:24:28: 24:29
    scope 1 {
        debug v => _4;                   // in scope 1 at $DIR/separate_const_switch.rs:19:16: 19:17
    }
    scope 2 {
        debug r => _6;                   // in scope 2 at $DIR/separate_const_switch.rs:20:17: 20:18
    }
    scope 3 {
        debug v => _9;                   // in scope 3 at $DIR/separate_const_switch.rs:23:31: 23:32
    }
    scope 4 {
        debug r => _11;                  // in scope 4 at $DIR/separate_const_switch.rs:24:28: 24:29
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:17:11: 22:6
        _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:18:15: 18:16
        switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/separate_const_switch.rs:18:9: 18:16
    }

    bb1: {
        StorageLive(_6);                 // scope 0 at $DIR/separate_const_switch.rs:20:17: 20:18
        _6 = ((_1 as Err).0: usize);     // scope 0 at $DIR/separate_const_switch.rs:20:17: 20:18
        StorageLive(_7);                 // scope 2 at $DIR/separate_const_switch.rs:20:42: 20:43
        _7 = _6;                         // scope 2 at $DIR/separate_const_switch.rs:20:42: 20:43
        discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:20:23: 20:44
        ((_2 as Break).0: usize) = move _7; // scope 2 at $DIR/separate_const_switch.rs:20:23: 20:44
        StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:20:43: 20:44
        StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44
        _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:17:11: 22:6
        switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:17:5: 22:6
    }

    bb2: {
        StorageLive(_4);                 // scope 0 at $DIR/separate_const_switch.rs:19:16: 19:17
        _4 = ((_1 as Ok).0: i32);        // scope 0 at $DIR/separate_const_switch.rs:19:16: 19:17
        StorageLive(_5);                 // scope 1 at $DIR/separate_const_switch.rs:19:44: 19:45
        _5 = _4;                         // scope 1 at $DIR/separate_const_switch.rs:19:44: 19:45
        discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:19:22: 19:46
        ((_2 as Continue).0: i32) = move _5; // scope 1 at $DIR/separate_const_switch.rs:19:22: 19:46
        StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:19:45: 19:46
        StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:19:45: 19:46
        _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:17:11: 22:6
        switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:17:5: 22:6
    }

    bb3: {
        StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:24:28: 24:29
        _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:24:28: 24:29
        discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:24:34: 24:38
        StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:24:37: 24:38
        goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:24:37: 24:38
    }

    bb4: {
        StorageLive(_9);                 // scope 0 at $DIR/separate_const_switch.rs:23:31: 23:32
        _9 = ((_2 as Continue).0: i32);  // scope 0 at $DIR/separate_const_switch.rs:23:31: 23:32
        StorageLive(_10);                // scope 3 at $DIR/separate_const_switch.rs:23:42: 23:43
        _10 = _9;                        // scope 3 at $DIR/separate_const_switch.rs:23:42: 23:43
        discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:23:37: 23:44
        ((_0 as Some).0: i32) = move _10; // scope 3 at $DIR/separate_const_switch.rs:23:37: 23:44
        StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:23:43: 23:44
        StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:23:43: 23:44
        goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:23:43: 23:44
    }

    bb5: {
        StorageDead(_2);                 // scope 0 at $DIR/separate_const_switch.rs:26:1: 26:2
        return;                          // scope 0 at $DIR/separate_const_switch.rs:26:2: 26:2
    }
}
