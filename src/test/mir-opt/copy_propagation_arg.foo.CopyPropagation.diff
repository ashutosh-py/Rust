- // MIR for `foo` before CopyPropagation
+ // MIR for `foo` after CopyPropagation
  
  fn foo(_1: u8) -> () {
      debug x => _1;                       // in scope 0 at $DIR/copy_propagation_arg.rs:11:8: 11:13
      let mut _0: ();                      // return place in scope 0 at $DIR/copy_propagation_arg.rs:11:19: 11:19
      let mut _2: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:13:9: 13:17
      let mut _3: u8;                      // in scope 0 at $DIR/copy_propagation_arg.rs:13:15: 13:16
  
      bb0: {
          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:13:9: 13:17
          StorageLive(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:13:15: 13:16
          _3 = _1;                         // scope 0 at $DIR/copy_propagation_arg.rs:13:15: 13:16
          _1 = dummy(move _3) -> bb1;      // scope 0 at $DIR/copy_propagation_arg.rs:13:9: 13:17
                                           // mir::Constant
                                           // + span: $DIR/copy_propagation_arg.rs:13:9: 13:14
                                           // + literal: Const { ty: fn(u8) -> u8 {dummy}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
          StorageDead(_3);                 // scope 0 at $DIR/copy_propagation_arg.rs:13:16: 13:17
          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:13:5: 13:17
          nop;                             // scope 0 at $DIR/copy_propagation_arg.rs:13:16: 13:17
          _0 = const ();                   // scope 0 at $DIR/copy_propagation_arg.rs:11:19: 14:2
          return;                          // scope 0 at $DIR/copy_propagation_arg.rs:14:2: 14:2
      }
  }
  
