- // MIR for `main` before ConstProp
+ // MIR for `main` after ConstProp
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/tuple_literal_propagation.rs:4:11: 4:11
      let _1: (usize, usize);              // in scope 0 at $DIR/tuple_literal_propagation.rs:5:9: 5:10
      let _2: ();                          // in scope 0 at $DIR/tuple_literal_propagation.rs:7:5: 7:15
      let mut _3: (usize, usize);          // in scope 0 at $DIR/tuple_literal_propagation.rs:7:13: 7:14
      scope 1 {
          debug x => _1;                   // in scope 1 at $DIR/tuple_literal_propagation.rs:5:9: 5:10
      }
  
      bb0: {
          StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/tuple_literal_propagation.rs:5:9: 5:10
          _1 = (const 1usize, const 2usize); // bb0[1]: scope 0 at $DIR/tuple_literal_propagation.rs:5:13: 5:19
                                           // ty::Const
                                           // + ty: usize
                                           // + val: Value(Scalar(0x0000000000000001))
                                           // mir::Constant
-                                          // + span: $DIR/tuple_literal_propagation.rs:5:14: 5:15
+                                          // + span: $DIR/tuple_literal_propagation.rs:5:13: 5:19
                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }
                                           // ty::Const
                                           // + ty: usize
                                           // + val: Value(Scalar(0x0000000000000002))
                                           // mir::Constant
-                                          // + span: $DIR/tuple_literal_propagation.rs:5:17: 5:18
+                                          // + span: $DIR/tuple_literal_propagation.rs:5:13: 5:19
                                           // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }
          StorageLive(_2);                 // bb0[2]: scope 1 at $DIR/tuple_literal_propagation.rs:7:5: 7:15
          StorageLive(_3);                 // bb0[3]: scope 1 at $DIR/tuple_literal_propagation.rs:7:13: 7:14
          _3 = _1;                         // bb0[4]: scope 1 at $DIR/tuple_literal_propagation.rs:7:13: 7:14
          _2 = const consume(move _3) -> bb1; // bb0[5]: scope 1 at $DIR/tuple_literal_propagation.rs:7:5: 7:15
                                           // ty::Const
                                           // + ty: fn((usize, usize)) {consume}
                                           // + val: Value(Scalar(<ZST>))
                                           // mir::Constant
                                           // + span: $DIR/tuple_literal_propagation.rs:7:5: 7:12
                                           // + literal: Const { ty: fn((usize, usize)) {consume}, val: Value(Scalar(<ZST>)) }
      }
  
      bb1: {
          StorageDead(_3);                 // bb1[0]: scope 1 at $DIR/tuple_literal_propagation.rs:7:14: 7:15
          StorageDead(_2);                 // bb1[1]: scope 1 at $DIR/tuple_literal_propagation.rs:7:15: 7:16
          _0 = const ();                   // bb1[2]: scope 0 at $DIR/tuple_literal_propagation.rs:4:11: 8:2
                                           // ty::Const
                                           // + ty: ()
                                           // + val: Value(Scalar(<ZST>))
                                           // mir::Constant
                                           // + span: $DIR/tuple_literal_propagation.rs:4:11: 8:2
                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }
          StorageDead(_1);                 // bb1[3]: scope 0 at $DIR/tuple_literal_propagation.rs:8:1: 8:2
          return;                          // bb1[4]: scope 0 at $DIR/tuple_literal_propagation.rs:8:2: 8:2
      }
  }
  
