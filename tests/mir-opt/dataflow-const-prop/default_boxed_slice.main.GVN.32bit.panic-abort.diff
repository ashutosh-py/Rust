- // MIR for `main` before GVN
+ // MIR for `main` after GVN
  
  fn main() -> () {
      let mut _0: ();
      let _1: A;
      let mut _2: std::boxed::Box<[bool]>;
      let mut _3: *mut A;
      let mut _4: ();
      scope 1 {
          debug a => _1;
      }
      scope 2 (inlined <Box<[bool]> as Default>::default) {
          let _5: std::ptr::Unique<[bool]>;
          let mut _6: std::ptr::Unique<[bool; 0]>;
          scope 3 {
          }
          scope 4 (inlined Unique::<[bool; 0]>::dangling) {
              let mut _7: std::ptr::NonNull<[bool; 0]>;
              scope 5 (inlined NonNull::<[bool; 0]>::dangling) {
                  let _8: *mut [bool; 0];
                  scope 6 {
                      scope 10 (inlined NonNull::<[bool; 0]>::new_unchecked) {
                          let mut _10: bool;
                          let _11: ();
                          let mut _12: *mut ();
                          let mut _13: *const [bool; 0];
                          scope 11 (inlined core::ub_checks::check_language_ub) {
                              scope 12 (inlined core::ub_checks::check_language_ub::runtime) {
                              }
                          }
                      }
                  }
                  scope 7 (inlined dangling_mut::<[bool; 0]>) {
                      let mut _9: usize;
                      scope 8 (inlined align_of::<[bool; 0]>) {
                      }
                      scope 9 (inlined without_provenance_mut::<[bool; 0]>) {
                      }
                  }
              }
          }
      }
      scope 13 (inlined std::ptr::drop_in_place::<A> - shim(Some(A))) {
      }
  
      bb0: {
          StorageLive(_1);
          StorageLive(_2);
          StorageLive(_5);
          StorageLive(_11);
          StorageLive(_6);
          StorageLive(_7);
          StorageLive(_8);
          StorageLive(_9);
-         _9 = AlignOf([bool; 0]);
-         _8 = _9 as *mut [bool; 0] (Transmute);
+         _9 = const 1_usize;
+         _8 = const {0x1 as *mut [bool; 0]};
          StorageDead(_9);
          StorageLive(_13);
          StorageLive(_10);
          _10 = UbChecks();
          switchInt(move _10) -> [0: bb3, otherwise: bb1];
      }
  
      bb1: {
          StorageLive(_12);
-         _12 = _8 as *mut () (PtrToPtr);
-         _11 = NonNull::<T>::new_unchecked::precondition_check(move _12) -> [return: bb2, unwind unreachable];
+         _12 = const {0x1 as *mut ()};
+         _11 = NonNull::<T>::new_unchecked::precondition_check(const {0x1 as *mut ()}) -> [return: bb2, unwind unreachable];
      }
  
      bb2: {
          StorageDead(_12);
          goto -> bb3;
      }
  
      bb3: {
          StorageDead(_10);
-         _13 = _8 as *const [bool; 0] (PtrToPtr);
-         _7 = NonNull::<[bool; 0]> { pointer: _13 };
+         _13 = const {0x1 as *const [bool; 0]};
+         _7 = const NonNull::<[bool; 0]> {{ pointer: {0x1 as *const [bool; 0]} }};
          StorageDead(_13);
          StorageDead(_8);
-         _6 = Unique::<[bool; 0]> { pointer: move _7, _marker: const PhantomData::<[bool; 0]> };
+         _6 = const Unique::<[bool; 0]> {{ pointer: NonNull::<[bool; 0]> {{ pointer: {0x1 as *const [bool; 0]} }}, _marker: PhantomData::<[bool; 0]> }};
          StorageDead(_7);
-         _5 = move _6 as std::ptr::Unique<[bool]> (PointerCoercion(Unsize));
+         _5 = const Unique::<[bool]> {{ pointer: NonNull::<[bool]> {{ pointer: Indirect { alloc_id: ALLOC0, offset: Size(0 bytes) }: *const [bool] }}, _marker: PhantomData::<[bool]> }};
          StorageDead(_6);
-         _2 = Box::<[bool]>(_5, const std::alloc::Global);
+         _2 = const Box::<[bool]>(Unique::<[bool]> {{ pointer: NonNull::<[bool]> {{ pointer: Indirect { alloc_id: ALLOC1, offset: Size(0 bytes) }: *const [bool] }}, _marker: PhantomData::<[bool]> }}, std::alloc::Global);
          StorageDead(_11);
          StorageDead(_5);
-         _1 = A { foo: move _2 };
+         _1 = const A {{ foo: Box::<[bool]>(Unique::<[bool]> {{ pointer: NonNull::<[bool]> {{ pointer: Indirect { alloc_id: ALLOC2, offset: Size(0 bytes) }: *const [bool] }}, _marker: PhantomData::<[bool]> }}, std::alloc::Global) }};
          StorageDead(_2);
          _0 = const ();
          _3 = &raw mut _1;
          drop(((*_3).0: std::boxed::Box<[bool]>)) -> [return: bb4, unwind unreachable];
      }
  
      bb4: {
          StorageDead(_1);
          return;
      }
  }
+ 
+ ALLOC2 (size: 8, align: 4) { .. }
+ 
+ ALLOC1 (size: 8, align: 4) { .. }
+ 
+ ALLOC0 (size: 8, align: 4) { .. }
  
