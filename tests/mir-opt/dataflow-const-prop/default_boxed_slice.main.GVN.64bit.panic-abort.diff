- // MIR for `main` before GVN
+ // MIR for `main` after GVN
  
  fn main() -> () {
      let mut _0: ();
      let _1: A;
      let mut _2: std::boxed::Box<[bool]>;
      scope 1 {
          debug a => _1;
      }
      scope 2 (inlined <Box<[bool]> as Default>::default) {
          let _3: std::ptr::Unique<[bool]>;
          let mut _4: std::ptr::Unique<[bool; 0]>;
          scope 3 {
              debug ptr => _3;
          }
          scope 4 (inlined Unique::<[bool; 0]>::dangling) {
              let mut _5: std::ptr::NonNull<[bool; 0]>;
              scope 5 (inlined NonNull::<[bool; 0]>::dangling) {
                  scope 6 {
                      let _6: *mut [bool; 0];
                      scope 7 {
                          debug ptr => _6;
                          scope 12 (inlined NonNull::<[bool; 0]>::new_unchecked) {
                              debug ptr => _6;
                              let mut _8: (*mut (),);
                              let mut _9: *mut ();
                              let mut _10: *const [bool; 0];
                              scope 13 {
                              }
                          }
                      }
                      scope 8 (inlined dangling_mut::<[bool; 0]>) {
                          let mut _7: usize;
                          scope 9 (inlined align_of::<[bool; 0]>) {
                          }
                          scope 10 (inlined without_provenance_mut::<[bool; 0]>) {
                              debug addr => _7;
                              scope 11 {
                              }
                          }
                      }
                  }
              }
          }
      }
  
      bb0: {
          StorageLive(_1);
          StorageLive(_2);
          StorageLive(_3);
          StorageLive(_4);
          StorageLive(_5);
          StorageLive(_6);
          StorageLive(_7);
-         _7 = AlignOf([bool; 0]);
-         _6 = _7 as *mut [bool; 0] (Transmute);
+         _7 = const 1_usize;
+         _6 = const {0x1 as *mut [bool; 0]};
          StorageDead(_7);
          StorageLive(_10);
          StorageLive(_8);
          StorageLive(_9);
-         _9 = _6 as *mut () (PtrToPtr);
-         _8 = (move _9,);
+         _9 = const {0x1 as *mut ()};
+         _8 = const ({0x1 as *mut ()},);
          StorageDead(_9);
-         UbCheck(LanguageUb): NonNull::<T>::new_unchecked::precondition_check(move _8);
+         UbCheck(LanguageUb): NonNull::<T>::new_unchecked::precondition_check(const ({0x1 as *mut ()},));
          StorageDead(_8);
-         _10 = _6 as *const [bool; 0] (PointerCoercion(MutToConstPointer));
-         _5 = NonNull::<[bool; 0]> { pointer: _10 };
+         _10 = const {0x1 as *const [bool; 0]};
+         _5 = const NonNull::<[bool; 0]> {{ pointer: {0x1 as *const [bool; 0]} }};
          StorageDead(_10);
          StorageDead(_6);
-         _4 = Unique::<[bool; 0]> { pointer: move _5, _marker: const PhantomData::<[bool; 0]> };
+         _4 = const Unique::<[bool; 0]> {{ pointer: NonNull::<[bool; 0]> {{ pointer: {0x1 as *const [bool; 0]} }}, _marker: PhantomData::<[bool; 0]> }};
          StorageDead(_5);
-         _3 = move _4 as std::ptr::Unique<[bool]> (PointerCoercion(Unsize));
+         _3 = const Unique::<[bool]> {{ pointer: NonNull::<[bool]> {{ pointer: Indirect { alloc_id: ALLOC0, offset: Size(0 bytes) }: *const [bool] }}, _marker: PhantomData::<[bool]> }};
          StorageDead(_4);
-         _2 = Box::<[bool]>(_3, const std::alloc::Global);
+         _2 = const Box::<[bool]>(Unique::<[bool]> {{ pointer: NonNull::<[bool]> {{ pointer: Indirect { alloc_id: ALLOC1, offset: Size(0 bytes) }: *const [bool] }}, _marker: PhantomData::<[bool]> }}, std::alloc::Global);
          StorageDead(_3);
-         _1 = A { foo: move _2 };
+         _1 = const A {{ foo: Box::<[bool]>(Unique::<[bool]> {{ pointer: NonNull::<[bool]> {{ pointer: Indirect { alloc_id: ALLOC2, offset: Size(0 bytes) }: *const [bool] }}, _marker: PhantomData::<[bool]> }}, std::alloc::Global) }};
          StorageDead(_2);
          _0 = const ();
          drop(_1) -> [return: bb1, unwind unreachable];
      }
  
      bb1: {
          StorageDead(_1);
          return;
      }
+ }
+ 
+ ALLOC2 (size: 16, align: 8) {
+     01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
+ }
+ 
+ ALLOC1 (size: 16, align: 8) {
+     01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
+ }
+ 
+ ALLOC0 (size: 16, align: 8) {
+     01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
  }
  
