- // MIR for `main` before Inline
+ // MIR for `main` after Inline
  
  fn main() -> () {
      let mut _0: ();                      // return place in scope 0 at $DIR/inline_into_box_place.rs:+0:11: +0:11
      let _1: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:9: +1:11
      let mut _2: usize;                   // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43
      let mut _3: usize;                   // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43
      let mut _4: *mut u8;                 // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43
      let mut _5: std::boxed::Box<std::vec::Vec<u32>>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43
      let mut _6: ();                      // in scope 0 at $DIR/inline_into_box_place.rs:+1:42: +1:43
      let mut _7: *const std::vec::Vec<u32>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43
+     let mut _23: &mut std::vec::Vec<u32>; // in scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43
+     let mut _24: std::vec::Vec<u32>;     // in scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43
      scope 1 {
          debug _x => _1;                  // in scope 1 at $DIR/inline_into_box_place.rs:+1:9: +1:11
      }
      scope 2 {
+         scope 3 (inlined alloc::alloc::exchange_malloc) { // at $DIR/inline_into_box_place.rs:8:29: 8:43
+             debug size => _2;            // in scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+             debug align => _3;           // in scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+             let _8: std::alloc::Layout;  // in scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+             let mut _9: usize;           // in scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+             let mut _10: usize;          // in scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+             let mut _11: std::result::Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError>; // in scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+             let mut _12: &std::alloc::Global; // in scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+             let mut _13: std::alloc::Layout; // in scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+             let mut _14: isize;          // in scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+             let mut _16: std::ptr::NonNull<[u8]>; // in scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+             let mut _17: !;              // in scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+             let mut _18: std::alloc::Layout; // in scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+             scope 4 {
+                 debug layout => _8;      // in scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+                 let _15: std::ptr::NonNull<[u8]>; // in scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+                 let mut _19: &std::alloc::Global; // in scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+                 scope 6 {
+                     debug ptr => _15;    // in scope 6 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+                 }
+             }
+             scope 5 {
+                 scope 7 (inlined Layout::from_size_align_unchecked) { // at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+                     debug size => _9;    // in scope 7 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+                     debug align => _10;  // in scope 7 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+                     let mut _20: usize;  // in scope 7 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+                     let mut _21: std::ptr::Alignment; // in scope 7 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+                     let mut _22: usize;  // in scope 7 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+                     scope 8 {
+                     }
+                 }
+             }
+         }
      }
+     scope 9 (inlined Vec::<u32>::new) {  // at $DIR/inline_into_box_place.rs:8:33: 8:43
+         let mut _25: alloc::raw_vec::RawVec<u32>; // in scope 9 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
+     }
  
      bb0: {
          StorageLive(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:9: +1:11
          _2 = SizeOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline_into_box_place.rs:+1:29: +1:43
          _3 = AlignOf(std::vec::Vec<u32>); // scope 2 at $DIR/inline_into_box_place.rs:+1:29: +1:43
-         _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 2 at $DIR/inline_into_box_place.rs:+1:29: +1:43
+         StorageLive(_19);                // scope 2 at $DIR/inline_into_box_place.rs:+1:29: +1:43
+         StorageLive(_8);                 // scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageLive(_9);                 // scope 5 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         _9 = _2;                         // scope 5 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageLive(_10);                // scope 5 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         _10 = _3;                        // scope 5 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageLive(_20);                // scope 8 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+         _20 = _9;                        // scope 8 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+         StorageLive(_21);                // scope 8 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+         StorageLive(_22);                // scope 8 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+         _22 = _10;                       // scope 8 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+         _21 = std::ptr::Alignment::new_unchecked(move _22) -> bb8; // scope 8 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
                                           // mir::Constant
-                                          // + span: $DIR/inline_into_box_place.rs:8:29: 8:43
-                                          // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
+                                          // + span: $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+                                          // + literal: Const { ty: unsafe fn(usize) -> std::ptr::Alignment {std::ptr::Alignment::new_unchecked}, val: Value(<ZST>) }
      }
  
      bb1: {
-         StorageLive(_5);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43
-         _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43
-         _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43
-         (*_7) = Vec::<u32>::new() -> [return: bb2, unwind: bb5]; // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43
-                                          // mir::Constant
-                                          // + span: $DIR/inline_into_box_place.rs:8:33: 8:41
-                                          // + user_ty: UserType(1)
-                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
+         StorageDead(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2
+         return;                          // scope 0 at $DIR/inline_into_box_place.rs:+2:2: +2:2
      }
  
-     bb2: {
-         _1 = move _5;                    // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43
-         StorageDead(_5);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:42: +1:43
-         _0 = const ();                   // scope 0 at $DIR/inline_into_box_place.rs:+0:11: +2:2
-         drop(_1) -> [return: bb3, unwind: bb4]; // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2
+     bb2 (cleanup): {
+         resume;                          // scope 0 at $DIR/inline_into_box_place.rs:+0:1: +2:2
      }
  
      bb3: {
-         StorageDead(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2
-         return;                          // scope 0 at $DIR/inline_into_box_place.rs:+2:2: +2:2
+         StorageDead(_13);                // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageDead(_12);                // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         _14 = discriminant(_11);         // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         switchInt(move _14) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
      }
  
-     bb4 (cleanup): {
-         resume;                          // scope 0 at $DIR/inline_into_box_place.rs:+0:1: +2:2
+     bb4: {
+         StorageLive(_17);                // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageLive(_18);                // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         _18 = _8;                        // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         _17 = handle_alloc_error(move _18); // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+                                          // mir::Constant
+                                          // + span: $SRC_DIR/alloc/src/alloc.rs:LL:COL
+                                          // + literal: Const { ty: fn(Layout) -> ! {handle_alloc_error}, val: Value(<ZST>) }
      }
  
-     bb5 (cleanup): {
-         _6 = alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>(move (_5.0: std::ptr::Unique<std::vec::Vec<u32>>), move (_5.1: std::alloc::Global)) -> bb4; // scope 0 at $DIR/inline_into_box_place.rs:+1:42: +1:43
+     bb5: {
+         unreachable;                     // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+     }
+ 
+     bb6: {
+         StorageLive(_15);                // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         _15 = ((_11 as Ok).0: std::ptr::NonNull<[u8]>); // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageLive(_16);                // scope 6 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         _16 = _15;                       // scope 6 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         _4 = NonNull::<[u8]>::as_mut_ptr(move _16) -> bb7; // scope 6 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
                                           // mir::Constant
-                                          // + span: $DIR/inline_into_box_place.rs:8:42: 8:43
-                                          // + literal: Const { ty: unsafe fn(Unique<Vec<u32>>, std::alloc::Global) {alloc::alloc::box_free::<Vec<u32>, std::alloc::Global>}, val: Value(<ZST>) }
+                                          // + span: $SRC_DIR/alloc/src/alloc.rs:LL:COL
+                                          // + literal: Const { ty: fn(NonNull<[u8]>) -> *mut u8 {NonNull::<[u8]>::as_mut_ptr}, val: Value(<ZST>) }
+     }
+ 
+     bb7: {
+         StorageDead(_16);                // scope 6 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageDead(_15);                // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageDead(_8);                 // scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageDead(_11);                // scope 3 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageDead(_19);                // scope 2 at $DIR/inline_into_box_place.rs:+1:29: +1:43
+         StorageLive(_5);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43
+         _5 = ShallowInitBox(move _4, std::vec::Vec<u32>); // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43
+         _7 = (((_5.0: std::ptr::Unique<std::vec::Vec<u32>>).0: std::ptr::NonNull<std::vec::Vec<u32>>).0: *const std::vec::Vec<u32>); // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43
+         StorageLive(_23);                // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43
+         _23 = &mut (*_7);                // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43
+         StorageLive(_24);                // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43
+         StorageLive(_25);                // scope 9 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
+         _25 = const _;                   // scope 9 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
+                                          // mir::Constant
+                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
+                                          // + user_ty: UserType(0)
+                                          // + literal: Const { ty: alloc::raw_vec::RawVec<u32>, val: Unevaluated(alloc::raw_vec::RawVec::<T>::NEW, [u32], None) }
+         _24 = Vec::<u32> { buf: move _25, len: const 0_usize }; // scope 9 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
+         StorageDead(_25);                // scope 9 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL
+         (*_23) = move _24;               // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43
+         StorageDead(_24);                // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43
+         StorageDead(_23);                // scope 0 at $DIR/inline_into_box_place.rs:+1:33: +1:43
+         _1 = move _5;                    // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:43
+         StorageDead(_5);                 // scope 0 at $DIR/inline_into_box_place.rs:+1:42: +1:43
+         _0 = const ();                   // scope 0 at $DIR/inline_into_box_place.rs:+0:11: +2:2
+         drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2
+     }
+ 
+     bb8: {
+         StorageDead(_22);                // scope 8 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+         _8 = Layout { size: move _20, align: move _21 }; // scope 8 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+         StorageDead(_21);                // scope 8 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+         StorageDead(_20);                // scope 8 at $SRC_DIR/core/src/alloc/layout.rs:LL:COL
+         StorageDead(_10);                // scope 5 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageDead(_9);                 // scope 5 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageLive(_11);                // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageLive(_12);                // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         _19 = const _;                   // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+                                          // mir::Constant
+                                          // + span: $SRC_DIR/alloc/src/alloc.rs:LL:COL
+                                          // + literal: Const { ty: &std::alloc::Global, val: Unevaluated(alloc::alloc::exchange_malloc, [], Some(promoted[0])) }
+         _12 = _19;                       // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         StorageLive(_13);                // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         _13 = _8;                        // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+         _11 = <std::alloc::Global as Allocator>::allocate(move _12, move _13) -> bb3; // scope 4 at $SRC_DIR/alloc/src/alloc.rs:LL:COL
+                                          // mir::Constant
+                                          // + span: $SRC_DIR/alloc/src/alloc.rs:LL:COL
+                                          // + literal: Const { ty: for<'a> fn(&'a std::alloc::Global, Layout) -> Result<NonNull<[u8]>, std::alloc::AllocError> {<std::alloc::Global as Allocator>::allocate}, val: Value(<ZST>) }
      }
  }
  
