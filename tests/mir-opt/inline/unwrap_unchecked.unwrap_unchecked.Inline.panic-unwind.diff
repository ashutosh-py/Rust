- // MIR for `unwrap_unchecked` before Inline
+ // MIR for `unwrap_unchecked` after Inline
  
  fn unwrap_unchecked(_1: Option<T>) -> T {
      debug slf => _1;
      let mut _0: T;
      let mut _2: std::option::Option<T>;
+     scope 1 (inlined #[track_caller] Option::<T>::unwrap_unchecked) {
+         debug self => _2;
+         let mut _3: isize;
+         let mut _4: bool;
+         scope 2 {
+             debug val => _0;
+         }
+         scope 3 {
+             scope 4 (inlined unreachable_unchecked) {
+                 scope 5 {
+                 }
+             }
+         }
+     }
  
      bb0: {
          StorageLive(_2);
          _2 = move _1;
-         _0 = Option::<T>::unwrap_unchecked(move _2) -> [return: bb1, unwind: bb2];
-     }
- 
-     bb1: {
+         StorageLive(_3);
+         StorageLive(_4);
+         _3 = discriminant(_2);
+         _4 = Eq(_3, const 1_isize);
+         assume(move _4);
+         _0 = move ((_2 as Some).0: T);
+         StorageDead(_4);
+         StorageDead(_3);
          StorageDead(_2);
          return;
-     }
- 
-     bb2 (cleanup): {
-         resume;
      }
  }
  
