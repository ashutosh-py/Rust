- // MIR for `main` before Inline
+ // MIR for `main` after Inline
  
  fn main() -> () {
      let mut _0: ();
      let _1: std::ops::CoroutineState<i32, bool>;
      let mut _2: std::pin::Pin<&mut {coroutine@$DIR/inline_coroutine.rs:20:5: 20:8}>;
      let mut _3: &mut {coroutine@$DIR/inline_coroutine.rs:20:5: 20:8};
      let mut _4: {coroutine@$DIR/inline_coroutine.rs:20:5: 20:8};
+     let mut _5: *mut {coroutine@$DIR/inline_coroutine.rs:20:5: 20:8};
+     let mut _6: ();
+     let mut _7: bool;
      scope 1 {
          debug _r => _1;
      }
+     scope 2 (inlined g) {
+     }
+     scope 3 (inlined Pin::<&mut {coroutine@$DIR/inline_coroutine.rs:20:5: 20:8}>::new) {
+         debug pointer => _3;
+         scope 4 (inlined Pin::<&mut {coroutine@$DIR/inline_coroutine.rs:20:5: 20:8}>::new_unchecked) {
+             debug pointer => _3;
+         }
+     }
+     scope 5 (inlined g::{closure#0}) {
+         debug a => _7;
+         let mut _8: &mut {coroutine@$DIR/inline_coroutine.rs:20:5: 20:8};
+         let mut _9: u32;
+         let mut _10: i32;
+     }
+     scope 6 (inlined std::ptr::drop_in_place::<{coroutine@$DIR/inline_coroutine.rs:20:5: 20:8}> - shim(Some({coroutine@$DIR/inline_coroutine.rs:20:5: 20:8}))) {
+         debug a => _15;
+         let mut _11: bool;
+         let mut _12: i32;
+         let mut _13: bool;
+         let mut _14: bool;
+         let _15: bool;
+         let mut _16: u32;
+     }
  
      bb0: {
          StorageLive(_1);
          StorageLive(_2);
          StorageLive(_3);
          StorageLive(_4);
-         _4 = g() -> [return: bb1, unwind unreachable];
+         _4 = {coroutine@$DIR/inline_coroutine.rs:20:5: 20:8 (#0)};
+         _3 = &mut _4;
+         _2 = Pin::<&mut {coroutine@$DIR/inline_coroutine.rs:20:5: 20:8}> { __pointer: _3 };
+         StorageDead(_3);
+         StorageLive(_7);
+         _7 = const false;
+         StorageLive(_8);
+         StorageLive(_9);
+         _8 = (_2.0: &mut {coroutine@$DIR/inline_coroutine.rs:20:5: 20:8});
+         _9 = discriminant((*_8));
+         switchInt(move _9) -> [0: bb2, 1: bb6, 3: bb7, otherwise: bb8];
      }
  
      bb1: {
-         _3 = &mut _4;
-         _2 = Pin::<&mut {coroutine@$DIR/inline_coroutine.rs:20:5: 20:8}>::new(move _3) -> [return: bb2, unwind unreachable];
+         StorageDead(_9);
+         StorageDead(_8);
+         StorageDead(_7);
+         StorageDead(_2);
+         _5 = &raw mut _4;
+         StorageLive(_11);
+         StorageLive(_13);
+         StorageLive(_14);
+         StorageLive(_15);
+         StorageLive(_16);
+         _16 = discriminant((*_5));
+         switchInt(move _16) -> [0: bb9, 3: bb10, otherwise: bb9];
      }
  
      bb2: {
-         StorageDead(_3);
-         _1 = <{coroutine@$DIR/inline_coroutine.rs:20:5: 20:8} as Coroutine<bool>>::resume(move _2, const false) -> [return: bb3, unwind unreachable];
+         StorageLive(_10);
+         switchInt(_7) -> [0: bb3, otherwise: bb4];
      }
  
      bb3: {
-         StorageDead(_2);
-         drop(_4) -> [return: bb4, unwind unreachable];
+         _10 = const 13_i32;
+         goto -> bb5;
      }
  
      bb4: {
+         _10 = const 7_i32;
+         goto -> bb5;
+     }
+ 
+     bb5: {
+         _1 = CoroutineState::<i32, bool>::Yielded(move _10);
+         StorageDead(_10);
+         discriminant((*_8)) = 3;
+         goto -> bb1;
+     }
+ 
+     bb6: {
+         assert(const false, "coroutine resumed after completion") -> [success: bb6, unwind unreachable];
+     }
+ 
+     bb7: {
+         StorageLive(_10);
+         StorageDead(_10);
+         _1 = CoroutineState::<i32, bool>::Complete(_7);
+         discriminant((*_8)) = 1;
+         goto -> bb1;
+     }
+ 
+     bb8: {
+         unreachable;
+     }
+ 
+     bb9: {
+         StorageDead(_16);
+         StorageDead(_15);
+         StorageDead(_14);
+         StorageDead(_13);
+         StorageDead(_11);
          StorageDead(_4);
          _0 = const ();
          StorageDead(_1);
          return;
+     }
+ 
+     bb10: {
+         StorageLive(_12);
+         StorageDead(_12);
+         goto -> bb9;
      }
  }
  
