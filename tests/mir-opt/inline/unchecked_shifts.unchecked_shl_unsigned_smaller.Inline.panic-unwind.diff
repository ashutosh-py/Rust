- // MIR for `unchecked_shl_unsigned_smaller` before Inline
+ // MIR for `unchecked_shl_unsigned_smaller` after Inline
  
  fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {
      debug a => _1;
      debug b => _2;
      let mut _0: u16;
      let mut _3: u16;
      let mut _4: u32;
+     scope 1 (inlined core::num::<impl u16>::unchecked_shl) {
+         debug self => _3;
+         debug rhs => _4;
+         let mut _5: bool;
+         let mut _6: bool;
+         let _7: !;
+         let mut _9: bool;
+         scope 2 {
+             scope 3 {
+                 debug lhs => _3;
+                 let _8: u16;
+                 scope 4 {
+                     debug rhs => _8;
+                 }
+             }
+         }
+     }
  
      bb0: {
          StorageLive(_3);
          _3 = _1;
          StorageLive(_4);
          _4 = _2;
-         _0 = core::num::<impl u16>::unchecked_shl(move _3, move _4) -> [return: bb1, unwind continue];
+         StorageLive(_7);
+         StorageLive(_8);
+         StorageLive(_5);
+         _5 = cfg!(debug_assertions);
+         switchInt(move _5) -> [0: bb4, otherwise: bb1];
      }
  
      bb1: {
+         StorageLive(_6);
+         _6 = Lt(_4, const _);
+         switchInt(move _6) -> [0: bb3, otherwise: bb2];
+     }
+ 
+     bb2: {
+         StorageDead(_6);
+         goto -> bb4;
+     }
+ 
+     bb3: {
+         _7 = core::panicking::panic_nounwind(const "u16::unchecked_shl cannot overflow") -> unwind unreachable;
+     }
+ 
+     bb4: {
+         StorageDead(_5);
+         StorageLive(_9);
+         _9 = Le(_4, const 65535_u32);
+         assume(move _9);
+         StorageDead(_9);
+         _8 = _4 as u16 (IntToInt);
+         _0 = ShlUnchecked(_3, _8);
+         StorageDead(_8);
+         StorageDead(_7);
          StorageDead(_4);
          StorageDead(_3);
          return;
      }
  }
  
