// MIR for `unchecked_shl_unsigned_smaller` after PreCodegen

fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {
    debug a => _1;
    debug b => _2;
    let mut _0: u16;
    scope 1 (inlined core::num::<impl u16>::unchecked_shl) {
        debug self => _1;
        debug rhs => _2;
        let mut _3: bool;
        let mut _4: bool;
        let _5: !;
        let mut _6: bool;
        scope 2 {
            scope 3 {
                debug lhs => _1;
                let _7: u16;
                scope 4 {
                    debug rhs => _7;
                }
            }
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_3);
        _3 = cfg!(debug_assertions);
        switchInt(move _3) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageLive(_4);
        _4 = Lt(_2, const _);
        switchInt(move _4) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = core::panicking::panic_nounwind(const "u16::unchecked_shl cannot overflow") -> unwind unreachable;
    }

    bb3: {
        StorageDead(_4);
        goto -> bb4;
    }

    bb4: {
        StorageDead(_3);
        StorageLive(_6);
        _6 = Le(_2, const 65535_u32);
        assume(move _6);
        StorageDead(_6);
        _7 = _2 as u16 (IntToInt);
        _0 = ShlUnchecked(_1, _7);
        StorageDead(_7);
        return;
    }
}
