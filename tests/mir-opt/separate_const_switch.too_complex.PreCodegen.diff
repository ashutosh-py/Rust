- // MIR for `too_complex` before PreCodegen
+ // MIR for `too_complex` after PreCodegen
  
  fn too_complex(_1: Result<i32, usize>) -> Option<i32> {
      debug x => _1;
      let mut _0: std::option::Option<i32>;
      let mut _2: isize;
      let _3: i32;
      let mut _4: std::ops::ControlFlow<usize, i32>;
      let _5: i32;
      let _6: usize;
      let _7: usize;
      scope 1 {
          debug v => _3;
      }
      scope 2 {
          debug r => _6;
      }
      scope 3 {
          debug v => _5;
      }
      scope 4 {
          debug r => _7;
      }
  
      bb0: {
          StorageLive(_4);
          _2 = discriminant(_1);
          switchInt(move _2) -> [0: bb1, 1: bb2, otherwise: bb4];
      }
  
      bb1: {
          _3 = ((_1 as Ok).0: i32);
          _4 = ControlFlow::<usize, i32>::Continue(_3);
          _5 = ((_4 as Continue).0: i32);
          _0 = Option::<i32>::Some(_5);
          goto -> bb3;
      }
  
      bb2: {
          _6 = ((_1 as Err).0: usize);
          _4 = ControlFlow::<usize, i32>::Break(_6);
          StorageLive(_7);
          _7 = ((_4 as Break).0: usize);
          _0 = const Option::<i32>::None;
          StorageDead(_7);
          goto -> bb3;
      }
  
      bb3: {
          StorageDead(_4);
          return;
      }
  
      bb4: {
          unreachable;
      }
  }
  
  ALLOC0 (size: 8, align: 4) {
      00 00 00 00 __ __ __ __                         │ ....░░░░
  }
  
