- // MIR for `variant_b::{closure#0}` before DestinationPropagation
+ // MIR for `variant_b::{closure#0}` after DestinationPropagation
  
  fn variant_b::{closure#0}(_1: &mut [closure@$DIR/slice_filter.rs:12:25: 12:41], _2: &&(usize, usize, usize, usize)) -> bool {
      let mut _0: bool;                    // return place in scope 0 at $DIR/slice_filter.rs:+0:42: +0:42
      let _3: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:29: +0:30
      let _4: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:32: +0:33
      let _5: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:35: +0:36
      let _6: usize;                       // in scope 0 at $DIR/slice_filter.rs:+0:38: +0:39
      let mut _7: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:58
      let mut _8: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:42: +0:48
      let mut _9: bool;                    // in scope 0 at $DIR/slice_filter.rs:+0:52: +0:58
      let mut _10: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:78
      let mut _11: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:62: +0:68
      let mut _12: bool;                   // in scope 0 at $DIR/slice_filter.rs:+0:72: +0:78
      let mut _13: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40
      let mut _14: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40
      let mut _15: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40
      let mut _16: &(usize, usize, usize, usize); // in scope 0 at $DIR/slice_filter.rs:+0:26: +0:40
      scope 1 {
          debug a => _3;                   // in scope 1 at $DIR/slice_filter.rs:+0:29: +0:30
          debug b => _4;                   // in scope 1 at $DIR/slice_filter.rs:+0:32: +0:33
          debug c => _5;                   // in scope 1 at $DIR/slice_filter.rs:+0:35: +0:36
          debug d => _6;                   // in scope 1 at $DIR/slice_filter.rs:+0:38: +0:39
      }
  
      bb0: {
          _13 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30
          _3 = ((*_13).0: usize);          // scope 0 at $DIR/slice_filter.rs:+0:29: +0:30
          _14 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33
          _4 = ((*_14).1: usize);          // scope 0 at $DIR/slice_filter.rs:+0:32: +0:33
          _15 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36
          _5 = ((*_15).2: usize);          // scope 0 at $DIR/slice_filter.rs:+0:35: +0:36
          _16 = deref_copy (*_2);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39
          _6 = ((*_16).3: usize);          // scope 0 at $DIR/slice_filter.rs:+0:38: +0:39
          _8 = Le(_3, _5);                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:48
          switchInt(move _8) -> [0: bb3, otherwise: bb4]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58
      }
  
      bb1: {
          _0 = const true;                 // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78
          return;                          // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78
      }
  
      bb2: {
          _11 = Le(_5, _3);                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:68
          switchInt(move _11) -> [0: bb5, otherwise: bb6]; // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78
      }
  
      bb3: {
          goto -> bb2;                     // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58
      }
  
      bb4: {
          _9 = Le(_6, _4);                 // scope 1 at $DIR/slice_filter.rs:+0:52: +0:58
-         _7 = move _9;                    // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58
-         switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78
+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:42: +0:58
+         switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78
      }
  
      bb5: {
-         _10 = const false;               // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78
+         _0 = const false;                // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78
          goto -> bb7;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78
      }
  
      bb6: {
-         _12 = Le(_4, _6);                // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78
-         _10 = move _12;                  // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78
+         _0 = Le(_4, _6);                 // scope 1 at $DIR/slice_filter.rs:+0:72: +0:78
+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78
          goto -> bb7;                     // scope 1 at $DIR/slice_filter.rs:+0:62: +0:78
      }
  
      bb7: {
-         _0 = move _10;                   // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78
+         nop;                             // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78
          return;                          // scope 1 at $DIR/slice_filter.rs:+0:42: +0:78
      }
  }
  
