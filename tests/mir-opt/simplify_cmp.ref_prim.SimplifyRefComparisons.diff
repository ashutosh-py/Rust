- // MIR for `ref_prim` before SimplifyRefComparisons
+ // MIR for `ref_prim` after SimplifyRefComparisons
  
  fn ref_prim(_1: &i32, _2: &i32) -> () {
      debug x => _1;                       // in scope 0 at $DIR/simplify_cmp.rs:+0:17: +0:18
      debug y => _2;                       // in scope 0 at $DIR/simplify_cmp.rs:+0:26: +0:27
      let mut _0: ();                      // return place in scope 0 at $DIR/simplify_cmp.rs:+0:35: +0:35
      let _3: bool;                        // in scope 0 at $DIR/simplify_cmp.rs:+1:9: +1:11
      let mut _4: &&i32;                   // in scope 0 at $DIR/simplify_cmp.rs:+1:14: +1:15
      let mut _5: &&i32;                   // in scope 0 at $DIR/simplify_cmp.rs:+1:19: +1:20
      let mut _7: &&i32;                   // in scope 0 at $DIR/simplify_cmp.rs:+2:14: +2:15
      let mut _8: &&i32;                   // in scope 0 at $DIR/simplify_cmp.rs:+2:19: +2:20
      let mut _10: &&i32;                  // in scope 0 at $DIR/simplify_cmp.rs:+3:14: +3:15
      let mut _11: &&i32;                  // in scope 0 at $DIR/simplify_cmp.rs:+3:18: +3:19
      let _12: &i32;                       // in scope 0 at $DIR/simplify_cmp.rs:+3:18: +3:19
      let mut _14: &&i32;                  // in scope 0 at $DIR/simplify_cmp.rs:+4:14: +4:15
      let mut _15: &&i32;                  // in scope 0 at $DIR/simplify_cmp.rs:+4:19: +4:20
      let _16: &i32;                       // in scope 0 at $DIR/simplify_cmp.rs:+4:19: +4:20
      let mut _18: &&i32;                  // in scope 0 at $DIR/simplify_cmp.rs:+5:14: +5:15
      let mut _19: &&i32;                  // in scope 0 at $DIR/simplify_cmp.rs:+5:18: +5:19
      let _20: &i32;                       // in scope 0 at $DIR/simplify_cmp.rs:+5:18: +5:19
      let mut _22: &&i32;                  // in scope 0 at $DIR/simplify_cmp.rs:+6:14: +6:15
      let mut _23: &&i32;                  // in scope 0 at $DIR/simplify_cmp.rs:+6:19: +6:20
      let _24: &i32;                       // in scope 0 at $DIR/simplify_cmp.rs:+6:19: +6:20
      scope 1 {
          debug _a => _3;                  // in scope 1 at $DIR/simplify_cmp.rs:+1:9: +1:11
          let _6: bool;                    // in scope 1 at $DIR/simplify_cmp.rs:+2:9: +2:11
          scope 2 {
              debug _b => _6;              // in scope 2 at $DIR/simplify_cmp.rs:+2:9: +2:11
              let _9: bool;                // in scope 2 at $DIR/simplify_cmp.rs:+3:9: +3:11
              scope 3 {
                  debug _c => _9;          // in scope 3 at $DIR/simplify_cmp.rs:+3:9: +3:11
                  let _13: bool;           // in scope 3 at $DIR/simplify_cmp.rs:+4:9: +4:11
                  scope 4 {
                      debug _d => _13;     // in scope 4 at $DIR/simplify_cmp.rs:+4:9: +4:11
                      let _17: bool;       // in scope 4 at $DIR/simplify_cmp.rs:+5:9: +5:11
                      scope 5 {
                          debug _e => _17; // in scope 5 at $DIR/simplify_cmp.rs:+5:9: +5:11
                          let _21: bool;   // in scope 5 at $DIR/simplify_cmp.rs:+6:9: +6:11
                          scope 6 {
                              debug _f => _21; // in scope 6 at $DIR/simplify_cmp.rs:+6:9: +6:11
                          }
                      }
                  }
              }
          }
      }
  
      bb0: {
          StorageLive(_3);                 // scope 0 at $DIR/simplify_cmp.rs:+1:9: +1:11
          StorageLive(_4);                 // scope 0 at $DIR/simplify_cmp.rs:+1:14: +1:15
          _4 = &_1;                        // scope 0 at $DIR/simplify_cmp.rs:+1:14: +1:15
          StorageLive(_5);                 // scope 0 at $DIR/simplify_cmp.rs:+1:19: +1:20
          _5 = &_2;                        // scope 0 at $DIR/simplify_cmp.rs:+1:19: +1:20
-         _3 = <&i32 as PartialEq>::eq(move _4, move _5) -> bb1; // scope 0 at $DIR/simplify_cmp.rs:+1:14: +1:20
+         _3 = <i32 as PartialEq>::eq((*_4), (*_5)) -> bb1; // scope 0 at $DIR/simplify_cmp.rs:+1:14: +1:20
                                           // mir::Constant
                                           // + span: $DIR/simplify_cmp.rs:8:14: 8:20
-                                          // + literal: Const { ty: for<'a, 'b> fn(&'a &i32, &'b &i32) -> bool {<&i32 as PartialEq>::eq}, val: Value(<ZST>) }
+                                          // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {<i32 as PartialEq>::eq}, val: Value(<ZST>) }
      }
  
      bb1: {
          StorageDead(_5);                 // scope 0 at $DIR/simplify_cmp.rs:+1:19: +1:20
          StorageDead(_4);                 // scope 0 at $DIR/simplify_cmp.rs:+1:19: +1:20
          StorageLive(_6);                 // scope 1 at $DIR/simplify_cmp.rs:+2:9: +2:11
          StorageLive(_7);                 // scope 1 at $DIR/simplify_cmp.rs:+2:14: +2:15
          _7 = &_1;                        // scope 1 at $DIR/simplify_cmp.rs:+2:14: +2:15
          StorageLive(_8);                 // scope 1 at $DIR/simplify_cmp.rs:+2:19: +2:20
          _8 = &_2;                        // scope 1 at $DIR/simplify_cmp.rs:+2:19: +2:20
-         _6 = <&i32 as PartialEq>::ne(move _7, move _8) -> bb2; // scope 1 at $DIR/simplify_cmp.rs:+2:14: +2:20
+         _6 = <i32 as PartialEq>::ne((*_7), (*_8)) -> bb2; // scope 1 at $DIR/simplify_cmp.rs:+2:14: +2:20
                                           // mir::Constant
                                           // + span: $DIR/simplify_cmp.rs:9:14: 9:20
-                                          // + literal: Const { ty: for<'a, 'b> fn(&'a &i32, &'b &i32) -> bool {<&i32 as PartialEq>::ne}, val: Value(<ZST>) }
+                                          // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {<i32 as PartialEq>::ne}, val: Value(<ZST>) }
      }
  
      bb2: {
          StorageDead(_8);                 // scope 1 at $DIR/simplify_cmp.rs:+2:19: +2:20
          StorageDead(_7);                 // scope 1 at $DIR/simplify_cmp.rs:+2:19: +2:20
          StorageLive(_9);                 // scope 2 at $DIR/simplify_cmp.rs:+3:9: +3:11
          StorageLive(_10);                // scope 2 at $DIR/simplify_cmp.rs:+3:14: +3:15
          _10 = &_1;                       // scope 2 at $DIR/simplify_cmp.rs:+3:14: +3:15
          StorageLive(_11);                // scope 2 at $DIR/simplify_cmp.rs:+3:18: +3:19
          StorageLive(_12);                // scope 2 at $DIR/simplify_cmp.rs:+3:18: +3:19
          _12 = &(*_2);                    // scope 2 at $DIR/simplify_cmp.rs:+3:18: +3:19
          _11 = &_12;                      // scope 2 at $DIR/simplify_cmp.rs:+3:18: +3:19
-         _9 = <&i32 as PartialOrd>::lt(move _10, move _11) -> bb3; // scope 2 at $DIR/simplify_cmp.rs:+3:14: +3:19
+         _9 = <i32 as PartialOrd>::lt((*_10), (*_11)) -> bb3; // scope 2 at $DIR/simplify_cmp.rs:+3:14: +3:19
                                           // mir::Constant
                                           // + span: $DIR/simplify_cmp.rs:10:14: 10:19
-                                          // + literal: Const { ty: for<'a, 'b> fn(&'a &i32, &'b &i32) -> bool {<&i32 as PartialOrd>::lt}, val: Value(<ZST>) }
+                                          // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {<i32 as PartialOrd>::lt}, val: Value(<ZST>) }
      }
  
      bb3: {
          StorageDead(_11);                // scope 2 at $DIR/simplify_cmp.rs:+3:18: +3:19
          StorageDead(_10);                // scope 2 at $DIR/simplify_cmp.rs:+3:18: +3:19
          StorageDead(_12);                // scope 2 at $DIR/simplify_cmp.rs:+3:19: +3:20
          StorageLive(_13);                // scope 3 at $DIR/simplify_cmp.rs:+4:9: +4:11
          StorageLive(_14);                // scope 3 at $DIR/simplify_cmp.rs:+4:14: +4:15
          _14 = &_1;                       // scope 3 at $DIR/simplify_cmp.rs:+4:14: +4:15
          StorageLive(_15);                // scope 3 at $DIR/simplify_cmp.rs:+4:19: +4:20
          StorageLive(_16);                // scope 3 at $DIR/simplify_cmp.rs:+4:19: +4:20
          _16 = &(*_2);                    // scope 3 at $DIR/simplify_cmp.rs:+4:19: +4:20
          _15 = &_16;                      // scope 3 at $DIR/simplify_cmp.rs:+4:19: +4:20
-         _13 = <&i32 as PartialOrd>::le(move _14, move _15) -> bb4; // scope 3 at $DIR/simplify_cmp.rs:+4:14: +4:20
+         _13 = <i32 as PartialOrd>::le((*_14), (*_15)) -> bb4; // scope 3 at $DIR/simplify_cmp.rs:+4:14: +4:20
                                           // mir::Constant
                                           // + span: $DIR/simplify_cmp.rs:11:14: 11:20
-                                          // + literal: Const { ty: for<'a, 'b> fn(&'a &i32, &'b &i32) -> bool {<&i32 as PartialOrd>::le}, val: Value(<ZST>) }
+                                          // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {<i32 as PartialOrd>::le}, val: Value(<ZST>) }
      }
  
      bb4: {
          StorageDead(_15);                // scope 3 at $DIR/simplify_cmp.rs:+4:19: +4:20
          StorageDead(_14);                // scope 3 at $DIR/simplify_cmp.rs:+4:19: +4:20
          StorageDead(_16);                // scope 3 at $DIR/simplify_cmp.rs:+4:20: +4:21
          StorageLive(_17);                // scope 4 at $DIR/simplify_cmp.rs:+5:9: +5:11
          StorageLive(_18);                // scope 4 at $DIR/simplify_cmp.rs:+5:14: +5:15
          _18 = &_1;                       // scope 4 at $DIR/simplify_cmp.rs:+5:14: +5:15
          StorageLive(_19);                // scope 4 at $DIR/simplify_cmp.rs:+5:18: +5:19
          StorageLive(_20);                // scope 4 at $DIR/simplify_cmp.rs:+5:18: +5:19
          _20 = &(*_2);                    // scope 4 at $DIR/simplify_cmp.rs:+5:18: +5:19
          _19 = &_20;                      // scope 4 at $DIR/simplify_cmp.rs:+5:18: +5:19
-         _17 = <&i32 as PartialOrd>::gt(move _18, move _19) -> bb5; // scope 4 at $DIR/simplify_cmp.rs:+5:14: +5:19
+         _17 = <i32 as PartialOrd>::gt((*_18), (*_19)) -> bb5; // scope 4 at $DIR/simplify_cmp.rs:+5:14: +5:19
                                           // mir::Constant
                                           // + span: $DIR/simplify_cmp.rs:12:14: 12:19
-                                          // + literal: Const { ty: for<'a, 'b> fn(&'a &i32, &'b &i32) -> bool {<&i32 as PartialOrd>::gt}, val: Value(<ZST>) }
+                                          // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {<i32 as PartialOrd>::gt}, val: Value(<ZST>) }
      }
  
      bb5: {
          StorageDead(_19);                // scope 4 at $DIR/simplify_cmp.rs:+5:18: +5:19
          StorageDead(_18);                // scope 4 at $DIR/simplify_cmp.rs:+5:18: +5:19
          StorageDead(_20);                // scope 4 at $DIR/simplify_cmp.rs:+5:19: +5:20
          StorageLive(_21);                // scope 5 at $DIR/simplify_cmp.rs:+6:9: +6:11
          StorageLive(_22);                // scope 5 at $DIR/simplify_cmp.rs:+6:14: +6:15
          _22 = &_1;                       // scope 5 at $DIR/simplify_cmp.rs:+6:14: +6:15
          StorageLive(_23);                // scope 5 at $DIR/simplify_cmp.rs:+6:19: +6:20
          StorageLive(_24);                // scope 5 at $DIR/simplify_cmp.rs:+6:19: +6:20
          _24 = &(*_2);                    // scope 5 at $DIR/simplify_cmp.rs:+6:19: +6:20
          _23 = &_24;                      // scope 5 at $DIR/simplify_cmp.rs:+6:19: +6:20
-         _21 = <&i32 as PartialOrd>::ge(move _22, move _23) -> bb6; // scope 5 at $DIR/simplify_cmp.rs:+6:14: +6:20
+         _21 = <i32 as PartialOrd>::ge((*_22), (*_23)) -> bb6; // scope 5 at $DIR/simplify_cmp.rs:+6:14: +6:20
                                           // mir::Constant
                                           // + span: $DIR/simplify_cmp.rs:13:14: 13:20
-                                          // + literal: Const { ty: for<'a, 'b> fn(&'a &i32, &'b &i32) -> bool {<&i32 as PartialOrd>::ge}, val: Value(<ZST>) }
+                                          // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b i32) -> bool {<i32 as PartialOrd>::ge}, val: Value(<ZST>) }
      }
  
      bb6: {
          StorageDead(_23);                // scope 5 at $DIR/simplify_cmp.rs:+6:19: +6:20
          StorageDead(_22);                // scope 5 at $DIR/simplify_cmp.rs:+6:19: +6:20
          StorageDead(_24);                // scope 5 at $DIR/simplify_cmp.rs:+6:20: +6:21
          _0 = const ();                   // scope 0 at $DIR/simplify_cmp.rs:+0:35: +7:2
          StorageDead(_21);                // scope 5 at $DIR/simplify_cmp.rs:+7:1: +7:2
          StorageDead(_17);                // scope 4 at $DIR/simplify_cmp.rs:+7:1: +7:2
          StorageDead(_13);                // scope 3 at $DIR/simplify_cmp.rs:+7:1: +7:2
          StorageDead(_9);                 // scope 2 at $DIR/simplify_cmp.rs:+7:1: +7:2
          StorageDead(_6);                 // scope 1 at $DIR/simplify_cmp.rs:+7:1: +7:2
          StorageDead(_3);                 // scope 0 at $DIR/simplify_cmp.rs:+7:1: +7:2
          return;                          // scope 0 at $DIR/simplify_cmp.rs:+7:2: +7:2
      }
  }
  
