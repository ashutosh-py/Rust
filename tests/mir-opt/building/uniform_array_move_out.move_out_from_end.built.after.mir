// MIR for `move_out_from_end` after built

fn move_out_from_end() -> () {
    let mut _0: ();
    let _1: [std::boxed::Box<i32>; 2];
    let mut _2: std::boxed::Box<i32>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<i32>;
    let mut _7: std::boxed::Box<i32>;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: *mut u8;
    let mut _11: std::boxed::Box<i32>;
    scope 1 {
        debug a => _1;
        let _12: std::boxed::Box<i32>;
        scope 2 {
            debug _y => _12;
        }
    }

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _3 = SizeOf(i32);
        _4 = AlignOf(i32);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind: bb8];
    }

    bb1: {
        StorageLive(_6);
        _6 = ShallowInitBox(move _5, i32);
        (*_6) = const 1_i32;
        _2 = move _6;
        StorageDead(_6);
        StorageLive(_7);
        _8 = SizeOf(i32);
        _9 = AlignOf(i32);
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        StorageLive(_11);
        _11 = ShallowInitBox(move _10, i32);
        (*_11) = const 2_i32;
        _7 = move _11;
        StorageDead(_11);
        _1 = [move _2, move _7];
        StorageDead(_7);
        StorageDead(_2);
        FakeRead(ForLet(None), _1);
        PlaceMention(_1);
        StorageLive(_12);
        _12 = move _1[1 of 2];
        _0 = const ();
        drop(_12) -> [return: bb4, unwind: bb6];
    }

    bb3: {
        FakeRead(ForMatchedPlace(None), _1);
        unreachable;
    }

    bb4: {
        StorageDead(_12);
        drop(_1) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        StorageDead(_1);
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate(cleanup)];
    }

    bb8 (cleanup): {
        resume;
    }
}
