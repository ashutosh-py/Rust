- // MIR for `test` before MultipleReturnTerminators
+ // MIR for `test` after MultipleReturnTerminators
  
  fn test(_1: bool) -> () {
      debug x => _1;                       // in scope 0 at $DIR/multiple_return_terminators.rs:+0:9: +0:10
      let mut _0: ();                      // return place in scope 0 at $DIR/multiple_return_terminators.rs:+0:18: +0:18
      let mut _2: bool;                    // in scope 0 at $DIR/multiple_return_terminators.rs:+1:8: +1:9
      let mut _3: bool;                    // in scope 0 at $DIR/multiple_return_terminators.rs:+1:8: +1:9
  
      bb0: {
          StorageLive(_2);                 // scope 0 at $DIR/multiple_return_terminators.rs:+1:8: +1:9
          _2 = _1;                         // scope 0 at $DIR/multiple_return_terminators.rs:+1:8: +1:9
          StorageLive(_3);                 // scope 0 at $DIR/multiple_return_terminators.rs:+1:8: +1:9
          _3 = move _2;                    // scope 0 at $DIR/multiple_return_terminators.rs:+1:8: +1:9
          StorageDead(_3);                 // scope 0 at $DIR/multiple_return_terminators.rs:+1:8: +1:9
          StorageDead(_2);                 // scope 0 at $DIR/multiple_return_terminators.rs:+5:5: +5:6
          return;                          // scope 0 at $DIR/multiple_return_terminators.rs:+6:2: +6:2
      }
  }
  
