- // MIR for `main` before RemoveZsts
+ // MIR for `main` after RemoveZsts
  
  fn main() -> () {
      let mut _0: ();
      let mut _1: !;
      let _2: char;
      let mut _3: main::InvalidChar;
      let mut _5: E;
      let mut _6: main::InvalidTag;
      let mut _8: Empty;
      let mut _9: main::NoVariants;
      scope 1 {
          debug _invalid_char => _2;
          let _4: [E; 1];
          scope 2 {
              debug _invalid_tag => _4;
              let _7: [Empty; 1];
              scope 3 {
-                 debug _enum_without_variants => _7;
+                 debug _enum_without_variants => const [ZeroSized: Empty];
                  let _10: main::Str<"���">;
                  scope 4 {
-                     debug _non_utf8_str => _10;
+                     debug _non_utf8_str => const Str::<"���">;
                  }
              }
          }
      }
  
      bb0: {
          StorageLive(_2);
          StorageLive(_3);
          _3 = InvalidChar { int: const 1114113_u32 };
          _2 = (_3.1: char);
          StorageDead(_3);
          StorageLive(_4);
          StorageLive(_5);
          StorageLive(_6);
          _6 = InvalidTag { int: const 4_u32 };
          _5 = (_6.1: E);
          _4 = [move _5];
          StorageDead(_5);
          StorageDead(_6);
-         StorageLive(_7);
-         StorageLive(_8);
+         nop;
+         nop;
          StorageLive(_9);
          _9 = NoVariants { int: const 0_u32 };
-         _8 = (_9.1: Empty);
-         _7 = [move _8];
-         StorageDead(_8);
+         nop;
+         nop;
+         nop;
          StorageDead(_9);
-         StorageLive(_10);
-         StorageDead(_10);
-         StorageDead(_7);
+         nop;
+         nop;
+         nop;
          StorageDead(_4);
          StorageDead(_2);
          unreachable;
      }
  }
  
