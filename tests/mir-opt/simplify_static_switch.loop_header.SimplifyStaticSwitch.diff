- // MIR for `loop_header` before SimplifyStaticSwitch
+ // MIR for `loop_header` after SimplifyStaticSwitch
  
  fn loop_header() -> () {
      let mut _0: ();
      let mut _1: Foo;
      let mut _2: !;
      let mut _3: ();
      let mut _4: isize;
      let mut _5: Foo;
      let mut _6: Foo;
      let mut _7: !;
      scope 1 {
          debug foo => _1;
      }
  
      bb0: {
          StorageLive(_1);
          _1 = Foo::A;
          StorageLive(_2);
          goto -> bb1;
      }
  
      bb1: {
          _4 = discriminant(_1);
          switchInt(move _4) -> [0: bb4, 1: bb5, 2: bb2, otherwise: bb3];
      }
  
      bb2: {
          _0 = const ();
          StorageDead(_2);
          StorageDead(_1);
          return;
      }
  
      bb3: {
          unreachable;
      }
  
      bb4: {
          StorageLive(_5);
          _5 = Foo::B;
          _1 = move _5;
          _3 = const ();
          StorageDead(_5);
          goto -> bb1;
      }
  
      bb5: {
          StorageLive(_6);
          _6 = Foo::A;
          _1 = move _6;
          _3 = const ();
          StorageDead(_6);
          goto -> bb1;
      }
  }
  
