- // MIR for `test_questionmark` before JumpThreading
+ // MIR for `test_questionmark` after JumpThreading
  
  fn test_questionmark() -> Result<(), ()> {
      let mut _0: std::result::Result<(), ()>;
      let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>>;
      let mut _2: std::result::Result<(), ()>;
      let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, std::result::Result<(), ()>>;
      let mut _4: std::result::Result<std::result::Result<(), ()>, ()>;
      let mut _5: isize;
      let _6: std::result::Result<(), ()>;
      let mut _7: isize;
      scope 1 {
          debug residual => const Result::<Infallible, ()>::Err(());
          scope 2 {
              scope 15 (inlined #[track_caller] <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual) {
                  debug residual => const Result::<Infallible, ()>::Err(());
                  scope 16 {
                      debug e => const ();
                      scope 17 (inlined <() as From<()>>::from) {
                          debug t => const ();
                      }
                  }
              }
          }
      }
      scope 3 {
          debug val => const Result::<(), ()>::Ok(());
          scope 4 {
          }
      }
      scope 5 {
          debug residual => const Result::<Infallible, ()>::Err(());
          scope 6 {
              scope 18 (inlined #[track_caller] <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual) {
                  debug residual => const Result::<Infallible, ()>::Err(());
                  scope 19 {
                      debug e => const ();
                      scope 20 (inlined <() as From<()>>::from) {
                          debug t => const ();
                      }
                  }
              }
          }
      }
      scope 7 {
          debug val => const ();
          scope 8 {
          }
      }
      scope 9 (inlined <Result<Result<(), ()>, ()> as Try>::branch) {
          debug self => const Result::<Result<(), ()>, ()>::Ok(Result::<(), ()>::Ok(()));
          let _8: std::result::Result<(), ()>;
          scope 10 {
              debug v => const Result::<(), ()>::Ok(());
          }
          scope 11 {
              debug e => const ();
          }
      }
      scope 12 (inlined <Result<(), ()> as Try>::branch) {
          debug self => const Result::<(), ()>::Ok(());
          let mut _9: isize;
          scope 13 {
              debug v => const ();
          }
          scope 14 {
              debug e => const ();
          }
      }
  
      bb0: {
          StorageLive(_1);
          StorageLive(_2);
          StorageLive(_3);
          StorageLive(_4);
          _4 = const Result::<Result<(), ()>, ()>::Ok(Result::<(), ()>::Ok(()));
          StorageLive(_8);
          goto -> bb8;
      }
  
      bb1: {
          _6 = const Result::<(), ()>::Ok(());
          _2 = const Result::<(), ()>::Ok(());
          StorageLive(_9);
          _9 = const 0_isize;
          goto -> bb10;
      }
  
      bb2: {
          _0 = const Result::<(), ()>::Err(());
          StorageDead(_2);
          goto -> bb5;
      }
  
      bb3: {
          StorageDead(_3);
          StorageDead(_1);
          _0 = const Result::<(), ()>::Ok(());
          goto -> bb6;
      }
  
      bb4: {
          _0 = const Result::<(), ()>::Err(());
          goto -> bb5;
      }
  
      bb5: {
          StorageDead(_3);
          StorageDead(_1);
          goto -> bb6;
      }
  
      bb6: {
          return;
      }
  
      bb7: {
          _3 = const ControlFlow::<Result<Infallible, ()>, Result<(), ()>>::Break(Result::<Infallible, ()>::Err(()));
          StorageDead(_8);
          StorageDead(_4);
          _5 = discriminant(_3);
-         switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb11];
+         goto -> bb2;
      }
  
      bb8: {
          _8 = const Result::<(), ()>::Ok(());
          _3 = const ControlFlow::<Result<Infallible, ()>, Result<(), ()>>::Continue(Result::<(), ()>::Ok(()));
          StorageDead(_8);
          StorageDead(_4);
          _5 = const 0_isize;
          goto -> bb1;
      }
  
      bb9: {
          _1 = const ControlFlow::<Result<Infallible, ()>>::Break(Result::<Infallible, ()>::Err(()));
          StorageDead(_9);
          StorageDead(_2);
          _7 = discriminant(_1);
-         switchInt(move _7) -> [0: bb3, 1: bb4, otherwise: bb11];
+         goto -> bb4;
      }
  
      bb10: {
          _1 = const ControlFlow::<Result<Infallible, ()>>::Continue(());
          StorageDead(_9);
          StorageDead(_2);
          _7 = const 0_isize;
          goto -> bb3;
      }
  
      bb11: {
          unreachable;
      }
  }
  
