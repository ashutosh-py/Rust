- // MIR for `float_to_exponential_common` before GVN
+ // MIR for `float_to_exponential_common` after GVN
  
  fn float_to_exponential_common(_1: &mut Formatter<'_>, _2: &T, _3: bool) -> Result<(), std::fmt::Error> {
      debug fmt => _1;
      debug num => _2;
      debug upper => _3;
      let mut _0: std::result::Result<(), std::fmt::Error>;
      let _4: bool;
      let mut _5: &std::fmt::Formatter<'_>;
      let mut _7: std::option::Option<usize>;
      let mut _8: &std::fmt::Formatter<'_>;
      let mut _9: isize;
      let mut _11: &mut std::fmt::Formatter<'_>;
      let mut _12: &T;
      let mut _13: core::num::flt2dec::Sign;
      let mut _14: u32;
      let mut _15: u32;
      let mut _16: usize;
      let mut _17: bool;
      let mut _18: &mut std::fmt::Formatter<'_>;
      let mut _19: &T;
      let mut _20: core::num::flt2dec::Sign;
      let mut _21: bool;
      scope 1 {
          debug force_sign => _4;
          let _6: core::num::flt2dec::Sign;
          scope 2 {
              debug sign => _6;
              scope 3 {
                  debug precision => _10;
                  let _10: usize;
                  scope 5 (inlined Formatter::<'_>::precision) {
                      debug self => _1;
                  }
              }
          }
      }
      scope 4 (inlined Formatter::<'_>::sign_plus) {
          debug self => _1;
          let mut _22: u32;
          let mut _23: u32;
      }
  
      bb0: {
          StorageLive(_4);
          StorageLive(_22);
          StorageLive(_23);
          _23 = ((*_1).0: u32);
          _22 = BitAnd(move _23, const 1_u32);
          StorageDead(_23);
          _4 = Ne(move _22, const 0_u32);
          StorageDead(_22);
          StorageLive(_6);
          switchInt(_4) -> [0: bb2, otherwise: bb1];
      }
  
      bb1: {
-         _6 = MinusPlus;
+         _6 = const MinusPlus;
          goto -> bb3;
      }
  
      bb2: {
-         _6 = Minus;
+         _6 = const Minus;
          goto -> bb3;
      }
  
      bb3: {
          StorageLive(_7);
          _7 = ((*_1).4: std::option::Option<usize>);
          _9 = discriminant(_7);
          switchInt(move _9) -> [1: bb4, otherwise: bb6];
      }
  
      bb4: {
-         StorageLive(_10);
+         nop;
          _10 = ((_7 as Some).0: usize);
          StorageLive(_11);
          _11 = &mut (*_1);
          StorageLive(_12);
          _12 = &(*_2);
          StorageLive(_13);
          _13 = _6;
          StorageLive(_14);
          StorageLive(_15);
          StorageLive(_16);
          _16 = _10;
-         _15 = move _16 as u32 (IntToInt);
+         _15 = _10 as u32 (IntToInt);
          StorageDead(_16);
          _14 = Add(move _15, const 1_u32);
          StorageDead(_15);
          StorageLive(_17);
          _17 = _3;
-         _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> [return: bb5, unwind unreachable];
+         _0 = float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, _3) -> [return: bb5, unwind unreachable];
      }
  
      bb5: {
          StorageDead(_17);
          StorageDead(_14);
          StorageDead(_13);
          StorageDead(_12);
          StorageDead(_11);
-         StorageDead(_10);
+         nop;
          goto -> bb8;
      }
  
      bb6: {
          StorageLive(_18);
          _18 = &mut (*_1);
          StorageLive(_19);
          _19 = &(*_2);
          StorageLive(_20);
          _20 = _6;
          StorageLive(_21);
          _21 = _3;
-         _0 = float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> [return: bb7, unwind unreachable];
+         _0 = float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, _3) -> [return: bb7, unwind unreachable];
      }
  
      bb7: {
          StorageDead(_21);
          StorageDead(_20);
          StorageDead(_19);
          StorageDead(_18);
          goto -> bb8;
      }
  
      bb8: {
          StorageDead(_6);
          StorageDead(_4);
          StorageDead(_7);
          return;
      }
  }
  
