// MIR for `num_to_digit` after PreCodegen

fn num_to_digit(_1: char) -> u32 {
    debug num => _1;
    let mut _0: u32;
    let mut _5: bool;
    let mut _6: std::option::Option<u32>;
    scope 1 (inlined char::methods::<impl char>::is_digit) {
        debug self => _1;
        debug radix => const 8_u32;
        let _2: std::option::Option<u32>;
        let mut _3: &std::option::Option<u32>;
        scope 2 (inlined Option::<u32>::is_some) {
            debug self => _3;
            let mut _4: isize;
        }
    }
    scope 3 (inlined #[track_caller] Option::<u32>::unwrap) {
        debug self => _6;
        let mut _7: isize;
        let mut _8: !;
        scope 4 {
            debug val => _0;
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_3);
        StorageLive(_2);
        _2 = char::methods::<impl char>::to_digit(_1, const 8_u32) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        _3 = &_2;
        StorageLive(_4);
        _4 = discriminant(_2);
        switchInt(move _4) -> [1: bb2, 0: bb3, otherwise: bb11];
    }

    bb2: {
        _5 = const true;
        goto -> bb4;
    }

    bb3: {
        _5 = const false;
        goto -> bb4;
    }

    bb4: {
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        switchInt(move _5) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        _0 = const 0_u32;
        goto -> bb10;
    }

    bb6: {
        StorageLive(_6);
        _6 = char::methods::<impl char>::to_digit(move _1, const 8_u32) -> [return: bb7, unwind unreachable];
    }

    bb7: {
        StorageLive(_7);
        _7 = discriminant(_6);
        switchInt(move _7) -> [0: bb8, 1: bb9, otherwise: bb11];
    }

    bb8: {
        _8 = option::unwrap_failed() -> unwind unreachable;
    }

    bb9: {
        _0 = move ((_6 as Some).0: u32);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_5);
        return;
    }

    bb11: {
        unreachable;
    }
}
