// MIR for `num_to_digit` after PreCodegen

fn num_to_digit(_1: char) -> u32 {
    debug num => _1;
    let mut _0: u32;
    let mut _6: std::option::Option<u32>;
    scope 1 (inlined char::methods::<impl char>::is_digit) {
        debug self => _1;
        debug radix => const 8_u32;
        let _5: std::option::Option<u32>;
        scope 2 (inlined char::methods::<impl char>::to_digit) {
            debug self => _1;
            debug radix => const 8_u32;
            let mut _2: u32;
            let mut _3: u32;
            let mut _4: bool;
            let mut _8: &[&str];
            let mut _9: u32;
            let mut _10: u32;
            scope 3 {
                debug digit => _3;
                scope 5 (inlined Arguments::<'_>::new_const) {
                    debug pieces => _8;
                }
                scope 6 (inlined core::num::<impl u32>::wrapping_sub) {
                    debug self => _10;
                    debug rhs => const 97_u32;
                }
                scope 7 (inlined core::num::<impl u32>::saturating_add) {
                    debug self => _9;
                    debug rhs => const 10_u32;
                }
            }
            scope 4 (inlined core::num::<impl u32>::wrapping_sub) {
                debug self => _2;
                debug rhs => const 48_u32;
            }
        }
        scope 8 (inlined Option::<u32>::is_some) {
            debug (*(self: &Option<u32>)) => _5;
        }
    }
    scope 9 (inlined char::methods::<impl char>::to_digit) {
        debug self => _1;
        debug radix => const 8_u32;
        scope 10 {
            debug digit => _3;
            scope 12 (inlined Arguments::<'_>::new_const) {
                debug pieces => _8;
            }
            scope 13 (inlined core::num::<impl u32>::wrapping_sub) {
                debug self => _10;
                debug rhs => const 97_u32;
            }
            scope 14 (inlined core::num::<impl u32>::saturating_add) {
                debug self => _9;
                debug rhs => const 10_u32;
            }
        }
        scope 11 (inlined core::num::<impl u32>::wrapping_sub) {
            debug self => _2;
            debug rhs => const 48_u32;
        }
    }
    scope 15 (inlined #[track_caller] Option::<u32>::unwrap) {
        debug self => _6;
        let mut _7: !;
        scope 16 {
            debug val => _0;
        }
    }

    bb0: {
        StorageLive(_5);
        _2 = _1 as u32 (IntToInt);
        _3 = Sub(_2, const 48_u32);
        _4 = Lt(_3, const 8_u32);
        switchInt(_4) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = const Option::<u32>::None;
        StorageDead(_5);
        _0 = const 0_u32;
        goto -> bb5;
    }

    bb2: {
        _5 = Option::<u32>::Some(_3);
        StorageDead(_5);
        StorageLive(_6);
        switchInt(_4) -> [0: bb3, otherwise: bb4];
    }

    bb3: {
        _6 = const Option::<u32>::None;
        _7 = option::unwrap_failed() -> unwind unreachable;
    }

    bb4: {
        _6 = Option::<u32>::Some(_3);
        _0 = move ((_6 as Some).0: u32);
        StorageDead(_6);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

ALLOC0 (size: 8, align: 4) {
    00 00 00 00 __ __ __ __                         │ ....░░░░
}
