// MIR for `num_to_digit` after PreCodegen

fn num_to_digit(_1: char) -> u32 {
    debug num => _1;                     // in scope 0 at $DIR/issue_59352.rs:+0:21: +0:24
    let mut _0: u32;                     // return place in scope 0 at $DIR/issue_59352.rs:+0:35: +0:38
    let mut _2: bool;                    // in scope 0 at $DIR/issue_59352.rs:+2:8: +2:23
    let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/issue_59352.rs:+2:26: +2:41
    let mut _4: u32;                     // in scope 0 at $DIR/issue_59352.rs:+2:12: +2:23
    scope 1 (inlined char::methods::<impl char>::is_digit) { // at $DIR/issue_59352.rs:14:12: 14:23
        debug self => _7;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL
        debug radix => _4;               // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL
        let mut _5: &std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL
        let _6: std::option::Option<u32>; // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL
        let mut _7: char;                // in scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL
    }
    scope 2 (inlined #[track_caller] Option::<u32>::unwrap) { // at $DIR/issue_59352.rs:14:42: 14:50
        debug self => _3;                // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL
        let mut _8: isize;               // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL
        let mut _9: !;                   // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL
        scope 3 {
            debug val => _0;             // in scope 3 at $SRC_DIR/core/src/option.rs:LL:COL
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23
        _7 = _1;                         // scope 0 at $DIR/issue_59352.rs:+2:8: +2:11
        StorageLive(_4);                 // scope 0 at $DIR/issue_59352.rs:+2:12: +2:23
        StorageLive(_5);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL
        StorageLive(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL
        _6 = char::methods::<impl char>::to_digit(move _7, const 8_u32) -> bb5; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/char/methods.rs:LL:COL
                                         // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }
    }

    bb1: {
        StorageLive(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41
        _3 = char::methods::<impl char>::to_digit(move _1, const 8_u32) -> bb2; // scope 0 at $DIR/issue_59352.rs:+2:26: +2:41
                                         // mir::Constant
                                         // + span: $DIR/issue_59352.rs:14:30: 14:38
                                         // + literal: Const { ty: fn(char, u32) -> Option<u32> {char::methods::<impl char>::to_digit}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = discriminant(_3);           // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL
        switchInt(move _8) -> [0: bb7, 1: bb9, otherwise: bb8]; // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL
    }

    bb3: {
        _0 = const 0_u32;                // scope 0 at $DIR/issue_59352.rs:+2:60: +2:61
        goto -> bb4;                     // scope 0 at $DIR/issue_59352.rs:+2:5: +2:63
    }

    bb4: {
        StorageDead(_2);                 // scope 0 at $DIR/issue_59352.rs:+2:62: +2:63
        return;                          // scope 0 at $DIR/issue_59352.rs:+3:2: +3:2
    }

    bb5: {
        _5 = &_6;                        // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL
        _2 = Option::<u32>::is_some(move _5) -> bb6; // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/char/methods.rs:LL:COL
                                         // + literal: Const { ty: for<'a> fn(&'a Option<u32>) -> bool {Option::<u32>::is_some}, val: Value(<ZST>) }
    }

    bb6: {
        StorageDead(_5);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL
        StorageDead(_6);                 // scope 1 at $SRC_DIR/core/src/char/methods.rs:LL:COL
        StorageDead(_4);                 // scope 0 at $DIR/issue_59352.rs:+2:12: +2:23
        switchInt(move _2) -> [0: bb3, otherwise: bb1]; // scope 0 at $DIR/issue_59352.rs:+2:8: +2:23
    }

    bb7: {
        StorageLive(_9);                 // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL
        _9 = core::panicking::panic(const "called `Option::unwrap()` on a `None` value"); // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/option.rs:LL:COL
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/option.rs:LL:COL
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        unreachable;                     // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL
    }

    bb9: {
        _0 = move ((_3 as Some).0: u32); // scope 2 at $SRC_DIR/core/src/option.rs:LL:COL
        StorageDead(_3);                 // scope 0 at $DIR/issue_59352.rs:+2:49: +2:50
        goto -> bb4;                     // scope 0 at $DIR/issue_59352.rs:+2:5: +2:63
    }
}
