// MIR for `inclusive_loop` after PreCodegen

fn inclusive_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {
    debug start => _1;
    debug end => _2;
    debug f => _3;
    let mut _0: ();
    let mut _5: std::iter::range::RangeInclusiveIter<u32>;
    let mut _6: std::iter::range::RangeInclusiveIter<u32>;
    let mut _7: &mut std::iter::range::RangeInclusiveIter<u32>;
    let mut _9: std::option::Option<u32>;
    let mut _10: isize;
    let mut _12: &impl Fn(u32);
    let mut _13: (u32,);
    let _14: ();
    scope 1 {
        debug iter => _6;
        let _11: u32;
        scope 2 {
            debug x => _11;
        }
        scope 5 (inlined <iter::range::RangeInclusiveIter<u32> as Iterator>::next) {
            debug self => _7;
            let mut _8: &mut std::ops::range::legacy::RangeInclusive<u32>;
            scope 6 (inlined iter::range::legacy::<impl Iterator for std::ops::range::legacy::RangeInclusive<u32>>::next) {
                debug self => _8;
            }
        }
    }
    scope 3 (inlined std::ops::RangeInclusive::<u32>::new) {
        debug start => _1;
        debug end => _2;
    }
    scope 4 (inlined iter::range::<impl IntoIterator for std::ops::RangeInclusive<u32>>::into_iter) {
        debug ((self: std::ops::RangeInclusive<u32>).0: u32) => _1;
        debug ((self: std::ops::RangeInclusive<u32>).1: u32) => _2;
        let mut _4: std::ops::range::legacy::RangeInclusive<u32>;
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_4);
        _4 = std::ops::range::legacy::RangeInclusive::<u32> { start: _1, end: _2, exhausted: const false };
        _5 = iter::range::RangeInclusiveIter::<u32> { inner: move _4 };
        StorageDead(_4);
        StorageLive(_6);
        _6 = move _5;
        goto -> bb1;
    }

    bb1: {
        StorageLive(_9);
        _7 = &mut _6;
        StorageLive(_8);
        _8 = &mut (_6.0: std::ops::range::legacy::RangeInclusive<u32>);
        _9 = <std::ops::range::legacy::RangeInclusive<u32> as iter::range::legacy::RangeInclusiveIteratorImpl>::spec_next(move _8) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_9);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb7];
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        drop(_3) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5: {
        _11 = ((_9 as Some).0: u32);
        StorageLive(_12);
        _12 = &_3;
        StorageLive(_13);
        _13 = (_11,);
        _14 = <impl Fn(u32) as Fn<(u32,)>>::call(move _12, move _13) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_9);
        goto -> bb1;
    }

    bb7: {
        unreachable;
    }

    bb8 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        resume;
    }
}
