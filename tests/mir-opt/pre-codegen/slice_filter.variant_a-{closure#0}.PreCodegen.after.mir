// MIR for `variant_a::{closure#0}` after PreCodegen

fn variant_a::{closure#0}(_1: &mut {closure@$DIR/slice_filter.rs:7:25: 7:39}, _2: &&(usize, usize, usize, usize)) -> bool {
    let mut _0: bool;
    let mut _3: &(usize, usize, usize, usize);
    let _4: &usize;
    let _5: &usize;
    let _6: &usize;
    let _7: &usize;
    let mut _10: bool;
    let mut _13: bool;
    let mut _14: bool;
    scope 1 {
        debug a => _4;
        debug b => _5;
        debug c => _6;
        debug d => _7;
        scope 2 (inlined std::cmp::impls::<impl PartialOrd for &usize>::le) {
            scope 3 (inlined std::cmp::impls::<impl PartialOrd for usize>::le) {
                let mut _8: usize;
                let mut _9: usize;
            }
        }
        scope 4 (inlined std::cmp::impls::<impl PartialOrd for &usize>::le) {
            scope 5 (inlined std::cmp::impls::<impl PartialOrd for usize>::le) {
                let mut _11: usize;
                let mut _12: usize;
            }
        }
        scope 6 (inlined std::cmp::impls::<impl PartialOrd for &usize>::le) {
            scope 7 (inlined std::cmp::impls::<impl PartialOrd for usize>::le) {
            }
        }
        scope 8 (inlined std::cmp::impls::<impl PartialOrd for &usize>::le) {
            scope 9 (inlined std::cmp::impls::<impl PartialOrd for usize>::le) {
                let mut _15: usize;
                let mut _16: usize;
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _3 = (*_2);
        _4 = &((*_3).0: usize);
        StorageLive(_5);
        _5 = &((*_3).1: usize);
        StorageLive(_6);
        _6 = &((*_3).2: usize);
        StorageLive(_7);
        _7 = &((*_3).3: usize);
        StorageLive(_10);
        _8 = ((*_3).0: usize);
        _9 = ((*_3).2: usize);
        _10 = Le(_8, _9);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageLive(_13);
        StorageLive(_11);
        _11 = ((*_3).3: usize);
        StorageLive(_12);
        _12 = ((*_3).1: usize);
        _13 = Le(move _11, move _12);
        StorageDead(_12);
        StorageDead(_11);
        switchInt(move _13) -> [0: bb2, otherwise: bb6];
    }

    bb2: {
        StorageLive(_14);
        _14 = Le(_9, _8);
        switchInt(move _14) -> [0: bb3, otherwise: bb4];
    }

    bb3: {
        _0 = const false;
        goto -> bb5;
    }

    bb4: {
        StorageLive(_15);
        _15 = ((*_3).1: usize);
        StorageLive(_16);
        _16 = ((*_3).3: usize);
        _0 = Le(move _15, move _16);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb5;
    }

    bb5: {
        StorageDead(_14);
        goto -> bb7;
    }

    bb6: {
        _0 = const true;
        goto -> bb7;
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        return;
    }
}
