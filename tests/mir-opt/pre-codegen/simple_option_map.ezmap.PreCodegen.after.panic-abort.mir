// MIR for `ezmap` after PreCodegen

fn ezmap(_1: Option<i32>) -> Option<i32> {
    debug x => _1;
    let mut _0: std::option::Option<i32>;
    scope 1 (inlined map::<i32, i32, {closure@$DIR/simple_option_map.rs:18:12: 18:15}>) {
        let mut _2: isize;
        let _3: i32;
        let mut _4: (i32,);
        let mut _5: i32;
        scope 2 {
        }
        scope 3 (inlined std::ptr::drop_in_place::<{closure@$DIR/simple_option_map.rs:18:12: 18:15}> - shim(None)) {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb1, 1: bb2, otherwise: bb5];
    }

    bb1: {
        _0 = const Option::<i32>::None;
        goto -> bb4;
    }

    bb2: {
        _3 = ((_1 as Some).0: i32);
        StorageLive(_5);
        StorageLive(_4);
        _4 = (_3,);
        _5 = <{closure@$DIR/simple_option_map.rs:18:12: 18:15} as FnOnce<(i32,)>>::call_once(const ZeroSized: {closure@$DIR/simple_option_map.rs:18:12: 18:15}, move _4) -> [return: bb3, unwind unreachable];
    }

    bb3: {
        StorageDead(_4);
        _0 = Option::<i32>::Some(move _5);
        StorageDead(_5);
        goto -> bb4;
    }

    bb4: {
        StorageDead(_3);
        StorageDead(_2);
        return;
    }

    bb5: {
        unreachable;
    }
}

ALLOC0 (size: 8, align: 4) {
    00 00 00 00 __ __ __ __                         │ ....░░░░
}
