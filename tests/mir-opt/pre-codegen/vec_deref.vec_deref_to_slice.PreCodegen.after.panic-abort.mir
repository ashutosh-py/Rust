// MIR for `vec_deref_to_slice` after PreCodegen

fn vec_deref_to_slice(_1: &Vec<u8>) -> &[u8] {
    debug v => _1;
    let mut _0: &[u8];
    scope 1 (inlined <Vec<u8> as Deref>::deref) {
        debug self => _1;
        let mut _4: usize;
        let mut _6: *const u8;
        scope 2 (inlined Vec::<u8>::as_ptr) {
            debug self => _1;
            let mut _7: &alloc::raw_vec::RawVec<u8>;
            scope 3 (inlined alloc::raw_vec::RawVec::<u8>::ptr) {
                debug self => _7;
                let mut _8: &alloc::raw_vec::RawVecInner;
                scope 4 (inlined alloc::raw_vec::RawVecInner::ptr::<u8>) {
                    debug self => _8;
                    let mut _9: std::ptr::NonNull<u8>;
                    scope 5 (inlined alloc::raw_vec::RawVecInner::non_null::<u8>) {
                        debug self => _8;
                        let mut _2: std::ptr::NonNull<u8>;
                        scope 6 (inlined Unique::<u8>::cast::<u8>) {
                            debug ((self: Unique<u8>).0: std::ptr::NonNull<u8>) => _2;
                            debug ((self: Unique<u8>).1: std::marker::PhantomData<u8>) => const PhantomData::<u8>;
                            scope 7 (inlined NonNull::<u8>::cast::<u8>) {
                                debug self => _2;
                                scope 8 (inlined NonNull::<u8>::as_ptr) {
                                    debug self => _2;
                                    let mut _3: *const u8;
                                }
                            }
                        }
                        scope 9 (inlined #[track_caller] <Unique<u8> as Into<NonNull<u8>>>::into) {
                            debug ((self: Unique<u8>).0: std::ptr::NonNull<u8>) => _9;
                            debug ((self: Unique<u8>).1: std::marker::PhantomData<u8>) => const PhantomData::<u8>;
                            scope 10 (inlined <NonNull<u8> as From<Unique<u8>>>::from) {
                                debug ((unique: Unique<u8>).0: std::ptr::NonNull<u8>) => _9;
                                debug ((unique: Unique<u8>).1: std::marker::PhantomData<u8>) => const PhantomData::<u8>;
                                scope 11 (inlined Unique::<u8>::as_non_null_ptr) {
                                    debug ((self: Unique<u8>).0: std::ptr::NonNull<u8>) => _9;
                                    debug ((self: Unique<u8>).1: std::marker::PhantomData<u8>) => const PhantomData::<u8>;
                                }
                            }
                        }
                    }
                    scope 12 (inlined NonNull::<u8>::as_ptr) {
                        debug self => _9;
                    }
                }
            }
        }
        scope 13 (inlined std::slice::from_raw_parts::<'_, u8>) {
            debug data => _6;
            debug len => _4;
            let _5: *const [u8];
            scope 14 (inlined core::ub_checks::check_language_ub) {
                scope 15 (inlined core::ub_checks::check_language_ub::runtime) {
                }
            }
            scope 16 (inlined std::mem::size_of::<u8>) {
            }
            scope 17 (inlined align_of::<u8>) {
            }
            scope 18 (inlined slice_from_raw_parts::<u8>) {
                debug data => _6;
                debug len => _4;
                scope 19 (inlined std::ptr::from_raw_parts::<[u8], u8>) {
                    debug data_pointer => _6;
                    debug metadata => _4;
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_2);
        _2 = copy (((((*_1).0: alloc::raw_vec::RawVec<u8>).0: alloc::raw_vec::RawVecInner).0: std::ptr::Unique<u8>).0: std::ptr::NonNull<u8>);
        _3 = copy (_2.0: *const u8);
        StorageDead(_2);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_4);
        _4 = copy ((*_1).1: usize);
        StorageLive(_5);
        _5 = *const [u8] from (copy _3, copy _4);
        _0 = &(*_5);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
