// MIR for `simple_swap` after PreCodegen

fn simple_swap(_1: &mut T, _2: &mut T) -> () {
    debug x => _1;
    debug y => _2;
    let mut _0: ();
    let mut _3: *const T;
    let mut _5: *mut T;
    let mut _6: *const T;
    let mut _7: *mut T;
    let mut _8: T;
    scope 1 {
        let _4: T;
        scope 2 {
            debug temp => _4;
            scope 6 (inlined std::ptr::read::<T>) {
                debug src => _6;
                scope 7 {
                    scope 8 (inlined std::ptr::read::runtime::<T>) {
                        debug src => _6;
                    }
                }
            }
            scope 9 (inlined std::ptr::write::<T>) {
                debug dst => _5;
                debug src => _8;
                scope 10 {
                    scope 11 (inlined std::ptr::write::runtime::<T>) {
                        debug dst => _5;
                    }
                }
            }
            scope 12 (inlined std::ptr::write::<T>) {
                debug dst => _7;
                debug src => _4;
                scope 13 {
                    scope 14 (inlined std::ptr::write::runtime::<T>) {
                        debug dst => _7;
                    }
                }
            }
        }
        scope 3 (inlined std::ptr::read::<T>) {
            debug src => _3;
            scope 4 {
                scope 5 (inlined std::ptr::read::runtime::<T>) {
                    debug src => _3;
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = &raw const (*_1);
        _4 = (*_3);
        StorageDead(_3);
        StorageLive(_5);
        _5 = &raw mut (*_1);
        StorageLive(_8);
        StorageLive(_6);
        _6 = &raw const (*_2);
        (*_5) = (*_6);
        StorageDead(_6);
        StorageDead(_8);
        StorageDead(_5);
        StorageLive(_7);
        _7 = &raw mut (*_2);
        (*_7) = move _4;
        StorageDead(_7);
        return;
    }
}
