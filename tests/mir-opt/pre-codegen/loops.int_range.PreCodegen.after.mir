// MIR for `int_range` after PreCodegen

fn int_range(_1: usize, _2: usize) -> () {
    debug start => _1;
    debug end => _2;
    let mut _0: ();
    let _5: ();
    scope 1 {
        debug ((iter: std::ops::Range<usize>).0: usize) => _1;
        debug ((iter: std::ops::Range<usize>).1: usize) => _2;
        scope 2 {
            debug i => _4;
        }
        scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) {
            debug ((*(self: &mut std::ops::Range<usize>)).0: usize) => _1;
            debug ((*(self: &mut std::ops::Range<usize>)).1: usize) => _2;
            scope 5 (inlined <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next) {
                debug ((*(self: &mut std::ops::Range<usize>)).0: usize) => _1;
                debug ((*(self: &mut std::ops::Range<usize>)).1: usize) => _2;
                let mut _3: bool;
                let _4: usize;
                scope 6 {
                    debug old => _4;
                    scope 7 {
                    }
                }
                scope 8 (inlined std::cmp::impls::<impl PartialOrd for usize>::lt) {
                    debug (*(self: &usize)) => _1;
                    debug (*(other: &usize)) => _2;
                }
            }
        }
    }
    scope 3 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) {
        debug ((self: std::ops::Range<usize>).0: usize) => _1;
        debug ((self: std::ops::Range<usize>).1: usize) => _2;
    }

    bb0: {
        goto -> bb1;
    }

    bb1: {
        StorageLive(_3);
        _3 = Lt(_1, _2);
        switchInt(move _3) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        StorageDead(_3);
        return;
    }

    bb3: {
        _4 = _1;
        _1 = <usize as Step>::forward_unchecked(_4, const 1_usize) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_3);
        _5 = opaque::<usize>(move _4) -> [return: bb5, unwind continue];
    }

    bb5: {
        goto -> bb1;
    }
}
