// MIR for `int_range` after PreCodegen

fn int_range(_1: usize, _2: usize) -> () {
    debug start => _1;
    debug end => _2;
    let mut _0: ();
    let mut _4: std::iter::range::RangeIter<usize>;
    let mut _5: std::iter::range::RangeIter<usize>;
    let mut _6: &mut std::iter::range::RangeIter<usize>;
    let mut _13: std::option::Option<usize>;
    let mut _16: isize;
    let _18: ();
    scope 1 {
        debug iter => _5;
        let _17: usize;
        scope 2 {
            debug i => _17;
        }
        scope 4 (inlined <iter::range::RangeIter<usize> as Iterator>::next) {
            debug self => _6;
            let mut _7: &mut std::ops::range::legacy::Range<usize>;
            scope 5 (inlined iter::range::legacy::<impl Iterator for std::ops::range::legacy::Range<usize>>::next) {
                debug self => _7;
                scope 6 (inlined <std::ops::range::legacy::Range<usize> as iter::range::legacy::RangeIteratorImpl>::spec_next) {
                    debug self => _7;
                    let mut _8: &usize;
                    let mut _9: &usize;
                    let mut _12: bool;
                    let _14: usize;
                    let mut _15: usize;
                    scope 7 {
                        debug old => _14;
                        scope 8 {
                        }
                    }
                    scope 9 (inlined std::cmp::impls::<impl PartialOrd for usize>::lt) {
                        debug self => _8;
                        debug other => _9;
                        let mut _10: usize;
                        let mut _11: usize;
                    }
                }
            }
        }
    }
    scope 3 (inlined iter::range::<impl IntoIterator for std::ops::Range<usize>>::into_iter) {
        debug ((self: std::ops::Range<usize>).0: usize) => _1;
        debug ((self: std::ops::Range<usize>).1: usize) => _2;
        let mut _3: std::ops::range::legacy::Range<usize>;
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_3);
        _3 = std::ops::range::legacy::Range::<usize> { start: _1, end: _2 };
        _4 = iter::range::RangeIter::<usize> { inner: move _3 };
        StorageDead(_3);
        StorageLive(_5);
        _5 = move _4;
        goto -> bb1;
    }

    bb1: {
        StorageLive(_13);
        _6 = &mut _5;
        _7 = &mut (_5.0: std::ops::range::legacy::Range<usize>);
        StorageLive(_14);
        StorageLive(_12);
        StorageLive(_8);
        _8 = &((_5.0: std::ops::range::legacy::Range<usize>).0: usize);
        StorageLive(_9);
        _9 = &((_5.0: std::ops::range::legacy::Range<usize>).1: usize);
        StorageLive(_10);
        _10 = ((_5.0: std::ops::range::legacy::Range<usize>).0: usize);
        StorageLive(_11);
        _11 = ((_5.0: std::ops::range::legacy::Range<usize>).1: usize);
        _12 = Lt(move _10, move _11);
        StorageDead(_11);
        StorageDead(_10);
        switchInt(move _12) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        _13 = Option::<usize>::None;
        goto -> bb5;
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_8);
        _14 = ((_5.0: std::ops::range::legacy::Range<usize>).0: usize);
        StorageLive(_15);
        _15 = <usize as Step>::forward_unchecked(_14, const 1_usize) -> [return: bb4, unwind continue];
    }

    bb4: {
        ((_5.0: std::ops::range::legacy::Range<usize>).0: usize) = move _15;
        StorageDead(_15);
        _13 = Option::<usize>::Some(_14);
        goto -> bb5;
    }

    bb5: {
        StorageDead(_12);
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb6, 1: bb7, otherwise: bb9];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_5);
        StorageDead(_4);
        return;
    }

    bb7: {
        _17 = ((_13 as Some).0: usize);
        _18 = opaque::<usize>(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_13);
        goto -> bb1;
    }

    bb9: {
        unreachable;
    }
}
