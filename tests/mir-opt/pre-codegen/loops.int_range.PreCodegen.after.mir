// MIR for `int_range` after PreCodegen

fn int_range(_1: usize, _2: usize) -> () {
    debug start => _1;
    debug end => _2;
    let mut _0: ();
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::ops::Range<usize>;
    let mut _5: &mut std::ops::Range<usize>;
    let mut _6: std::option::Option<usize>;
    let mut _7: isize;
    let _9: ();
    scope 1 {
        debug iter => _4;
        let _8: usize;
        scope 2 {
            debug i => _8;
        }
        scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) {
            debug self => _5;
        }
    }
    scope 3 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) {
        debug self => _3;
    }

    bb0: {
        _3 = std::ops::Range::<usize> { start: _1, end: _2 };
        StorageLive(_4);
        _4 = _3;
        goto -> bb1;
    }

    bb1: {
        StorageLive(_6);
        StorageLive(_5);
        _5 = &mut _4;
        _6 = <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_6);
        switchInt(move _7) -> [0: bb3, 1: bb4, otherwise: bb6];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_4);
        return;
    }

    bb4: {
        _8 = ((_6 as Some).0: usize);
        _9 = opaque::<usize>(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_6);
        goto -> bb1;
    }

    bb6: {
        unreachable;
    }
}
