// MIR for `int_range` after PreCodegen

fn int_range(_1: usize, _2: usize) -> () {
    debug start => _1;
    debug end => _2;
    let mut _0: ();
    let mut _3: usize;
    let mut _8: std::option::Option<usize>;
    let _10: ();
    scope 1 {
        debug ((iter: std::ops::Range<usize>).0: usize) => _3;
        debug ((iter: std::ops::Range<usize>).1: usize) => _2;
        let _9: usize;
        scope 2 {
            debug i => _9;
        }
        scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) {
            scope 5 (inlined <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next) {
                let mut _5: bool;
                let _6: usize;
                let mut _7: usize;
                scope 6 {
                    scope 7 {
                    }
                }
                scope 8 (inlined std::cmp::impls::<impl PartialOrd for usize>::lt) {
                    let mut _4: usize;
                }
            }
        }
    }
    scope 3 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) {
    }

    bb0: {
        StorageLive(_3);
        _3 = _1;
        goto -> bb1;
    }

    bb1: {
        StorageLive(_8);
        StorageLive(_6);
        StorageLive(_5);
        StorageLive(_4);
        _4 = _3;
        _5 = Lt(move _4, _2);
        StorageDead(_4);
        switchInt(move _5) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_6);
        StorageDead(_8);
        StorageDead(_3);
        return;
    }

    bb3: {
        _6 = _3;
        StorageLive(_7);
        _7 = <usize as Step>::forward_unchecked(_6, const 1_usize) -> [return: bb4, unwind continue];
    }

    bb4: {
        _3 = move _7;
        StorageDead(_7);
        _8 = Option::<usize>::Some(_6);
        StorageDead(_5);
        StorageDead(_6);
        _9 = ((_8 as Some).0: usize);
        _10 = opaque::<usize>(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_8);
        goto -> bb1;
    }
}
