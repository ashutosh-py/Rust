// MIR for `inclusive_loop` after PreCodegen

fn inclusive_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {
    debug start => _1;
    debug end => _2;
    debug f => _3;
    let mut _0: ();
    let mut _4: std::ops::RangeInclusive<u32>;
    let mut _5: std::ops::RangeInclusive<u32>;
    let mut _6: &mut std::ops::RangeInclusive<u32>;
    let mut _7: std::option::Option<u32>;
    let mut _8: isize;
    let mut _9: *mut impl Fn(u32);
    let mut _10: ();
    let mut _12: &impl Fn(u32);
    let mut _13: (u32,);
    let _14: ();
    scope 1 {
        debug iter => _5;
        let _11: u32;
        scope 2 {
            debug x => _11;
        }
        scope 5 (inlined iter::range::<impl Iterator for RangeInclusive<u32>>::next) {
        }
    }
    scope 3 (inlined RangeInclusive::<u32>::new) {
    }
    scope 4 (inlined <RangeInclusive<u32> as IntoIterator>::into_iter) {
    }

    bb0: {
        _4 = RangeInclusive::<u32> { start: _1, end: _2, exhausted: const false };
        StorageLive(_5);
        _5 = _4;
        goto -> bb1;
    }

    bb1: {
        StorageLive(_7);
        _6 = &mut _5;
        _7 = <RangeInclusive<u32> as iter::range::RangeInclusiveIteratorImpl>::spec_next(move _6) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        _8 = discriminant(_7);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb7];
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_5);
        _9 = &raw mut _3;
        _10 = std::ptr::drop_in_place::<impl Fn(u32)>(move _9) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        return;
    }

    bb5: {
        _11 = ((_7 as Some).0: u32);
        StorageLive(_12);
        _12 = &_3;
        StorageLive(_13);
        _13 = (_11,);
        _14 = <impl Fn(u32) as Fn<(u32,)>>::call(move _12, move _13) -> [return: bb6, unwind unreachable];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_7);
        goto -> bb1;
    }

    bb7: {
        unreachable;
    }
}
