// MIR for `range_loop` after PreCodegen

fn range_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {
    debug slice => _1;
    debug f => _2;
    let mut _0: ();
    let mut _3: usize;
    let mut _5: std::iter::range::RangeIter<usize>;
    let mut _6: std::iter::range::RangeIter<usize>;
    let mut _7: &mut std::iter::range::RangeIter<usize>;
    let mut _14: std::option::Option<usize>;
    let mut _17: isize;
    let mut _19: usize;
    let mut _20: bool;
    let mut _22: &impl Fn(usize, &T);
    let mut _23: (usize, &T);
    let _24: ();
    scope 1 {
        debug iter => _6;
        let _18: usize;
        scope 2 {
            debug i => _18;
            let _21: &T;
            scope 3 {
                debug x => _21;
            }
        }
        scope 5 (inlined <iter::range::RangeIter<usize> as Iterator>::next) {
            debug self => _7;
            let mut _8: &mut std::ops::range::legacy::Range<usize>;
            scope 6 (inlined iter::range::legacy::<impl Iterator for std::ops::range::legacy::Range<usize>>::next) {
                debug self => _8;
                scope 7 (inlined <std::ops::range::legacy::Range<usize> as iter::range::legacy::RangeIteratorImpl>::spec_next) {
                    debug self => _8;
                    let mut _9: &usize;
                    let mut _10: &usize;
                    let mut _13: bool;
                    let _15: usize;
                    let mut _16: usize;
                    scope 8 {
                        debug old => _15;
                        scope 9 {
                        }
                    }
                    scope 10 (inlined std::cmp::impls::<impl PartialOrd for usize>::lt) {
                        debug self => _9;
                        debug other => _10;
                        let mut _11: usize;
                        let mut _12: usize;
                    }
                }
            }
        }
    }
    scope 4 (inlined iter::range::<impl IntoIterator for std::ops::Range<usize>>::into_iter) {
        debug ((self: std::ops::Range<usize>).0: usize) => const 0_usize;
        debug ((self: std::ops::Range<usize>).1: usize) => _3;
        let mut _4: std::ops::range::legacy::Range<usize>;
    }

    bb0: {
        StorageLive(_5);
        _3 = Len((*_1));
        StorageLive(_4);
        _4 = std::ops::range::legacy::Range::<usize> { start: const 0_usize, end: move _3 };
        _5 = iter::range::RangeIter::<usize> { inner: move _4 };
        StorageDead(_4);
        StorageLive(_6);
        _6 = move _5;
        goto -> bb1;
    }

    bb1: {
        StorageLive(_14);
        _7 = &mut _6;
        _8 = &mut (_6.0: std::ops::range::legacy::Range<usize>);
        StorageLive(_15);
        StorageLive(_13);
        StorageLive(_9);
        _9 = &((_6.0: std::ops::range::legacy::Range<usize>).0: usize);
        StorageLive(_10);
        _10 = &((_6.0: std::ops::range::legacy::Range<usize>).1: usize);
        StorageLive(_11);
        _11 = ((_6.0: std::ops::range::legacy::Range<usize>).0: usize);
        StorageLive(_12);
        _12 = ((_6.0: std::ops::range::legacy::Range<usize>).1: usize);
        _13 = Lt(move _11, move _12);
        StorageDead(_12);
        StorageDead(_11);
        switchInt(move _13) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        _14 = Option::<usize>::None;
        goto -> bb5;
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_9);
        _15 = ((_6.0: std::ops::range::legacy::Range<usize>).0: usize);
        StorageLive(_16);
        _16 = <usize as Step>::forward_unchecked(_15, const 1_usize) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        ((_6.0: std::ops::range::legacy::Range<usize>).0: usize) = move _16;
        StorageDead(_16);
        _14 = Option::<usize>::Some(_15);
        goto -> bb5;
    }

    bb5: {
        StorageDead(_13);
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb6, 1: bb8, otherwise: bb11];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_6);
        StorageDead(_5);
        drop(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8: {
        _18 = ((_14 as Some).0: usize);
        _19 = Len((*_1));
        _20 = Lt(_18, _19);
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> [success: bb9, unwind: bb12];
    }

    bb9: {
        _21 = &(*_1)[_18];
        StorageLive(_22);
        _22 = &_2;
        StorageLive(_23);
        _23 = (_18, _21);
        _24 = <impl Fn(usize, &T) as Fn<(usize, &T)>>::call(move _22, move _23) -> [return: bb10, unwind: bb12];
    }

    bb10: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        goto -> bb1;
    }

    bb11: {
        unreachable;
    }

    bb12 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        resume;
    }
}
