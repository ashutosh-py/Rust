// MIR for `range_loop` after PreCodegen

fn range_loop(_1: &[T], _2: impl Fn(usize, &T)) -> () {
    debug slice => _1;
    debug f => _2;
    let mut _0: ();
    let mut _3: usize;
    let mut _4: std::ops::Range<usize>;
    let mut _5: std::ops::Range<usize>;
    let mut _6: &mut std::ops::Range<usize>;
    let mut _7: std::option::Option<usize>;
    let mut _8: isize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _13: &impl Fn(usize, &T);
    let mut _14: (usize, &T);
    let _15: ();
    scope 1 {
        debug iter => _5;
        let _9: usize;
        scope 2 {
            debug i => _9;
            let _12: &T;
            scope 3 {
                debug x => _12;
            }
        }
        scope 5 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) {
            debug self => _6;
        }
    }
    scope 4 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) {
        debug self => _4;
    }

    bb0: {
        StorageLive(_3);
        _3 = Len((*_1));
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _3 };
        StorageDead(_3);
        StorageLive(_5);
        _5 = _4;
        goto -> bb1;
    }

    bb1: {
        StorageLive(_7);
        StorageLive(_6);
        _6 = &mut _5;
        _7 = <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next(move _6) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_7);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb8];
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_5);
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5: {
        _9 = ((_7 as Some).0: usize);
        _10 = Len((*_1));
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb6, unwind: bb9];
    }

    bb6: {
        _12 = &(*_1)[_9];
        StorageLive(_13);
        _13 = &_2;
        StorageLive(_14);
        _14 = (_9, _12);
        _15 = <impl Fn(usize, &T) as Fn<(usize, &T)>>::call(move _13, move _14) -> [return: bb7, unwind: bb9];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_7);
        goto -> bb1;
    }

    bb8: {
        unreachable;
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}
