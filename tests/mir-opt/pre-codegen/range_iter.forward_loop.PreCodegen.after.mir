// MIR for `forward_loop` after PreCodegen

fn forward_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {
    debug start => _1;                   // in scope 0 at $DIR/range_iter.rs:+0:21: +0:26
    debug end => _2;                     // in scope 0 at $DIR/range_iter.rs:+0:33: +0:36
    debug f => _3;                       // in scope 0 at $DIR/range_iter.rs:+0:43: +0:44
    let mut _0: ();                      // return place in scope 0 at $DIR/range_iter.rs:+0:60: +0:60
    let mut _4: std::ops::Range<u32>;    // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24
    let mut _5: std::ops::Range<u32>;    // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24
    let mut _6: &mut std::ops::Range<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24
    let mut _12: std::option::Option<u32>; // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24
    let mut _16: isize;                  // in scope 0 at $DIR/range_iter.rs:+1:5: +3:6
    let mut _18: &impl Fn(u32);          // in scope 0 at $DIR/range_iter.rs:+2:9: +2:10
    let mut _19: (u32,);                 // in scope 0 at $DIR/range_iter.rs:+2:9: +2:13
    let _20: ();                         // in scope 0 at $DIR/range_iter.rs:+1:14: +1:24
    scope 1 {
        debug iter => _5;                // in scope 1 at $DIR/range_iter.rs:+1:14: +1:24
        let _17: u32;                    // in scope 1 at $DIR/range_iter.rs:+1:9: +1:10
        scope 2 {
            debug x => _17;              // in scope 2 at $DIR/range_iter.rs:+1:9: +1:10
        }
        scope 4 (inlined iter::range::<impl Iterator for std::ops::Range<u32>>::next) { // at $DIR/range_iter.rs:21:14: 21:24
            debug self => _6;            // in scope 4 at $SRC_DIR/core/src/iter/range.rs:LL:COL
            scope 5 (inlined <std::ops::Range<u32> as iter::range::RangeIteratorImpl>::spec_next) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL
                debug self => _6;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                let mut _7: &u32;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                let mut _8: &u32;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                let mut _11: bool;       // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                let _13: u32;            // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                let mut _15: u32;        // in scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                scope 6 {
                    debug old => _13;    // in scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                    scope 7 {
                        scope 9 (inlined <u32 as Step>::forward_unchecked) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL
                            debug start => _13; // in scope 9 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                            debug n => const 1_usize; // in scope 9 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                            let mut _14: u32; // in scope 9 at $SRC_DIR/core/src/iter/range.rs:LL:COL
                            scope 10 {
                                scope 11 (inlined core::num::<impl u32>::unchecked_add) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL
                                    debug self => _13; // in scope 11 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL
                                    debug rhs => const 1_u32; // in scope 11 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL
                                    scope 12 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 8 (inlined cmp::impls::<impl PartialOrd for u32>::lt) { // at $SRC_DIR/core/src/iter/range.rs:LL:COL
                    debug self => _7;    // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL
                    debug other => _8;   // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL
                    let mut _9: u32;     // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL
                    let mut _10: u32;    // in scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL
                }
            }
        }
    }
    scope 3 (inlined <std::ops::Range<u32> as IntoIterator>::into_iter) { // at $DIR/range_iter.rs:21:14: 21:24
        debug self => _4;                // in scope 3 at $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL
    }

    bb0: {
        _4 = std::ops::Range::<u32> { start: _1, end: _2 }; // scope 0 at $DIR/range_iter.rs:+1:14: +1:24
        StorageLive(_5);                 // scope 0 at $DIR/range_iter.rs:+1:14: +1:24
        _5 = move _4;                    // scope 0 at $DIR/range_iter.rs:+1:14: +1:24
        goto -> bb1;                     // scope 1 at $DIR/range_iter.rs:+1:5: +3:6
    }

    bb1: {
        StorageLive(_12);                // scope 1 at $DIR/range_iter.rs:+1:14: +1:24
        _6 = &mut _5;                    // scope 1 at $DIR/range_iter.rs:+1:14: +1:24
        StorageLive(_11);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        StorageLive(_7);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        _7 = &((*_6).0: u32);            // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        StorageLive(_8);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        _8 = &((*_6).1: u32);            // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        StorageLive(_9);                 // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL
        _9 = (*_7);                      // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL
        StorageLive(_10);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL
        _10 = (*_8);                     // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL
        _11 = Lt(move _9, move _10);     // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL
        StorageDead(_10);                // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL
        StorageDead(_9);                 // scope 8 at $SRC_DIR/core/src/cmp.rs:LL:COL
        StorageDead(_8);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        StorageDead(_7);                 // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        switchInt(move _11) -> [0: bb2, otherwise: bb3]; // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
    }

    bb2: {
        _12 = Option::<u32>::None;       // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        goto -> bb5;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
    }

    bb3: {
        _13 = ((*_6).0: u32);            // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        StorageLive(_15);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        StorageLive(_14);                // scope 10 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        _14 = const 1_u32;               // scope 10 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        _15 = unchecked_add::<u32>(_13, _14) -> [return: bb4, unwind unreachable]; // scope 12 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(u32, u32) -> u32 {unchecked_add::<u32>}, val: Value(<ZST>) }
    }

    bb4: {
        StorageDead(_14);                // scope 10 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        ((*_6).0: u32) = move _15;       // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        StorageDead(_15);                // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        _12 = Option::<u32>::Some(_13);  // scope 6 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        goto -> bb5;                     // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
    }

    bb5: {
        StorageDead(_11);                // scope 5 at $SRC_DIR/core/src/iter/range.rs:LL:COL
        _16 = discriminant(_12);         // scope 1 at $DIR/range_iter.rs:+1:14: +1:24
        switchInt(move _16) -> [0: bb6, 1: bb8, otherwise: bb12]; // scope 1 at $DIR/range_iter.rs:+1:14: +1:24
    }

    bb6: {
        StorageDead(_12);                // scope 1 at $DIR/range_iter.rs:+3:5: +3:6
        StorageDead(_5);                 // scope 0 at $DIR/range_iter.rs:+3:5: +3:6
        drop(_3) -> bb7;                 // scope 0 at $DIR/range_iter.rs:+4:1: +4:2
    }

    bb7: {
        return;                          // scope 0 at $DIR/range_iter.rs:+4:2: +4:2
    }

    bb8: {
        _17 = ((_12 as Some).0: u32);    // scope 1 at $DIR/range_iter.rs:+1:9: +1:10
        StorageLive(_18);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:10
        _18 = &_3;                       // scope 2 at $DIR/range_iter.rs:+2:9: +2:10
        StorageLive(_19);                // scope 2 at $DIR/range_iter.rs:+2:9: +2:13
        _19 = (_17,);                    // scope 2 at $DIR/range_iter.rs:+2:9: +2:13
        _20 = <impl Fn(u32) as Fn<(u32,)>>::call(move _18, move _19) -> [return: bb9, unwind: bb10]; // scope 2 at $DIR/range_iter.rs:+2:9: +2:13
                                         // mir::Constant
                                         // + span: $DIR/range_iter.rs:22:9: 22:10
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a impl Fn(u32), (u32,)) -> <impl Fn(u32) as FnOnce<(u32,)>>::Output {<impl Fn(u32) as Fn<(u32,)>>::call}, val: Value(<ZST>) }
    }

    bb9: {
        StorageDead(_19);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13
        StorageDead(_18);                // scope 2 at $DIR/range_iter.rs:+2:12: +2:13
        StorageDead(_12);                // scope 1 at $DIR/range_iter.rs:+3:5: +3:6
        goto -> bb1;                     // scope 1 at $DIR/range_iter.rs:+1:5: +3:6
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb11, unwind terminate]; // scope 0 at $DIR/range_iter.rs:+4:1: +4:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at $DIR/range_iter.rs:+0:1: +4:2
    }

    bb12: {
        unreachable;                     // scope 1 at $DIR/range_iter.rs:+1:14: +1:24
    }
}
