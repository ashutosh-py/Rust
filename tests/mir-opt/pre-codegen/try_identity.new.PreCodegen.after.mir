// MIR for `new` after PreCodegen

fn new(_1: Result<T, E>) -> Result<T, E> {
    debug x => _1;
    let mut _0: std::result::Result<T, E>;
    let mut _2: isize;
    let mut _3: std::ops::ControlFlow<E, T>;
    let mut _4: isize;
    scope 1 {
        debug v => ((_1 as Ok).0: T);
    }
    scope 2 {
        debug e => ((_1 as Err).0: E);
    }
    scope 3 {
        debug v => ((_3 as Continue).0: T);
    }
    scope 4 {
        debug e => ((_3 as Break).0: E);
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb1, 1: bb2, otherwise: bb7];
    }

    bb1: {
        _3 = ControlFlow::<E, T>::Continue(move ((_1 as Ok).0: T));
        goto -> bb3;
    }

    bb2: {
        _3 = ControlFlow::<E, T>::Break(move ((_1 as Err).0: E));
        goto -> bb3;
    }

    bb3: {
        _4 = discriminant(_3);
        switchInt(move _4) -> [0: bb4, 1: bb5, otherwise: bb7];
    }

    bb4: {
        _0 = Result::<T, E>::Ok(move ((_3 as Continue).0: T));
        goto -> bb6;
    }

    bb5: {
        _0 = Result::<T, E>::Err(move ((_3 as Break).0: E));
        goto -> bb6;
    }

    bb6: {
        return;
    }

    bb7: {
        unreachable;
    }
}
