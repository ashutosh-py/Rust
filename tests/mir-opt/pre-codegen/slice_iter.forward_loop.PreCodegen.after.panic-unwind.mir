// MIR for `forward_loop` after PreCodegen

fn forward_loop(_1: &[T], _2: impl Fn(&T)) -> () {
    debug slice => _1;
    debug f => _2;
    let mut _0: ();
    let mut _11: std::slice::Iter<'_, T>;
    let mut _12: std::slice::Iter<'_, T>;
    let mut _56: &impl Fn(&T);
    let mut _57: (&T,);
    let _58: ();
    scope 1 {
        debug iter => _12;
        scope 2 {
            debug x => _55;
        }
        scope 23 (inlined <std::slice::Iter<'_, T> as Iterator>::next) {
            debug (*(self: &mut std::slice::Iter<'_, T>)) => _12;
            let mut _13: bool;
            let mut _14: *const *const T;
            let mut _15: *const std::ptr::NonNull<T>;
            let mut _32: bool;
            let mut _33: *const T;
            let _36: std::ptr::NonNull<T>;
            let mut _55: &T;
            scope 24 {
                scope 25 {
                    let _16: std::ptr::NonNull<T>;
                    let _35: usize;
                    scope 26 {
                        debug len => _35;
                    }
                    scope 27 {
                        debug end => _16;
                        scope 33 (inlined <NonNull<T> as PartialEq>::eq) {
                            debug (*(self: &NonNull<T>)) => (_12.0: std::ptr::NonNull<T>);
                            debug (*(other: &NonNull<T>)) => _16;
                            let mut _17: std::ptr::NonNull<T>;
                            let mut _24: *mut T;
                            let mut _31: *mut T;
                            scope 34 (inlined NonNull::<T>::as_ptr) {
                                debug self => _17;
                                let mut _18: *const T;
                                let mut _22: bool;
                                let mut _23: bool;
                                scope 35 {
                                    scope 36 (inlined std::ptr::const_ptr::<impl *const T>::is_null) {
                                        debug self => _18;
                                        let mut _19: *const u8;
                                        scope 37 {
                                            scope 38 (inlined std::ptr::const_ptr::<impl *const T>::is_null::runtime_impl) {
                                                debug ptr => _19;
                                                let mut _21: usize;
                                                scope 39 (inlined std::ptr::const_ptr::<impl *const u8>::addr) {
                                                    debug self => _19;
                                                    let mut _20: *const ();
                                                    scope 40 {
                                                        scope 41 (inlined std::ptr::const_ptr::<impl *const u8>::cast::<()>) {
                                                            debug self => _19;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 42 (inlined NonNull::<T>::as_ptr) {
                                debug self => _16;
                                let mut _25: *const T;
                                let mut _29: bool;
                                let mut _30: bool;
                                scope 43 {
                                    scope 44 (inlined std::ptr::const_ptr::<impl *const T>::is_null) {
                                        debug self => _25;
                                        let mut _26: *const u8;
                                        scope 45 {
                                            scope 46 (inlined std::ptr::const_ptr::<impl *const T>::is_null::runtime_impl) {
                                                debug ptr => _26;
                                                let mut _28: usize;
                                                scope 47 (inlined std::ptr::const_ptr::<impl *const u8>::addr) {
                                                    debug self => _26;
                                                    let mut _27: *const ();
                                                    scope 48 {
                                                        scope 49 (inlined std::ptr::const_ptr::<impl *const u8>::cast::<()>) {
                                                            debug self => _26;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 28 {
                        scope 32 (inlined std::ptr::const_ptr::<impl *const *const T>::cast::<NonNull<T>>) {
                            debug self => _14;
                        }
                    }
                    scope 29 (inlined std::ptr::const_ptr::<impl *const T>::addr) {
                        debug self => _33;
                        let mut _34: *const ();
                        scope 30 {
                            scope 31 (inlined std::ptr::const_ptr::<impl *const T>::cast::<()>) {
                                debug self => _33;
                            }
                        }
                    }
                }
                scope 50 (inlined std::slice::Iter::<'_, T>::post_inc_start) {
                    debug (*(self: &mut std::slice::Iter<'_, T>)) => _12;
                    debug offset => const 1_usize;
                    let mut _37: bool;
                    let mut _38: *mut *const T;
                    let mut _39: *mut std::ptr::NonNull<T>;
                    let mut _40: std::ptr::NonNull<T>;
                    let mut _43: std::ptr::NonNull<T>;
                    let mut _44: *mut *const T;
                    let mut _45: *mut usize;
                    let mut _46: usize;
                    let mut _47: usize;
                    scope 51 {
                        debug old => _36;
                        scope 52 {
                            scope 53 {
                                scope 54 {
                                    debug len => _45;
                                    scope 59 (inlined core::num::<impl usize>::unchecked_sub) {
                                        debug self => _46;
                                        debug rhs => const 1_usize;
                                        scope 60 {
                                        }
                                    }
                                }
                                scope 55 {
                                    scope 58 (inlined std::ptr::mut_ptr::<impl *mut *const T>::cast::<usize>) {
                                        debug self => _44;
                                    }
                                }
                                scope 56 {
                                    debug _end => _39;
                                    scope 62 (inlined NonNull::<T>::add) {
                                        debug self => _40;
                                        debug count => const 1_usize;
                                        let mut _41: *const T;
                                        let mut _42: *const T;
                                        scope 63 {
                                        }
                                    }
                                }
                                scope 57 {
                                    scope 61 (inlined std::ptr::mut_ptr::<impl *mut *const T>::cast::<NonNull<T>>) {
                                        debug self => _38;
                                    }
                                }
                            }
                        }
                    }
                }
                scope 64 (inlined NonNull::<T>::as_ref::<'_>) {
                    debug (*(self: &NonNull<T>)) => _36;
                    let mut _54: *mut T;
                    scope 65 {
                        scope 66 (inlined NonNull::<T>::as_ptr) {
                            debug self => _36;
                            let mut _48: *const T;
                            let mut _52: bool;
                            let mut _53: bool;
                            scope 67 {
                                scope 68 (inlined std::ptr::const_ptr::<impl *const T>::is_null) {
                                    debug self => _48;
                                    let mut _49: *const u8;
                                    scope 69 {
                                        scope 70 (inlined std::ptr::const_ptr::<impl *const T>::is_null::runtime_impl) {
                                            debug ptr => _49;
                                            let mut _51: usize;
                                            scope 71 (inlined std::ptr::const_ptr::<impl *const u8>::addr) {
                                                debug self => _49;
                                                let mut _50: *const ();
                                                scope 72 {
                                                    scope 73 (inlined std::ptr::const_ptr::<impl *const u8>::cast::<()>) {
                                                        debug self => _49;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 74 (inlined std::ptr::mut_ptr::<impl *mut T>::cast_const) {
                            debug self => _54;
                        }
                    }
                }
            }
        }
    }
    scope 3 (inlined core::slice::<impl [T]>::iter) {
        debug self => _1;
        scope 4 (inlined std::slice::Iter::<'_, T>::new) {
            debug slice => _1;
            let _4: *const T;
            let mut _5: bool;
            let mut _6: usize;
            let mut _7: *const T;
            let mut _8: usize;
            let mut _9: *mut T;
            let mut _10: std::ptr::NonNull<T>;
            scope 5 {
                debug ptr => _4;
                scope 6 {
                    scope 7 {
                        debug end_or_len => _7;
                        scope 13 (inlined NonNull::<T>::new_unchecked) {
                            debug ptr => _9;
                            let mut _59: *mut T;
                            scope 14 {
                                scope 15 (inlined NonNull::<T>::new_unchecked::runtime::<T>) {
                                    debug ptr => _59;
                                    scope 16 (inlined std::ptr::mut_ptr::<impl *mut T>::is_null) {
                                        debug self => _59;
                                        let mut _60: *mut u8;
                                        scope 17 {
                                            scope 18 (inlined std::ptr::mut_ptr::<impl *mut T>::is_null::runtime_impl) {
                                                debug ptr => _60;
                                                scope 19 (inlined std::ptr::mut_ptr::<impl *mut u8>::addr) {
                                                    debug self => _60;
                                                    scope 20 {
                                                        scope 21 (inlined std::ptr::mut_ptr::<impl *mut u8>::cast::<()>) {
                                                            debug self => _60;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    scope 9 (inlined invalid::<T>) {
                        debug addr => _8;
                        scope 10 {
                        }
                    }
                    scope 11 (inlined std::ptr::const_ptr::<impl *const T>::add) {
                        debug self => _4;
                        debug count => _6;
                        scope 12 {
                        }
                    }
                }
            }
            scope 8 (inlined core::slice::<impl [T]>::as_ptr) {
                debug self => _1;
                let mut _3: *const [T];
            }
        }
    }
    scope 22 (inlined <std::slice::Iter<'_, T> as IntoIterator>::into_iter) {
        debug self => _11;
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_7);
        StorageLive(_3);
        _3 = &raw const (*_1);
        _4 = _3 as *const T (PtrToPtr);
        StorageLive(_5);
        _5 = const _;
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_6);
        _6 = Len((*_1));
        _7 = Offset(_4, _6);
        StorageDead(_6);
        goto -> bb3;
    }

    bb2: {
        StorageLive(_8);
        _8 = Len((*_1));
        _7 = _8 as *const T (Transmute);
        StorageDead(_8);
        goto -> bb3;
    }

    bb3: {
        StorageDead(_5);
        StorageLive(_10);
        StorageLive(_9);
        _9 = _3 as *mut T (PtrToPtr);
        StorageLive(_59);
        StorageLive(_60);
        _10 = NonNull::<T> { pointer: _4 };
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_9);
        _11 = std::slice::Iter::<'_, T> { ptr: move _10, end_or_len: move _7, _marker: const ZeroSized: PhantomData<&T> };
        StorageDead(_10);
        StorageDead(_3);
        StorageDead(_7);
        StorageDead(_4);
        StorageLive(_12);
        _12 = _11;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_35);
        StorageLive(_16);
        StorageLive(_36);
        StorageLive(_48);
        StorageLive(_32);
        StorageLive(_13);
        _13 = const _;
        switchInt(move _13) -> [0: bb5, otherwise: bb6];
    }

    bb5: {
        StorageLive(_15);
        StorageLive(_14);
        _14 = &raw const (_12.1: *const T);
        _15 = _14 as *const std::ptr::NonNull<T> (PtrToPtr);
        StorageDead(_14);
        _16 = (*_15);
        StorageDead(_15);
        StorageLive(_24);
        StorageLive(_17);
        _17 = (_12.0: std::ptr::NonNull<T>);
        StorageLive(_18);
        StorageLive(_23);
        StorageLive(_22);
        _18 = (_17.0: *const T);
        StorageLive(_19);
        _19 = _18 as *const u8 (PtrToPtr);
        StorageLive(_21);
        StorageLive(_20);
        _20 = _18 as *const () (PtrToPtr);
        _21 = move _20 as usize (Transmute);
        StorageDead(_20);
        _22 = Eq(move _21, const 0_usize);
        StorageDead(_21);
        StorageDead(_19);
        _23 = Not(move _22);
        StorageDead(_22);
        assume(move _23);
        StorageDead(_23);
        _24 = _18 as *mut T (PtrToPtr);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_31);
        StorageLive(_25);
        StorageLive(_30);
        StorageLive(_29);
        _25 = (_16.0: *const T);
        StorageLive(_26);
        _26 = _25 as *const u8 (PtrToPtr);
        StorageLive(_28);
        StorageLive(_27);
        _27 = _25 as *const () (PtrToPtr);
        _28 = move _27 as usize (Transmute);
        StorageDead(_27);
        _29 = Eq(move _28, const 0_usize);
        StorageDead(_28);
        StorageDead(_26);
        _30 = Not(move _29);
        StorageDead(_29);
        assume(move _30);
        StorageDead(_30);
        _31 = _25 as *mut T (PtrToPtr);
        StorageDead(_25);
        _32 = Eq(move _24, move _31);
        StorageDead(_31);
        StorageDead(_24);
        goto -> bb7;
    }

    bb6: {
        StorageLive(_33);
        _33 = (_12.1: *const T);
        StorageLive(_34);
        _34 = _33 as *const () (PtrToPtr);
        _35 = move _34 as usize (Transmute);
        StorageDead(_34);
        StorageDead(_33);
        _32 = Eq(_35, const 0_usize);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_13);
        switchInt(move _32) -> [0: bb8, otherwise: bb15];
    }

    bb8: {
        StorageLive(_45);
        StorageLive(_39);
        _36 = (_12.0: std::ptr::NonNull<T>);
        StorageLive(_37);
        _37 = const _;
        switchInt(move _37) -> [0: bb9, otherwise: bb10];
    }

    bb9: {
        StorageLive(_38);
        _38 = &raw mut (_12.1: *const T);
        _39 = _38 as *mut std::ptr::NonNull<T> (PtrToPtr);
        StorageDead(_38);
        StorageLive(_43);
        StorageLive(_40);
        _40 = (_12.0: std::ptr::NonNull<T>);
        StorageLive(_42);
        StorageLive(_41);
        _41 = (_40.0: *const T);
        _42 = Offset(move _41, const 1_usize);
        StorageDead(_41);
        _43 = NonNull::<T> { pointer: move _42 };
        StorageDead(_42);
        StorageDead(_40);
        (_12.0: std::ptr::NonNull<T>) = move _43;
        StorageDead(_43);
        goto -> bb11;
    }

    bb10: {
        StorageLive(_44);
        _44 = &raw mut (_12.1: *const T);
        _45 = _44 as *mut usize (PtrToPtr);
        StorageDead(_44);
        StorageLive(_47);
        StorageLive(_46);
        _46 = (*_45);
        _47 = SubUnchecked(_46, const 1_usize);
        StorageDead(_46);
        (*_45) = move _47;
        StorageDead(_47);
        goto -> bb11;
    }

    bb11: {
        StorageDead(_37);
        StorageDead(_39);
        StorageDead(_45);
        StorageLive(_54);
        StorageLive(_53);
        StorageLive(_52);
        _48 = (_36.0: *const T);
        StorageLive(_49);
        _49 = _48 as *const u8 (PtrToPtr);
        StorageLive(_51);
        StorageLive(_50);
        _50 = _48 as *const () (PtrToPtr);
        _51 = move _50 as usize (Transmute);
        StorageDead(_50);
        _52 = Eq(move _51, const 0_usize);
        StorageDead(_51);
        StorageDead(_49);
        _53 = Not(move _52);
        StorageDead(_52);
        assume(move _53);
        StorageDead(_53);
        _54 = _48 as *mut T (PtrToPtr);
        StorageDead(_54);
        _55 = &(*_48);
        StorageDead(_32);
        StorageDead(_48);
        StorageDead(_36);
        StorageDead(_16);
        StorageDead(_35);
        StorageLive(_56);
        _56 = &_2;
        StorageLive(_57);
        _57 = (_55,);
        _58 = <impl Fn(&T) as Fn<(&T,)>>::call(move _56, move _57) -> [return: bb12, unwind: bb13];
    }

    bb12: {
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb4;
    }

    bb13 (cleanup): {
        drop(_2) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        StorageDead(_32);
        StorageDead(_48);
        StorageDead(_36);
        StorageDead(_16);
        StorageDead(_35);
        StorageDead(_12);
        drop(_2) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }
}
