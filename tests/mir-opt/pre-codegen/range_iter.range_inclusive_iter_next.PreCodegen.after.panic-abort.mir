// MIR for `range_inclusive_iter_next` after PreCodegen

fn range_inclusive_iter_next(_1: &mut std::ops::RangeInclusive<u32>) -> Option<u32> {
    debug it => _1;
    let mut _0: std::option::Option<u32>;
    scope 1 (inlined iter::range::<impl std::ops::RangeInclusive<u32>>::next) {
        debug self => _1;
        let mut _2: std::iter::range::RangeInclusiveIterMut<'_, u32>;
        let mut _3: &mut std::iter::range::RangeInclusiveIterMut<'_, u32>;
        scope 2 (inlined iter::range::<impl std::ops::RangeInclusive<u32>>::iter_mut) {
            debug self => _1;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_2);
        _2 = iter::range::RangeInclusiveIterMut::<'_, u32> { range: _1 };
        _3 = &mut _2;
        _0 = <iter::range::RangeInclusiveIterMut<'_, u32> as Iterator>::next(move _3) -> [return: bb1, unwind unreachable];
    }

    bb1: {
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}
