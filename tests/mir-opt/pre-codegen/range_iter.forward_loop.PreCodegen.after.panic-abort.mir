// MIR for `forward_loop` after PreCodegen

fn forward_loop(_1: u32, _2: u32, _3: impl Fn(u32)) -> () {
    debug start => _1;
    debug end => _2;
    debug f => _3;
    let mut _0: ();
    let mut _5: std::iter::range::RangeIter<u32>;
    let mut _6: std::iter::range::RangeIter<u32>;
    let mut _7: &mut std::iter::range::RangeIter<u32>;
    let mut _14: std::option::Option<u32>;
    let mut _17: isize;
    let mut _19: &impl Fn(u32);
    let mut _20: (u32,);
    let _21: ();
    scope 1 {
        debug iter => _6;
        let _18: u32;
        scope 2 {
            debug x => _18;
        }
        scope 4 (inlined <iter::range::RangeIter<u32> as Iterator>::next) {
            debug self => _7;
            let mut _8: &mut std::ops::range::legacy::Range<u32>;
            scope 5 (inlined iter::range::legacy::<impl Iterator for std::ops::range::legacy::Range<u32>>::next) {
                debug self => _8;
                scope 6 (inlined <std::ops::range::legacy::Range<u32> as iter::range::legacy::RangeIteratorImpl>::spec_next) {
                    debug self => _8;
                    let mut _9: &u32;
                    let mut _10: &u32;
                    let mut _13: bool;
                    let _15: u32;
                    let mut _16: u32;
                    scope 7 {
                        debug old => _15;
                        scope 8 {
                        }
                    }
                    scope 9 (inlined std::cmp::impls::<impl PartialOrd for u32>::lt) {
                        debug self => _9;
                        debug other => _10;
                        let mut _11: u32;
                        let mut _12: u32;
                    }
                }
            }
        }
    }
    scope 3 (inlined iter::range::<impl IntoIterator for std::ops::Range<u32>>::into_iter) {
        debug ((self: std::ops::Range<u32>).0: u32) => _1;
        debug ((self: std::ops::Range<u32>).1: u32) => _2;
        let mut _4: std::ops::range::legacy::Range<u32>;
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_4);
        _4 = std::ops::range::legacy::Range::<u32> { start: _1, end: _2 };
        _5 = iter::range::RangeIter::<u32> { inner: move _4 };
        StorageDead(_4);
        StorageLive(_6);
        _6 = move _5;
        goto -> bb1;
    }

    bb1: {
        StorageLive(_14);
        _7 = &mut _6;
        _8 = &mut (_6.0: std::ops::range::legacy::Range<u32>);
        StorageLive(_15);
        StorageLive(_13);
        StorageLive(_9);
        _9 = &((_6.0: std::ops::range::legacy::Range<u32>).0: u32);
        StorageLive(_10);
        _10 = &((_6.0: std::ops::range::legacy::Range<u32>).1: u32);
        StorageLive(_11);
        _11 = ((_6.0: std::ops::range::legacy::Range<u32>).0: u32);
        StorageLive(_12);
        _12 = ((_6.0: std::ops::range::legacy::Range<u32>).1: u32);
        _13 = Lt(move _11, move _12);
        StorageDead(_12);
        StorageDead(_11);
        switchInt(move _13) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        _14 = Option::<u32>::None;
        goto -> bb5;
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_9);
        _15 = ((_6.0: std::ops::range::legacy::Range<u32>).0: u32);
        StorageLive(_16);
        _16 = <u32 as Step>::forward_unchecked(_15, const 1_usize) -> [return: bb4, unwind unreachable];
    }

    bb4: {
        ((_6.0: std::ops::range::legacy::Range<u32>).0: u32) = move _16;
        StorageDead(_16);
        _14 = Option::<u32>::Some(_15);
        goto -> bb5;
    }

    bb5: {
        StorageDead(_13);
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb6, 1: bb8, otherwise: bb10];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_6);
        StorageDead(_5);
        drop(_3) -> [return: bb7, unwind unreachable];
    }

    bb7: {
        return;
    }

    bb8: {
        _18 = ((_14 as Some).0: u32);
        StorageLive(_19);
        _19 = &_3;
        StorageLive(_20);
        _20 = (_18,);
        _21 = <impl Fn(u32) as Fn<(u32,)>>::call(move _19, move _20) -> [return: bb9, unwind unreachable];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_14);
        goto -> bb1;
    }

    bb10: {
        unreachable;
    }
}
