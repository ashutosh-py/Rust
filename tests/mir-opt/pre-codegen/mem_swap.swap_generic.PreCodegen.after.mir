// MIR for `swap_generic` after PreCodegen

fn swap_generic(_1: &mut T, _2: &mut T) -> () {
    debug a => _1;                       // in scope 0 at $DIR/mem_swap.rs:+0:28: +0:29
    debug b => _2;                       // in scope 0 at $DIR/mem_swap.rs:+0:39: +0:40
    let mut _0: ();                      // return place in scope 0 at $DIR/mem_swap.rs:+0:50: +0:50
    let _3: ();                          // in scope 0 at $DIR/mem_swap.rs:+1:5: +1:25
    scope 1 (inlined std::mem::swap::<T>) { // at $DIR/mem_swap.rs:14:5: 14:25
        debug x => _1;                   // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        debug y => _2;                   // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        let mut _4: bool;                // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        let mut _5: *mut T;              // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        let mut _6: *mut T;              // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        scope 2 {
        }
        scope 3 (inlined mem::swap_simple::<T>) { // at $SRC_DIR/core/src/mem/mod.rs:LL:COL
            debug x => _1;               // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
            debug y => _2;               // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
            let _7: *mut T;              // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
            scope 4 {
                debug x => _7;           // in scope 4 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
                let _8: *mut T;          // in scope 4 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
                scope 5 {
                    debug y => _8;       // in scope 5 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
                    scope 6 {
                        let _9: T;       // in scope 6 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
                        scope 7 {
                            debug a => _9; // in scope 7 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
                            let _10: T;  // in scope 7 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
                            scope 8 {
                                debug b => _10; // in scope 8 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
                                scope 15 (inlined std::ptr::write::<T>) { // at $SRC_DIR/core/src/mem/mod.rs:LL:COL
                                    debug dst => _7; // in scope 15 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
                                    debug src => _10; // in scope 15 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
                                    let mut _13: *mut T; // in scope 15 at $SRC_DIR/core/src/intrinsics.rs:LL:COL
                                    scope 16 {
                                        scope 17 (inlined std::ptr::write::runtime::<T>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL
                                            debug dst => _13; // in scope 17 at $SRC_DIR/core/src/intrinsics.rs:LL:COL
                                        }
                                    }
                                }
                                scope 18 (inlined std::ptr::write::<T>) { // at $SRC_DIR/core/src/mem/mod.rs:LL:COL
                                    debug dst => _8; // in scope 18 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
                                    debug src => _9; // in scope 18 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
                                    let mut _14: *mut T; // in scope 18 at $SRC_DIR/core/src/intrinsics.rs:LL:COL
                                    scope 19 {
                                        scope 20 (inlined std::ptr::write::runtime::<T>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL
                                            debug dst => _14; // in scope 20 at $SRC_DIR/core/src/intrinsics.rs:LL:COL
                                        }
                                    }
                                }
                            }
                            scope 12 (inlined ptr::read_mut::<T>) { // at $SRC_DIR/core/src/mem/mod.rs:LL:COL
                                debug src => _8; // in scope 12 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
                                let mut _12: *mut T; // in scope 12 at $SRC_DIR/core/src/intrinsics.rs:LL:COL
                                scope 13 {
                                    scope 14 (inlined ptr::read_mut::runtime::<T>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL
                                        debug src => _12; // in scope 14 at $SRC_DIR/core/src/intrinsics.rs:LL:COL
                                    }
                                }
                            }
                        }
                        scope 9 (inlined ptr::read_mut::<T>) { // at $SRC_DIR/core/src/mem/mod.rs:LL:COL
                            debug src => _7; // in scope 9 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
                            let mut _11: *mut T; // in scope 9 at $SRC_DIR/core/src/intrinsics.rs:LL:COL
                            scope 10 {
                                scope 11 (inlined ptr::read_mut::runtime::<T>) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL
                                    debug src => _11; // in scope 11 at $SRC_DIR/core/src/intrinsics.rs:LL:COL
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        _4 = const _;                    // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        switchInt(move _4) -> [0: bb4, otherwise: bb2]; // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
    }

    bb1: {
        return;                          // scope 0 at $DIR/mem_swap.rs:+2:2: +2:2
    }

    bb2: {
        StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        _5 = &raw mut (*_1);             // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        _6 = &raw mut (*_2);             // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        _3 = swap_nonoverlapping::<T>(move _5, move _6, const 1_usize) -> bb3; // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
                                         // mir::Constant
                                         // + span: $SRC_DIR/core/src/mem/mod.rs:LL:COL
                                         // + literal: Const { ty: unsafe fn(*mut T, *mut T, usize) {swap_nonoverlapping::<T>}, val: Value(<ZST>) }
    }

    bb3: {
        StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageDead(_4);                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        goto -> bb1;                     // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
    }

    bb4: {
        StorageDead(_4);                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageLive(_7);                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageLive(_8);                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageLive(_9);                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageLive(_10);                // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        _7 = &raw mut (*_1);             // scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        _8 = &raw mut (*_2);             // scope 4 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageLive(_11);                // scope 6 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        _9 = (*_7);                      // scope 10 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
        StorageDead(_11);                // scope 6 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageLive(_12);                // scope 7 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        _10 = (*_8);                     // scope 13 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
        StorageDead(_12);                // scope 7 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageLive(_13);                // scope 8 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        (*_7) = move _10;                // scope 16 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
        StorageDead(_13);                // scope 8 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageLive(_14);                // scope 8 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        (*_8) = move _9;                 // scope 19 at $SRC_DIR/core/src/ptr/mod.rs:LL:COL
        StorageDead(_14);                // scope 8 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageDead(_10);                // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageDead(_9);                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageDead(_8);                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        StorageDead(_7);                 // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
        goto -> bb1;                     // scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL
    }
}
