// MIR for `step_forward` after PreCodegen

fn step_forward(_1: u32, _2: usize) -> u32 {
    debug x => _1;
    debug n => _2;
    let mut _0: u32;
    scope 1 (inlined <u32 as Step>::forward) {
        debug start => _1;
        debug n => _2;
        let _9: std::option::Option<u32>;
        let mut _10: u32;
        scope 2 {
        }
        scope 3 (inlined <u32 as Step>::forward_checked) {
            debug start => _1;
            debug n => _2;
            scope 4 {
                debug n => _4;
                scope 6 (inlined core::num::<impl u32>::checked_add) {
                    debug self => _1;
                    debug rhs => _4;
                    let mut _8: bool;
                    scope 7 {
                        debug a => _6;
                        debug b => _7;
                    }
                    scope 8 (inlined core::num::<impl u32>::overflowing_add) {
                        debug self => _1;
                        debug rhs => _4;
                        let mut _5: (u32, bool);
                        let _6: u32;
                        let _7: bool;
                        scope 9 {
                            debug a => _6;
                            debug b => _7;
                        }
                    }
                }
            }
            scope 5 (inlined convert::num::ptr_try_from_impls::<impl TryFrom<usize> for u32>::try_from) {
                debug u => _2;
                let mut _3: bool;
                let mut _4: u32;
            }
        }
        scope 10 (inlined Option::<u32>::is_none) {
            debug (*(self: &Option<u32>)) => _9;
            scope 11 (inlined Option::<u32>::is_some) {
                debug (*(self: &Option<u32>)) => _9;
            }
        }
        scope 12 (inlined core::num::<impl u32>::wrapping_add) {
            debug self => _1;
            debug rhs => _10;
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_9);
        StorageLive(_3);
        _3 = Gt(_2, const 4294967295_usize);
        switchInt(move _3) -> [0: bb1, otherwise: bb5];
    }

    bb1: {
        _4 = _2 as u32 (IntToInt);
        StorageDead(_3);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_5);
        _5 = CheckedAdd(_1, _4);
        _6 = (_5.0: u32);
        _7 = (_5.1: bool);
        StorageDead(_5);
        StorageLive(_8);
        _8 = unlikely(move _7) -> [return: bb2, unwind unreachable];
    }

    bb2: {
        switchInt(move _8) -> [0: bb3, otherwise: bb4];
    }

    bb3: {
        _9 = Option::<u32>::Some(_6);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_9);
        goto -> bb7;
    }

    bb4: {
        _9 = const Option::<u32>::None;
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb6;
    }

    bb5: {
        StorageDead(_3);
        _9 = const Option::<u32>::None;
        goto -> bb6;
    }

    bb6: {
        StorageDead(_9);
        assert(!const true, "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> [success: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_10);
        _10 = _2 as u32 (IntToInt);
        _0 = Add(_1, _10);
        StorageDead(_10);
        StorageDead(_4);
        return;
    }
}

ALLOC0 (size: 8, align: 4) {
    00 00 00 00 __ __ __ __                         │ ....░░░░
}

ALLOC1 (size: 8, align: 4) {
    00 00 00 00 __ __ __ __                         │ ....░░░░
}
