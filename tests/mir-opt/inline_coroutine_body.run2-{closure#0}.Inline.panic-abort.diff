- // MIR for `run2::{closure#0}` before Inline
+ // MIR for `run2::{closure#0}` after Inline
  
  fn run2::{closure#0}(_1: {closure@$DIR/inline_coroutine_body.rs:13:9: 13:11}) -> () {
      debug permit => (_1.0: ActionPermit<'_, T>);
      debug ctx => (*(_1.1: &mut std::task::Context<'_>));
      let mut _0: ();
      let mut _2: {async fn body of ActionPermit<'_, T>::perform()};
      let mut _3: ActionPermit<'_, T>;
      let mut _5: &mut {async fn body of ActionPermit<'_, T>::perform()};
      let _6: ();
      let mut _7: std::task::Poll<()>;
      let mut _8: std::pin::Pin<&mut {async fn body of ActionPermit<'_, T>::perform()}>;
      let mut _9: &mut std::task::Context<'_>;
      let mut _10: &mut std::task::Context<'_>;
+     let mut _11: *mut {async fn body of ActionPermit<'_, T>::perform()};
+     let mut _12: ();
      scope 1 {
          debug fut => _2;
          let _4: std::pin::Pin<&mut {async fn body of ActionPermit<'_, T>::perform()}>;
          scope 2 {
              debug fut => _4;
              scope 3 {
              }
+             scope 6 (inlined ActionPermit::<'_, T>::perform::{closure#0}) {
+                 let _13: ActionPermit<'_, T>;
+                 let mut _14: std::future::Ready<()>;
+                 let mut _15: std::future::Ready<()>;
+                 let mut _16: ();
+                 let mut _18: ();
+                 let _19: ();
+                 let mut _20: std::task::Poll<()>;
+                 let mut _21: std::pin::Pin<&mut std::future::Ready<()>>;
+                 let mut _22: &mut std::future::Ready<()>;
+                 let mut _23: &mut std::future::Ready<()>;
+                 let mut _24: &mut std::task::Context<'_>;
+                 let mut _25: &mut std::task::Context<'_>;
+                 let mut _26: &mut std::task::Context<'_>;
+                 let mut _27: isize;
+                 let mut _29: !;
+                 let mut _30: &mut std::task::Context<'_>;
+                 let mut _31: ();
+                 let mut _32: ();
+                 let mut _33: &mut std::task::Context<'_>;
+                 let mut _34: u32;
+                 let mut _35: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _36: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _37: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _38: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _39: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _40: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _41: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 let mut _42: &mut {async fn body of ActionPermit<'_, T>::perform()};
+                 scope 7 {
+                     let mut _17: std::future::Ready<()>;
+                     scope 8 {
+                         let _28: ();
+                         scope 9 {
+                         }
+                     }
+                     scope 10 (inlined ready::<()>) {
+                         let mut _43: std::option::Option<()>;
+                     }
+                 }
+             }
          }
+         scope 5 (inlined Pin::<&mut {async fn body of ActionPermit<'_, T>::perform()}>::new_unchecked) {
+         }
      }
+     scope 4 (inlined ActionPermit::<'_, T>::perform) {
+     }
  
      bb0: {
          StorageLive(_2);
          StorageLive(_3);
          _3 = move (_1.0: ActionPermit<'_, T>);
-         _2 = ActionPermit::<'_, T>::perform(move _3) -> [return: bb1, unwind unreachable];
-     }
- 
-     bb1: {
+         _2 = {coroutine@$DIR/inline_coroutine_body.rs:25:28: 27:6 (#0)} { self: move _3 };
          StorageDead(_3);
          StorageLive(_4);
          StorageLive(_5);
          _5 = &mut _2;
-         _4 = Pin::<&mut {async fn body of ActionPermit<'_, T>::perform()}>::new_unchecked(move _5) -> [return: bb2, unwind unreachable];
-     }
- 
-     bb2: {
+         _4 = Pin::<&mut {async fn body of ActionPermit<'_, T>::perform()}> { __pointer: _5 };
          StorageDead(_5);
          StorageLive(_6);
          StorageLive(_7);
          StorageLive(_8);
          _8 = move _4;
          StorageLive(_9);
          _10 = deref_copy (_1.1: &mut std::task::Context<'_>);
          _9 = &mut (*_10);
-         _7 = <{async fn body of ActionPermit<'_, T>::perform()} as Future>::poll(move _8, move _9) -> [return: bb3, unwind unreachable];
+         StorageLive(_13);
+         StorageLive(_17);
+         StorageLive(_18);
+         StorageLive(_27);
+         StorageLive(_29);
+         StorageLive(_32);
+         StorageLive(_33);
+         StorageLive(_34);
+         StorageLive(_35);
+         StorageLive(_36);
+         StorageLive(_37);
+         StorageLive(_38);
+         StorageLive(_39);
+         StorageLive(_40);
+         StorageLive(_41);
+         StorageLive(_42);
+         _35 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         _34 = discriminant((*_35));
+         switchInt(move _34) -> [0: bb3, 1: bb13, 3: bb12, otherwise: bb8];
      }
  
-     bb3: {
+     bb1: {
+         StorageDead(_2);
+         return;
+     }
+ 
+     bb2: {
+         StorageDead(_42);
+         StorageDead(_41);
+         StorageDead(_40);
+         StorageDead(_39);
+         StorageDead(_38);
+         StorageDead(_37);
+         StorageDead(_36);
+         StorageDead(_35);
+         StorageDead(_34);
+         StorageDead(_33);
+         StorageDead(_32);
+         StorageDead(_29);
+         StorageDead(_27);
+         StorageDead(_18);
+         StorageDead(_17);
+         StorageDead(_13);
          StorageDead(_9);
          StorageDead(_8);
          StorageDead(_7);
          _6 = const ();
          StorageDead(_6);
          _0 = const ();
          StorageDead(_4);
-         drop(_2) -> [return: bb4, unwind unreachable];
+         _11 = &raw mut _2;
+         _12 = std::ptr::drop_in_place::<{async fn body of ActionPermit<'_, T>::perform()}>(move _11) -> [return: bb1, unwind unreachable];
      }
  
+     bb3: {
+         _33 = move _9;
+         _36 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         _37 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         (((*_36) as variant#3).0: ActionPermit<'_, T>) = move ((*_37).0: ActionPermit<'_, T>);
+         StorageLive(_14);
+         StorageLive(_15);
+         StorageLive(_16);
+         _16 = ();
+         StorageLive(_43);
+         _43 = Option::<()>::Some(_16);
+         _15 = std::future::Ready::<()>(move _43);
+         StorageDead(_43);
+         StorageDead(_16);
+         _14 = <std::future::Ready<()> as IntoFuture>::into_future(move _15) -> [return: bb4, unwind unreachable];
+     }
+ 
      bb4: {
-         StorageDead(_2);
-         return;
+         StorageDead(_15);
+         _38 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         (((*_38) as variant#3).1: std::future::Ready<()>) = move _14;
+         goto -> bb5;
+     }
+ 
+     bb5: {
+         StorageLive(_19);
+         StorageLive(_20);
+         StorageLive(_21);
+         StorageLive(_22);
+         StorageLive(_23);
+         _39 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         _23 = &mut (((*_39) as variant#3).1: std::future::Ready<()>);
+         _22 = &mut (*_23);
+         _21 = Pin::<&mut std::future::Ready<()>>::new_unchecked(move _22) -> [return: bb6, unwind unreachable];
+     }
+ 
+     bb6: {
+         StorageDead(_22);
+         StorageLive(_24);
+         StorageLive(_25);
+         StorageLive(_26);
+         _26 = _33;
+         _25 = move _26;
+         _24 = &mut (*_25);
+         StorageDead(_26);
+         _20 = <std::future::Ready<()> as Future>::poll(move _21, move _24) -> [return: bb7, unwind unreachable];
+     }
+ 
+     bb7: {
+         StorageDead(_24);
+         StorageDead(_21);
+         _27 = discriminant(_20);
+         switchInt(move _27) -> [0: bb10, 1: bb9, otherwise: bb8];
+     }
+ 
+     bb8: {
+         unreachable;
+     }
+ 
+     bb9: {
+         _19 = const ();
+         StorageDead(_25);
+         StorageDead(_23);
+         StorageDead(_20);
+         StorageDead(_19);
+         StorageLive(_30);
+         StorageLive(_31);
+         _31 = ();
+         _7 = Poll::<()>::Pending;
+         StorageDead(_14);
+         StorageDead(_30);
+         StorageDead(_31);
+         _40 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         discriminant((*_40)) = 3;
+         goto -> bb2;
+     }
+ 
+     bb10: {
+         StorageLive(_28);
+         _28 = ((_20 as Ready).0: ());
+         _32 = _28;
+         StorageDead(_28);
+         StorageDead(_25);
+         StorageDead(_23);
+         StorageDead(_20);
+         StorageDead(_19);
+         StorageDead(_14);
+         _41 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         drop((((*_41) as variant#3).0: ActionPermit<'_, T>)) -> [return: bb11, unwind unreachable];
+     }
+ 
+     bb11: {
+         _7 = Poll::<()>::Ready(move _32);
+         _42 = deref_copy (_8.0: &mut {async fn body of ActionPermit<'_, T>::perform()});
+         discriminant((*_42)) = 1;
+         goto -> bb2;
+     }
+ 
+     bb12: {
+         StorageLive(_14);
+         StorageLive(_30);
+         StorageLive(_31);
+         _30 = move _9;
+         StorageDead(_31);
+         _33 = move _30;
+         StorageDead(_30);
+         _18 = const ();
+         goto -> bb5;
+     }
+ 
+     bb13: {
+         assert(const false, "`async fn` resumed after completion") -> [success: bb13, unwind unreachable];
      }
  }
  
