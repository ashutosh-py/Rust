- // MIR for `borrowed_aggregate` before SimplifyStaticSwitch
+ // MIR for `borrowed_aggregate` after SimplifyStaticSwitch
  
  fn borrowed_aggregate(_1: bool) -> bool {
      debug cond => _1;
      let mut _0: bool;
      let mut _2: Foo;
      let mut _3: bool;
      let mut _5: isize;
      scope 1 {
          debug foo => _2;
          let _4: &mut Foo;
          scope 2 {
              debug bar => _4;
          }
      }
  
      bb0: {
          StorageLive(_2);
          StorageLive(_3);
          _3 = _1;
          switchInt(move _3) -> [0: bb2, otherwise: bb1];
      }
  
      bb1: {
          _2 = Foo::A;
          goto -> bb3;
      }
  
      bb2: {
          _2 = Foo::B;
          goto -> bb3;
      }
  
      bb3: {
          StorageDead(_3);
          StorageLive(_4);
          _4 = &mut _2;
          _5 = discriminant(_2);
          switchInt(move _5) -> [0: bb5, 1: bb6, 2: bb6, otherwise: bb4];
      }
  
      bb4: {
          unreachable;
      }
  
      bb5: {
          _0 = const true;
          goto -> bb7;
      }
  
      bb6: {
          _0 = const false;
          goto -> bb7;
      }
  
      bb7: {
          StorageDead(_4);
          StorageDead(_2);
          return;
      }
  }
  
