- // MIR for `test` before SimplifyComparisonIntegral
+ // MIR for `test` after SimplifyComparisonIntegral
  
  fn test(_1: T) -> () {
      debug x => _1;
      let mut _0: ();
      let _2: &[T];
      let mut _3: &[T; 3];
      let _4: [T; 3];
      let mut _5: usize;
      let mut _6: bool;
      let mut _7: !;
      scope 1 {
          debug v => _2;
          scope 2 {
              debug (*(v1: &T)) => (*_2)[0 of 3];
              debug (*(v2: &T)) => (*_2)[1 of 3];
              debug (*(v3: &T)) => (*_2)[2 of 3];
          }
      }
  
      bb0: {
          StorageLive(_3);
          StorageLive(_4);
          _4 = [_1, _1, _1];
          _3 = &_4;
          _2 = move _3 as &[T] (PointerCoercion(Unsize));
          StorageDead(_3);
          _5 = const 3_usize;
          _6 = const true;
          goto -> bb2;
      }
  
      bb1: {
          _7 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind unreachable;
      }
  
      bb2: {
          StorageDead(_4);
          return;
      }
  }
  
