- // MIR for `opt1` before EarlyOtherwiseBranch
+ // MIR for `opt1` after EarlyOtherwiseBranch
  
  fn opt1(_1: Option<u32>, _2: Option<u32>, _3: Option<u32>) -> u32 {
      debug x => _1;
      debug y => _2;
      debug z => _3;
      let mut _0: u32;
      let mut _4: (std::option::Option<u32>, std::option::Option<u32>, std::option::Option<u32>);
      let mut _5: std::option::Option<u32>;
      let mut _6: std::option::Option<u32>;
      let mut _7: std::option::Option<u32>;
      let mut _8: isize;
      let mut _9: isize;
      let mut _10: isize;
      let mut _11: isize;
      let mut _12: isize;
      let _13: u32;
      let _14: u32;
      let _15: u32;
+     let mut _16: isize;
+     let mut _17: bool;
      scope 1 {
          debug a => _13;
          debug b => _14;
          debug c => _15;
      }
  
      bb0: {
          StorageLive(_4);
          StorageLive(_5);
          _5 = _1;
          StorageLive(_6);
          _6 = _2;
          StorageLive(_7);
          _7 = _3;
          _4 = (move _5, move _6, move _7);
          StorageDead(_7);
          StorageDead(_6);
          StorageDead(_5);
          _12 = discriminant((_4.0: std::option::Option<u32>));
-         switchInt(move _12) -> [0: bb2, 1: bb4, otherwise: bb9];
+         StorageLive(_16);
+         _16 = discriminant((_4.1: std::option::Option<u32>));
+         StorageLive(_17);
+         _17 = Ne(_12, move _16);
+         StorageDead(_16);
+         switchInt(move _17) -> [0: bb8, otherwise: bb1];
      }
  
      bb1: {
+         StorageDead(_17);
          _0 = const 1_u32;
-         goto -> bb8;
+         goto -> bb6;
      }
  
      bb2: {
-         _9 = discriminant((_4.1: std::option::Option<u32>));
-         switchInt(move _9) -> [0: bb3, otherwise: bb1];
-     }
- 
-     bb3: {
          _8 = discriminant((_4.2: std::option::Option<u32>));
-         switchInt(move _8) -> [0: bb7, otherwise: bb1];
+         switchInt(move _8) -> [0: bb5, otherwise: bb1];
      }
  
-     bb4: {
-         _11 = discriminant((_4.1: std::option::Option<u32>));
-         switchInt(move _11) -> [1: bb5, otherwise: bb1];
-     }
- 
-     bb5: {
+     bb3: {
          _10 = discriminant((_4.2: std::option::Option<u32>));
-         switchInt(move _10) -> [1: bb6, otherwise: bb1];
+         switchInt(move _10) -> [1: bb4, otherwise: bb1];
      }
  
-     bb6: {
+     bb4: {
          StorageLive(_13);
          _13 = (((_4.0: std::option::Option<u32>) as Some).0: u32);
          StorageLive(_14);
          _14 = (((_4.1: std::option::Option<u32>) as Some).0: u32);
          StorageLive(_15);
          _15 = (((_4.2: std::option::Option<u32>) as Some).0: u32);
          _0 = const 0_u32;
          StorageDead(_15);
          StorageDead(_14);
          StorageDead(_13);
-         goto -> bb8;
+         goto -> bb6;
      }
  
-     bb7: {
+     bb5: {
          _0 = const 0_u32;
-         goto -> bb8;
+         goto -> bb6;
      }
  
-     bb8: {
+     bb6: {
          StorageDead(_4);
          return;
      }
  
-     bb9: {
+     bb7: {
          unreachable;
+     }
+ 
+     bb8: {
+         StorageDead(_17);
+         switchInt(_12) -> [0: bb2, 1: bb3, otherwise: bb7];
      }
  }
  
