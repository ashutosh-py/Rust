error[E0796]: creating a shared reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:36:18
   |
LL |         let _y = &X;
   |                  ^^ shared reference to mutable static
   |
   = note: shared references to mutable statics are dangerous since if there's any kind of mutation of, or mutable reference created for, that static while the reference lives, that's undefined behavior
help: use `addr_of!` instead to create a raw pointer
   |
LL |         let _y = addr_of!(X);
   |                  ~~~~~~~~~ +

error[E0796]: creating a mutable reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:40:18
   |
LL |         let _y = &mut X;
   |                  ^^^^^^ mutable reference to mutable static
   |
   = note: mutable references to mutable statics are dangerous since if there's any other pointer used or reference created for that static while the reference lives, that's undefined behavior
help: use `addr_of_mut!` instead to create a raw pointer
   |
LL |         let _y = addr_of_mut!(X);
   |                  ~~~~~~~~~~~~~ +

error[E0796]: creating a shared reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:48:22
   |
LL |         let ref _a = X;
   |                      ^ shared reference to mutable static
   |
   = note: shared references to mutable statics are dangerous since if there's any kind of mutation of, or mutable reference created for, that static while the reference lives, that's undefined behavior

error[E0796]: creating a shared reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:52:25
   |
LL |         let (_b, _c) = (&X, &Y);
   |                         ^^ shared reference to mutable static
   |
   = note: shared references to mutable statics are dangerous since if there's any kind of mutation of, or mutable reference created for, that static while the reference lives, that's undefined behavior
help: use `addr_of!` instead to create a raw pointer
   |
LL |         let (_b, _c) = (addr_of!(X), &Y);
   |                         ~~~~~~~~~ +

error[E0796]: creating a shared reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:52:29
   |
LL |         let (_b, _c) = (&X, &Y);
   |                             ^^ shared reference to mutable static
   |
   = note: shared references to mutable statics are dangerous since if there's any kind of mutation of, or mutable reference created for, that static while the reference lives, that's undefined behavior
help: use `addr_of!` instead to create a raw pointer
   |
LL |         let (_b, _c) = (&X, addr_of!(Y));
   |                             ~~~~~~~~~ +

error[E0796]: creating a shared reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:58:13
   |
LL |         foo(&X);
   |             ^^ shared reference to mutable static
   |
   = note: shared references to mutable statics are dangerous since if there's any kind of mutation of, or mutable reference created for, that static while the reference lives, that's undefined behavior
help: use `addr_of!` instead to create a raw pointer
   |
LL |         foo(addr_of!(X));
   |             ~~~~~~~~~ +

error[E0796]: creating a reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:67:17
   |
LL |         let _ = Z[0];
   |                 ^^^^ reference to mutable static
   |
   = note: shared references to mutable statics are dangerous since if there's any kind of mutation of, or mutable reference created for, that static while the reference lives, that's undefined behavior
   = note: mutable references to mutable statics are dangerous since if there's any other pointer used or reference created for that static while the reference lives, that's undefined behavior

error[E0796]: creating a shared reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:70:33
   |
LL |         let _ = format!("{:?}", Z);
   |                                 ^ shared reference to mutable static
   |
   = note: shared references to mutable statics are dangerous since if there's any kind of mutation of, or mutable reference created for, that static while the reference lives, that's undefined behavior

error[E0796]: creating a shared reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:74:18
   |
LL |         let _v = &A.value;
   |                  ^^^^^^^^ shared reference to mutable static
   |
   = note: shared references to mutable statics are dangerous since if there's any kind of mutation of, or mutable reference created for, that static while the reference lives, that's undefined behavior
help: use `addr_of!` instead to create a raw pointer
   |
LL |         let _v = addr_of!(A.value);
   |                  ~~~~~~~~~       +

error[E0796]: creating a shared reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:78:18
   |
LL |         let _s = &A.s.value;
   |                  ^^^^^^^^^^ shared reference to mutable static
   |
   = note: shared references to mutable statics are dangerous since if there's any kind of mutation of, or mutable reference created for, that static while the reference lives, that's undefined behavior
help: use `addr_of!` instead to create a raw pointer
   |
LL |         let _s = addr_of!(A.s.value);
   |                  ~~~~~~~~~         +

error[E0796]: creating a shared reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:82:22
   |
LL |         let ref _v = A.value;
   |                      ^^^^^^^ shared reference to mutable static
   |
   = note: shared references to mutable statics are dangerous since if there's any kind of mutation of, or mutable reference created for, that static while the reference lives, that's undefined behavior

error[E0796]: creating a mutable reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:14:14
   |
LL |         &mut ($x.0)
   |              ^^^^^^ mutable reference to mutable static
...
LL |         let _x = bar!(FOO);
   |                  --------- in this macro invocation
   |
   = note: mutable references to mutable statics are dangerous since if there's any other pointer used or reference created for that static while the reference lives, that's undefined behavior
   = note: this error originates in the macro `bar` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0796]: creating a shared reference to a mutable static
  --> $DIR/ref-to-mut-static.rs:64:17
   |
LL |         let _ = Z.len();
   |                 ^^^^^^^ shared reference to mutable static
   |
   = note: shared references to mutable statics are dangerous since if there's any kind of mutation of, or mutable reference created for, that static while the reference lives, that's undefined behavior

error: aborting due to 13 previous errors

For more information about this error, try `rustc --explain E0796`.
