error[E0004]: match is non-exhaustive
  --> $DIR/non-exhaustive-pattern-witness.rs:7:11
   |
LL |     match (Foo { first: true, second: None }) {
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pattern `Foo { first: false, second: Some([_, _, _, _]) }` not covered
   |
note: `Foo` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:1:8
   |
LL | struct Foo {
   |        ^^^
   = note: the matched value is of type `Foo`
help: ensure that all possible cases are being handled by adding an arm to handle the `Foo { first: false, second: Some([_, _, _, _]) }` case
   |
LL ~         Foo { first: false, second: Some([1, 2, 3, 4]) } => (),
LL +         Foo { first: false, second: Some([_, _, _, _]) } => { todo!() }
   |

error[E0004]: match is non-exhaustive
  --> $DIR/non-exhaustive-pattern-witness.rs:23:11
   |
LL |     match Color::Red {
   |           ^^^^^^^^^^ pattern `Color::Red` not covered
   |
note: `Color` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:16:6
   |
LL | enum Color {
   |      ^^^^^
LL |     Red,
   |     --- not covered
   = note: the matched value is of type `Color`
help: ensure that all possible cases are being handled by adding an arm to handle the `Color::Red` case
   |
LL ~         Color::Green => (),
LL +         Color::Red => { todo!() }
   |

error[E0004]: match is non-exhaustive
  --> $DIR/non-exhaustive-pattern-witness.rs:35:11
   |
LL |     match Direction::North {
   |           ^^^^^^^^^^^^^^^^ patterns `Direction::East`, `Direction::South` and `Direction::West` not covered
   |
note: `Direction` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:30:6
   |
LL | enum Direction {
   |      ^^^^^^^^^
LL |     North, East, South, West
   |            ----  -----  ---- not covered
   |            |     |
   |            |     not covered
   |            not covered
   = note: the matched value is of type `Direction`
help: ensure that all possible cases are being handled by adding more match arms
   |
LL ~         Direction::North => (),
LL +         Direction::East => { todo!() }
LL +         Direction::South => { todo!() }
LL +         Direction::West => { todo!() }
   |

error[E0004]: match is non-exhaustive
  --> $DIR/non-exhaustive-pattern-witness.rs:46:11
   |
LL |     match ExcessiveEnum::First {
   |           ^^^^^^^^^^^^^^^^^^^^ patterns `ExcessiveEnum::Second`, `ExcessiveEnum::Third`, `ExcessiveEnum::Fourth` and 8 more not covered
   |
note: `ExcessiveEnum` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:41:6
   |
LL | enum ExcessiveEnum {
   |      ^^^^^^^^^^^^^
LL |     First, Second, Third, Fourth, Fifth, Sixth, Seventh, Eighth, Ninth, Tenth, Eleventh, Twelfth
   |            ------  -----  ------  -----  ----- not covered
   |            |       |      |       |
   |            |       |      |       not covered
   |            |       |      not covered
   |            |       not covered
   |            not covered
   = note: the matched value is of type `ExcessiveEnum`
help: ensure that all possible cases are being handled by adding more match arms
   |
LL ~         ExcessiveEnum::First => (),
LL +         ExcessiveEnum::Second => { todo!() }
LL +         ExcessiveEnum::Third => { todo!() }
LL +         ExcessiveEnum::Fourth => { todo!() }
LL +         _ => { todo!() }
   |

error[E0004]: match is non-exhaustive
  --> $DIR/non-exhaustive-pattern-witness.rs:53:11
   |
LL |     match Color::Red {
   |           ^^^^^^^^^^ pattern `Color::CustomRGBA { a: true, .. }` not covered
   |
note: `Color` defined here
  --> $DIR/non-exhaustive-pattern-witness.rs:16:6
   |
LL | enum Color {
   |      ^^^^^
...
LL |     CustomRGBA { a: bool, r: u8, g: u8, b: u8 }
   |     ---------- not covered
   = note: the matched value is of type `Color`
help: ensure that all possible cases are being handled by adding an arm to handle the `Color::CustomRGBA { a: true, .. }` case
   |
LL ~         Color::CustomRGBA { a: false, r: _, g: _, b: _ } => (),
LL +         Color::CustomRGBA { a: true, .. } => { todo!() }
   |

error[E0004]: match is non-exhaustive
  --> $DIR/non-exhaustive-pattern-witness.rs:69:11
   |
LL |     match *x {
   |           ^^ pattern `[Enum::Second(true), Enum::Second(false)]` not covered
   |
   = note: the matched value is of type `[Enum]`
help: ensure that all possible cases are being handled by adding an arm to handle the `[Enum::Second(true), Enum::Second(false)]` case
   |
LL ~         [_, _, ref tail @ .., _] => (),
LL +         [Enum::Second(true), Enum::Second(false)] => { todo!() }
   |

error[E0004]: match is non-exhaustive
  --> $DIR/non-exhaustive-pattern-witness.rs:82:11
   |
LL |     match ((), false) {
   |           ^^^^^^^^^^^ pattern `((), false)` not covered
   |
   = note: the matched value is of type `((), bool)`
help: ensure that all possible cases are being handled by adding an arm to handle the `((), false)` case
   |
LL ~         ((), true) => (),
LL +         ((), false) => { todo!() }
   |

error: aborting due to 7 previous errors

For more information about this error, try `rustc --explain E0004`.
