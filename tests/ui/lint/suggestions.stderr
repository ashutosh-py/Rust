warning: denote infinite loops with `loop { ... }`
  --> $DIR/suggestions.rs:45:5
   |
LL |     while true {
   |     ^^^^^^^^^^
   |
   = note: `#[warn(while_true)]` on by default
help: use `loop`
   |
LL |     loop {
   |     ~~~~

warning: unnecessary parentheses around assigned value
  --> $DIR/suggestions.rs:48:31
   |
LL |         let mut registry_no = (format!("NX-{}", 74205));
   |                               ^                       ^
   |
note: the lint level is defined here
  --> $DIR/suggestions.rs:4:21
   |
LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`—see Issue #43896
   |                     ^^^^^^^^^^^^^
help: remove these parentheses
   |
LL -         let mut registry_no = (format!("NX-{}", 74205));
LL +         let mut registry_no = format!("NX-{}", 74205);
   |

warning: variable does not need to be mutable
  --> $DIR/suggestions.rs:48:13
   |
LL |         let mut registry_no = (format!("NX-{}", 74205));
   |             ^^^^^^^^^^^^^^^
   |
note: the lint level is defined here
  --> $DIR/suggestions.rs:4:9
   |
LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`—see Issue #43896
   |         ^^^^^^^^^^
help: remove this `mut`
   |
LL -         let mut registry_no = (format!("NX-{}", 74205));
LL +         let registry_no = (format!("NX-{}", 74205));
   |

warning: variable does not need to be mutable
  --> $DIR/suggestions.rs:54:13
   |
LL |           let mut
   |  _____________^
LL | |             b = 1;
   | |_____________^
   |
help: remove this `mut`
   |
LL -         let mut
LL -             b = 1;
LL +         let b = 1;
   |

error: const items should never be `#[no_mangle]`
  --> $DIR/suggestions.rs:6:14
   |
LL | #[no_mangle] const DISCOVERY: usize = 1;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[deny(no_mangle_const_items)]` on by default
help: try a static value
   |
LL | #[no_mangle] pub static DISCOVERY: usize = 1;
   |              ~~~~~~~~~~

warning: functions generic over types or consts must be mangled
  --> $DIR/suggestions.rs:12:1
   |
LL | pub fn defiant<T>(_t: T) {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(no_mangle_generic_items)]` on by default
help: remove this attribute
   |
LL - #[no_mangle]
   |

warning: the `warp_factor:` in this pattern is redundant
  --> $DIR/suggestions.rs:61:23
   |
LL |             Equinox { warp_factor: warp_factor } => {}
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(non_shorthand_field_patterns)]` on by default
help: use shorthand field pattern
   |
LL |             Equinox { warp_factor } => {}
   |                       ~~~~~~~~~~~

error: const items should never be `#[no_mangle]`
  --> $DIR/suggestions.rs:22:18
   |
LL |     #[no_mangle] pub const DAUNTLESS: bool = true;
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: try a static value
   |
LL |     #[no_mangle] pub static DAUNTLESS: bool = true;
   |                  ~~~~~~~~~~

warning: functions generic over types or consts must be mangled
  --> $DIR/suggestions.rs:26:18
   |
LL |     #[no_mangle] pub fn val_jean<T>() {}
   |                  ^^^^^^^^^^^^^^^^^^^^^^^
   |
help: remove this attribute
   |
LL -     #[no_mangle] pub fn val_jean<T>() {}
LL +      pub fn val_jean<T>() {}
   |

error: const items should never be `#[no_mangle]`
  --> $DIR/suggestions.rs:31:18
   |
LL |     #[no_mangle] pub(crate) const VETAR: bool = true;
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: try a static value
   |
LL |     #[no_mangle] pub static VETAR: bool = true;
   |                  ~~~~~~~~~~

warning: functions generic over types or consts must be mangled
  --> $DIR/suggestions.rs:35:18
   |
LL |     #[no_mangle] pub(crate) fn crossfield<T>() {}
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: remove this attribute
   |
LL -     #[no_mangle] pub(crate) fn crossfield<T>() {}
LL +      pub(crate) fn crossfield<T>() {}
   |

error: aborting due to 3 previous errors; 8 warnings emitted

