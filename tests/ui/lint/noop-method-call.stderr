warning: call to `.clone()` on a reference in this situation does nothing
  --> $DIR/noop-method-call.rs:15:71
   |
LL |     let non_clone_type_ref_clone: &PlainType<u32> = non_clone_type_ref.clone();
   |                                                                       ^^^^^^^^ unnecessary method call
   |
   = note: the type `PlainType<u32>` does not implement `Clone`, so calling `clone` on `&PlainType<u32>` copies the reference, which does not do anything and can be removed
   = note: `#[warn(noop_method_call)]` on by default

warning: using `.clone()` on a double reference, which returns `&CloneType<u32>` instead of cloning the inner type
  --> $DIR/noop-method-call.rs:22:63
   |
LL |     let clone_type_ref_clone: &CloneType<u32> = clone_type_ref.clone();
   |                                                               ^^^^^^^^
   |
   = note: `#[warn(suspicious_double_ref_op)]` on by default

warning: call to `.deref()` on a reference in this situation does nothing
  --> $DIR/noop-method-call.rs:26:63
   |
LL |     let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();
   |                                                               ^^^^^^^^ unnecessary method call
   |
   = note: the type `PlainType<u32>` does not implement `Deref`, so calling `deref` on `&PlainType<u32>` copies the reference, which does not do anything and can be removed

warning: using `.deref()` on a double reference, which returns `&PlainType<u32>` instead of dereferencing the inner type
  --> $DIR/noop-method-call.rs:30:63
   |
LL |     let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();
   |                                                               ^^^^^^^^

warning: call to `.borrow()` on a reference in this situation does nothing
  --> $DIR/noop-method-call.rs:34:66
   |
LL |     let non_borrow_type_borrow: &PlainType<u32> = non_borrow_type.borrow();
   |                                                                  ^^^^^^^^^ unnecessary method call
   |
   = note: the type `PlainType<u32>` does not implement `Borrow`, so calling `borrow` on `&PlainType<u32>` copies the reference, which does not do anything and can be removed

warning: using `.clone()` on a double reference, which returns `&str` instead of cloning the inner type
  --> $DIR/noop-method-call.rs:42:44
   |
LL |     let _v: Vec<&str> = xs.iter().map(|x| x.clone()).collect(); // could use `*x` instead
   |                                            ^^^^^^^^

warning: call to `.clone()` on a reference in this situation does nothing
  --> $DIR/noop-method-call.rs:47:19
   |
LL |     non_clone_type.clone();
   |                   ^^^^^^^^ unnecessary method call
   |
   = note: the type `PlainType<T>` does not implement `Clone`, so calling `clone` on `&PlainType<T>` copies the reference, which does not do anything and can be removed

warning: call to `.clone()` on a reference in this situation does nothing
  --> $DIR/noop-method-call.rs:52:19
   |
LL |     non_clone_type.clone();
   |                   ^^^^^^^^ unnecessary method call
   |
   = note: the type `PlainType<u32>` does not implement `Clone`, so calling `clone` on `&PlainType<u32>` copies the reference, which does not do anything and can be removed

warning: 8 warnings emitted

