//@ check-fail
//@ run-rustfix

#![deny(dropping_references)]

struct SomeStruct;

#[allow(unused_mut, unused_variables)]
fn main() {
     //~ ERROR calls to `std::mem::drop`

    let mut owned1 = SomeStruct;
     //~ ERROR calls to `std::mem::drop`
     //~ ERROR calls to `std::mem::drop`
     //~ ERROR calls to `std::mem::drop`
    drop(owned1);

    let reference1 = &SomeStruct;
     //~ ERROR calls to `std::mem::drop`

    let reference2 = &mut SomeStruct;
     //~ ERROR calls to `std::mem::drop`

    let ref reference3 = SomeStruct;
     //~ ERROR calls to `std::mem::drop`
}

#[allow(dead_code)]
fn test_generic_fn_drop<T>(val: T) {
     //~ ERROR calls to `std::mem::drop`
    drop(val);
}
