error[E0038]: the trait `Trait` cannot be made into an object
  --> $DIR/trait-dyn-in-qualified-path.rs:5:6
   |
LL |     <dyn Trait>::function();
   |      ^^^^^^^^^ `Trait` cannot be made into an object
   |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/trait-dyn-in-qualified-path.rs:1:14
   |
LL | trait Trait: Sized {
   |       -----  ^^^^^ ...because it requires `Self: Sized`
   |       |
   |       this trait cannot be made into an object...
   = help: when writing `<dyn Trait>::function` you are requiring `Trait` be "object safe", which it isn't
help: you might have meant to access the associated function of a specific `impl` to avoid requiring "object safety" from `Trait`, either with some explicit type...
   |
LL |     </* Type */ as Trait>::function();
   |      ~~~~~~~~~~~~~
help: ...or rely on inference if the compiler has enough context to identify the desired type on its own...
   |
LL -     <dyn Trait>::function();
LL +     Trait::function();
   |
help: ...which is equivalent to
   |
LL |     <_ as Trait>::function();
   |      ~~~~

error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time
  --> $DIR/trait-dyn-in-qualified-path.rs:5:6
   |
LL |     <dyn Trait>::function();
   |      ^^^^^^^^^ doesn't have a size known at compile-time
   |
   = help: the trait `Sized` is not implemented for `dyn Trait`
note: required by a bound in `Trait::function`
  --> $DIR/trait-dyn-in-qualified-path.rs:1:14
   |
LL | trait Trait: Sized {
   |              ^^^^^ required by this bound in `Trait::function`
LL |     fn function() {}
   |        -------- required by a bound in this associated function

error: aborting due to 2 previous errors

Some errors have detailed explanations: E0038, E0277.
For more information about an error, try `rustc --explain E0038`.
