error[E0038]: the trait `Trait` cannot be made into an object
  --> $DIR/trait-dyn-in-qualified-path-for-object-safe-function-with-one-impl.rs:8:6
   |
LL |     <dyn Trait>::function();
   |      ^^^^^^^^^ `Trait` cannot be made into an object
   |
note: for a trait to be "object safe" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>
  --> $DIR/trait-dyn-in-qualified-path-for-object-safe-function-with-one-impl.rs:2:8
   |
LL | trait Trait {
   |       ----- this trait cannot be made into an object...
LL |     fn function() {}
   |        ^^^^^^^^ ...because associated function `function` has no `self` parameter
   = help: only type `()` implements the trait, consider using it directly instead
help: consider turning `function` into a method by giving it a `&self` argument
   |
LL |     fn function(&self) {}
   |                 +++++
help: alternatively, consider constraining `function` so it does not apply to trait objects
   |
LL |     fn function() where Self: Sized {}
   |                   +++++++++++++++++

error: aborting due to 1 previous error

For more information about this error, try `rustc --explain E0038`.
