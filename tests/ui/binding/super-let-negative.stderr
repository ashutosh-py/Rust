error[E0597]: `y` does not live long enough
  --> $DIR/super-let-negative.rs:14:9
   |
LL |     let x = id({
   |         - borrow later stored here
LL |         super let y = 1;
   |                   - binding `y` declared here
LL |         &y
   |         ^^ borrowed value does not live long enough
LL |     }); // ... because `y` is freed here
   |      - `y` dropped here while still borrowed

error[E0716]: temporary value dropped while borrowed
  --> $DIR/super-let-negative.rs:16:17
   |
LL |     let x = id(&foo());
   |         -       ^^^^^- temporary value is freed at the end of this statement
   |         |       |
   |         |       creates a temporary value which is freed while still in use
   |         borrow later stored here
   |
help: consider using a `let` binding to create a longer lived value
   |
LL ~     let binding = foo();
LL ~     let x = id(&binding);
   |

error: aborting due to 2 previous errors

Some errors have detailed explanations: E0597, E0716.
For more information about an error, try `rustc --explain E0597`.
