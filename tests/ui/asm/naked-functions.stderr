error: the `in` operand cannot be used with `naked_asm!`
  --> $DIR/naked-functions.rs:41:29
   |
LL |     naked_asm!("/* {0} */", in(reg) a, options(noreturn))
   |                             ^^ the `in` operand is not meaningful for global-scoped inline assembly, remove it

error: the `in` operand cannot be used with `naked_asm!`
  --> $DIR/naked-functions.rs:62:10
   |
LL |          in(reg) a,
   |          ^^ the `in` operand is not meaningful for global-scoped inline assembly, remove it

error: the `nomem` option cannot be used with `naked_asm!`
  --> $DIR/naked-functions.rs:104:28
   |
LL |     naked_asm!("", options(nomem, preserves_flags, noreturn));
   |                            ^^^^^ the `nomem` option is not meaningful for global-scoped inline assembly

error: the `preserves_flags` option cannot be used with `naked_asm!`
  --> $DIR/naked-functions.rs:104:35
   |
LL |     naked_asm!("", options(nomem, preserves_flags, noreturn));
   |                                   ^^^^^^^^^^^^^^^ the `preserves_flags` option is not meaningful for global-scoped inline assembly

error: the `readonly` option cannot be used with `naked_asm!`
  --> $DIR/naked-functions.rs:111:28
   |
LL |     naked_asm!("", options(readonly, nostack), options(pure));
   |                            ^^^^^^^^ the `readonly` option is not meaningful for global-scoped inline assembly

error: the `nostack` option cannot be used with `naked_asm!`
  --> $DIR/naked-functions.rs:111:38
   |
LL |     naked_asm!("", options(readonly, nostack), options(pure));
   |                                      ^^^^^^^ the `nostack` option is not meaningful for global-scoped inline assembly

error: the `pure` option cannot be used with `naked_asm!`
  --> $DIR/naked-functions.rs:111:56
   |
LL |     naked_asm!("", options(readonly, nostack), options(pure));
   |                                                        ^^^^ the `pure` option is not meaningful for global-scoped inline assembly

error: the `may_unwind` option cannot be used with `naked_asm!`
  --> $DIR/naked-functions.rs:120:38
   |
LL |     naked_asm!("", options(noreturn, may_unwind));
   |                                      ^^^^^^^^^^ the `may_unwind` option is not meaningful for global-scoped inline assembly

error: this is a user specified error
  --> $DIR/naked-functions.rs:168:5
   |
LL |     compile_error!("this is a user specified error")
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: this is a user specified error
  --> $DIR/naked-functions.rs:174:5
   |
LL |     compile_error!("this is a user specified error");
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: asm template must be a string literal
  --> $DIR/naked-functions.rs:181:16
   |
LL |     naked_asm!(invalid_syntax)
   |                ^^^^^^^^^^^^^^

error: patterns not allowed in naked function parameters
  --> $DIR/naked-functions.rs:19:5
   |
LL |     mut a: u32,
   |     ^^^^^

error: patterns not allowed in naked function parameters
  --> $DIR/naked-functions.rs:21:5
   |
LL |     &b: &i32,
   |     ^^

error: patterns not allowed in naked function parameters
  --> $DIR/naked-functions.rs:23:6
   |
LL |     (None | Some(_)): Option<std::ptr::NonNull<u8>>,
   |      ^^^^^^^^^^^^^^

error: patterns not allowed in naked function parameters
  --> $DIR/naked-functions.rs:25:5
   |
LL |     P { x, y }: P,
   |     ^^^^^^^^^^

error: referencing function parameters is not allowed in naked functions
  --> $DIR/naked-functions.rs:34:5
   |
LL |     a + 1
   |     ^
   |
   = help: follow the calling convention in asm block to use parameters

error[E0787]: naked functions must contain a single asm block
  --> $DIR/naked-functions.rs:32:1
   |
LL | pub unsafe extern "C" fn inc(a: u32) -> u32 {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
LL |
LL |     a + 1
   |     ----- non-asm is unsupported in naked functions

error[E0787]: naked functions must contain a single asm block
  --> $DIR/naked-functions.rs:46:1
   |
LL | pub unsafe extern "C" fn inc_closure(a: u32) -> u32 {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
LL |
LL |     (|| a + 1)()
   |     ------------ non-asm is unsupported in naked functions

error[E0787]: naked functions must contain a single asm block
  --> $DIR/naked-functions.rs:52:1
   |
LL | pub unsafe extern "C" fn unsupported_operands() {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
LL |
LL |     let mut a = 0usize;
   |     ------------------- non-asm is unsupported in naked functions
LL |     let mut b = 0usize;
   |     ------------------- non-asm is unsupported in naked functions
LL |     let mut c = 0usize;
   |     ------------------- non-asm is unsupported in naked functions
LL |     let mut d = 0usize;
   |     ------------------- non-asm is unsupported in naked functions
LL |     let mut e = 0usize;
   |     ------------------- non-asm is unsupported in naked functions

error[E0787]: naked functions must contain a single asm block
  --> $DIR/naked-functions.rs:74:1
   |
LL | pub extern "C" fn missing_assembly() {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0787]: asm in naked functions must use `noreturn` option
  --> $DIR/naked-functions.rs:82:9
   |
LL |         naked_asm!("");
   |         ^^^^^^^^^^^^^^
   |
help: consider specifying that the asm block is responsible for returning from the function
   |
LL |         naked_asm!("", options(noreturn));
   |                      +++++++++++++++++++

error[E0787]: asm in naked functions must use `noreturn` option
  --> $DIR/naked-functions.rs:84:9
   |
LL |         naked_asm!("");
   |         ^^^^^^^^^^^^^^
   |
help: consider specifying that the asm block is responsible for returning from the function
   |
LL |         naked_asm!("", options(noreturn));
   |                      +++++++++++++++++++

error[E0787]: asm in naked functions must use `noreturn` option
  --> $DIR/naked-functions.rs:86:9
   |
LL |         naked_asm!("");
   |         ^^^^^^^^^^^^^^
   |
help: consider specifying that the asm block is responsible for returning from the function
   |
LL |         naked_asm!("", options(noreturn));
   |                      +++++++++++++++++++

error[E0787]: naked functions must contain a single asm block
  --> $DIR/naked-functions.rs:79:1
   |
LL | pub extern "C" fn too_many_asm_blocks() {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
LL |         naked_asm!("");
   |         -------------- multiple asm blocks are unsupported in naked functions
LL |
LL |         naked_asm!("");
   |         -------------- multiple asm blocks are unsupported in naked functions
LL |
LL |         naked_asm!("", options(noreturn));
   |         --------------------------------- multiple asm blocks are unsupported in naked functions

error: referencing function parameters is not allowed in naked functions
  --> $DIR/naked-functions.rs:96:11
   |
LL |         *&y
   |           ^
   |
   = help: follow the calling convention in asm block to use parameters

error[E0787]: naked functions must contain a single asm block
  --> $DIR/naked-functions.rs:94:5
   |
LL |     pub extern "C" fn inner(y: usize) -> usize {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
LL |
LL |         *&y
   |         --- non-asm is unsupported in naked functions

error[E0787]: asm in naked functions must use `noreturn` option
  --> $DIR/naked-functions.rs:111:5
   |
LL |     naked_asm!("", options(readonly, nostack), options(pure));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: consider specifying that the asm block is responsible for returning from the function
   |
LL |     naked_asm!("", options(noreturn), options(readonly, nostack), options(pure));
   |                  +++++++++++++++++++

warning: Rust ABI is unsupported in naked functions
  --> $DIR/naked-functions.rs:125:1
   |
LL | pub unsafe fn default_abi() {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(undefined_naked_function_abi)]` on by default

warning: Rust ABI is unsupported in naked functions
  --> $DIR/naked-functions.rs:131:1
   |
LL | pub unsafe fn rust_abi() {
   | ^^^^^^^^^^^^^^^^^^^^^^^^

error: aborting due to 27 previous errors; 2 warnings emitted

For more information about this error, try `rustc --explain E0787`.
