error[E0004]: non-exhaustive patterns: `Err(_)` not covered
  --> $DIR/uninhabited-matches-feature-gated.rs:6:19
   |
LL |     let _ = match x {
   |                   ^ pattern `Err(_)` not covered
   |
note: `Result<u32, &Void>` defined here
  --> $SRC_DIR/core/src/result.rs:LL:COL
  ::: $SRC_DIR/core/src/result.rs:LL:COL
   |
   = note: not covered
   = note: the matched value is of type `Result<u32, &Void>`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         Ok(n) => n,
LL ~         Err(_) => todo!(),
   |

error[E0004]: non-exhaustive patterns: type `&Void` is non-empty
  --> $DIR/uninhabited-matches-feature-gated.rs:17:19
   |
LL |     let _ = match x {};
   |                   ^
   |
note: `Void` defined here
  --> $DIR/uninhabited-matches-feature-gated.rs:2:6
   |
LL | enum Void {}
   |      ^^^^
   = note: the matched value is of type `&Void`
   = note: references are always considered inhabited
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown
   |
LL ~     let _ = match x {
LL +         _ => todo!(),
LL ~     };
   |

error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty
  --> $DIR/uninhabited-matches-feature-gated.rs:21:19
   |
LL |     let _ = match x {};
   |                   ^
   |
   = note: the matched value is of type `(Void,)`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown
   |
LL ~     let _ = match x {
LL +         _ => todo!(),
LL ~     };
   |

error[E0004]: non-exhaustive patterns: type `[Void; 1]` is non-empty
  --> $DIR/uninhabited-matches-feature-gated.rs:25:19
   |
LL |     let _ = match x {};
   |                   ^
   |
   = note: the matched value is of type `[Void; 1]`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern as shown
   |
LL ~     let _ = match x {
LL +         _ => todo!(),
LL ~     };
   |

error[E0004]: non-exhaustive patterns: `&[_, ..]` not covered
  --> $DIR/uninhabited-matches-feature-gated.rs:29:19
   |
LL |     let _ = match x {
   |                   ^ pattern `&[_, ..]` not covered
   |
   = note: the matched value is of type `&[Void]`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         &[] => (),
LL ~         &[_, ..] => todo!(),
   |

error[E0004]: non-exhaustive patterns: `Err(_)` not covered
  --> $DIR/uninhabited-matches-feature-gated.rs:39:19
   |
LL |     let _ = match x {
   |                   ^ pattern `Err(_)` not covered
   |
note: `Result<u32, Void>` defined here
  --> $SRC_DIR/core/src/result.rs:LL:COL
  ::: $SRC_DIR/core/src/result.rs:LL:COL
   |
   = note: not covered
   = note: the matched value is of type `Result<u32, Void>`
help: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown
   |
LL ~         Ok(x) => x,
LL ~         Err(_) => todo!(),
   |

error[E0005]: refutable pattern in local binding
  --> $DIR/uninhabited-matches-feature-gated.rs:45:9
   |
LL |     let Ok(x) = x;
   |         ^^^^^ pattern `Err(_)` not covered
   |
   = note: `let` bindings require an "irrefutable pattern", like a `struct` or an `enum` with only one variant
   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html
   = note: the matched value is of type `Result<u32, Void>`
help: you might want to use `let else` to handle the variant that isn't matched
   |
LL |     let Ok(x) = x else { todo!() };
   |                   ++++++++++++++++

warning: the type `&Void` does not permit zero-initialization
  --> $DIR/uninhabited-matches-feature-gated.rs:15:29
   |
LL |     let x: &Void = unsafe { zeroed() };
   |                             ^^^^^^^^
   |                             |
   |                             this code causes undefined behavior when executed
   |                             help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null
   = note: `#[warn(invalid_value)]` on by default

warning: the type `(Void,)` does not permit zero-initialization
  --> $DIR/uninhabited-matches-feature-gated.rs:19:31
   |
LL |     let x: (Void,) = unsafe { zeroed() };
   |                               ^^^^^^^^ this code causes undefined behavior when executed
   |
note: enums with no inhabited variants have no valid value
  --> $DIR/uninhabited-matches-feature-gated.rs:2:1
   |
LL | enum Void {}
   | ^^^^^^^^^

warning: the type `[Void; 1]` does not permit zero-initialization
  --> $DIR/uninhabited-matches-feature-gated.rs:23:33
   |
LL |     let x: [Void; 1] = unsafe { zeroed() };
   |                                 ^^^^^^^^ this code causes undefined behavior when executed
   |
note: enums with no inhabited variants have no valid value
  --> $DIR/uninhabited-matches-feature-gated.rs:2:1
   |
LL | enum Void {}
   | ^^^^^^^^^

warning: the type `&[Void]` does not permit zero-initialization
  --> $DIR/uninhabited-matches-feature-gated.rs:27:31
   |
LL |     let x: &[Void] = unsafe { zeroed() };
   |                               ^^^^^^^^
   |                               |
   |                               this code causes undefined behavior when executed
   |                               help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done
   |
   = note: references must be non-null

warning: the type `Void` does not permit zero-initialization
  --> $DIR/uninhabited-matches-feature-gated.rs:34:28
   |
LL |     let x: Void = unsafe { zeroed() };
   |                            ^^^^^^^^ this code causes undefined behavior when executed
   |
note: enums with no inhabited variants have no valid value
  --> $DIR/uninhabited-matches-feature-gated.rs:2:1
   |
LL | enum Void {}
   | ^^^^^^^^^

error: aborting due to 7 previous errors; 5 warnings emitted

Some errors have detailed explanations: E0004, E0005.
For more information about an error, try `rustc --explain E0004`.
