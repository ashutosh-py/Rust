Building stage0 library artifacts (x86_64-unknown-linux-gnu)
Building compiler artifacts (stage0 -> stage1, x86_64-unknown-linux-gnu)
Assembling stage1 compiler
Building stage1 library artifacts (x86_64-unknown-linux-gnu)
Building stage0 tool compiletest (x86_64-unknown-linux-gnu)
Check compiletest suite=ui mode=ui (x86_64-unknown-linux-gnu -> x86_64-unknown-linux-gnu)

running 1 tests
F

failures:

---- [ui] tests/ui/traits/new-solver/dedup-placeholders.rs stdout ----

error: test compilation failed although it shouldn't!
status: exit status: 101
command: "/home/ndrewxie/rust/build/x86_64-unknown-linux-gnu/stage1/bin/rustc" "/home/ndrewxie/rust/tests/ui/traits/new-solver/dedup-placeholders.rs" "-Zthreads=1" "--sysroot" "/home/ndrewxie/rust/build/x86_64-unknown-linux-gnu/stage1" "--target=x86_64-unknown-linux-gnu" "--error-format" "json" "--json" "future-incompat" "-Ccodegen-units=1" "-Zui-testing" "-Zsimulate-remapped-rust-src-base=/rustc/FAKE_PREFIX" "-Ztranslate-remapped-path-to-local-path=no" "-Zdeduplicate-diagnostics=no" "-Cstrip=debuginfo" "--emit" "metadata" "-C" "prefer-dynamic" "--out-dir" "/home/ndrewxie/rust/build/x86_64-unknown-linux-gnu/test/ui/traits/new-solver/dedup-placeholders" "-A" "unused" "-Crpath" "-Cdebuginfo=0" "-Lnative=/home/ndrewxie/rust/build/x86_64-unknown-linux-gnu/native/rust-test-helpers" "-L" "/home/ndrewxie/rust/build/x86_64-unknown-linux-gnu/test/ui/traits/new-solver/dedup-placeholders/auxiliary" "-Ztrait-solver=next"
--- stdout -------------------------------
Computing goal Goal {
    predicate: Binder(TraitPredicate(<Unique<!0> as std::marker::Send>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<Unique<!0> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<Unique<!0> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Consider impl candidate
Computing goal Goal {
    predicate: Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Assembling with goal Goal { predicate: TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Auto trait candidate Goal {
    predicate: TraitPredicate(<!0 as std::marker::Send>, polarity:Positive),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
Disqualify auto trait self ty: !0
Consider implied clause
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
CANDIDATES: [
    Candidate {
        source: ParamEnv(
            0,
        ),
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [
                        ^0,
                    ],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [
                CanonicalVarInfo {
                    kind: PlaceholderTy(
                        Placeholder {
                            universe: U0,
                            bound: BoundTy {
                                var: 0,
                                kind: Anon,
                            },
                        },
                    ),
                },
            ],
        },
    },
]
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Assembling with goal Goal { predicate: TraitPredicate(<Unique<!0> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Auto trait candidate Goal {
    predicate: TraitPredicate(<Unique<!0> as std::marker::Send>, polarity:Positive),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
Disqualify auto trait self ty: Unique<!0>
CANDIDATES: [
    Candidate {
        source: Impl(
            DefId(0:3 ~ dedup_placeholders[a62d]::{impl#0}),
        ),
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [
                        ^0,
                    ],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [
                CanonicalVarInfo {
                    kind: PlaceholderTy(
                        Placeholder {
                            universe: U0,
                            bound: BoundTy {
                                var: 0,
                                kind: Anon,
                            },
                        },
                    ),
                },
            ],
        },
    },
]
Computing goal Goal {
    predicate: Binder(WellFormed(Unique<!0>), []),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::wf
Adding wellformed Goal { predicate: Unique<!0>, param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Wellformed yields subgoals []
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Computing goal Goal {
    predicate: Binder(WellFormed(!0), []),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::wf
Adding wellformed Goal { predicate: !0, param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Wellformed yields subgoals []
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Computing goal Goal {
    predicate: Binder(WellFormed(*const !0), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::wf
Adding wellformed Goal { predicate: *const !0, param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Wellformed yields subgoals []
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Computing goal Goal {
    predicate: Binder(WellFormed(!0), []),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::wf
Adding wellformed Goal { predicate: !0, param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Wellformed yields subgoals []
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Computing goal Goal {
    predicate: Binder(WellFormed(Unique<Node<!0>>), []),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::wf
Adding wellformed Goal { predicate: Unique<Node<!0>>, param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Wellformed yields subgoals [Goal { predicate: Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), []), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }]
Computing goal Goal {
    predicate: Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Consider implied clause
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
CANDIDATES: [
    Candidate {
        source: ParamEnv(
            0,
        ),
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [
                        ^0,
                    ],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [
                CanonicalVarInfo {
                    kind: PlaceholderTy(
                        Placeholder {
                            universe: U0,
                            bound: BoundTy {
                                var: 0,
                                kind: Anon,
                            },
                        },
                    ),
                },
            ],
        },
    },
]
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Computing goal Goal {
    predicate: Binder(WellFormed(()), []),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
            Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::wf
Adding wellformed Goal { predicate: (), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []), Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Wellformed yields subgoals []
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Computing goal Goal {
    predicate: Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
            Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []), Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []), Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Consider implied clause
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
CANDIDATES: [
    Candidate {
        source: ParamEnv(
            1,
        ),
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [
                        ^0,
                    ],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [
                CanonicalVarInfo {
                    kind: PlaceholderTy(
                        Placeholder {
                            universe: U0,
                            bound: BoundTy {
                                var: 0,
                                kind: Anon,
                            },
                        },
                    ),
                },
            ],
        },
    },
]
Computing goal Goal {
    predicate: Binder(WellFormed(!0), []),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
            Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::wf
Adding wellformed Goal { predicate: !0, param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []), Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Wellformed yields subgoals []
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Computing goal Goal {
    predicate: Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
            Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []), Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []), Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Assembling with goal Goal { predicate: TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []), Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Auto trait candidate Goal {
    predicate: TraitPredicate(<!0 as std::marker::Send>, polarity:Positive),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
            Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
Disqualify auto trait self ty: !0
Consider implied clause
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
CANDIDATES: [
    Candidate {
        source: ParamEnv(
            0,
        ),
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [
                        ^0,
                    ],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [
                CanonicalVarInfo {
                    kind: PlaceholderTy(
                        Placeholder {
                            universe: U0,
                            bound: BoundTy {
                                var: 0,
                                kind: Anon,
                            },
                        },
                    ),
                },
            ],
        },
    },
]
Computing goal Goal {
    predicate: Binder(WellFormed(()), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::wf
Adding wellformed Goal { predicate: (), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Wellformed yields subgoals []
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Computing goal Goal {
    predicate: Binder(TraitPredicate(<() as std::marker::Sized>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [
            Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []),
            Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), []),
        ],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<() as std::marker::Sized>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []), Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<() as std::marker::Sized>, polarity:Positive), param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(<!0 as std::marker::Send>, polarity:Positive), []), Binder(TraitPredicate(<!0 as std::marker::Sized>, polarity:Positive), [])], reveal: UserFacing, constness: NotConst } }
Adding []
probe_and_evaluate_goal_for_constituent_tys
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
CANDIDATES: [
    Candidate {
        source: BuiltinImpl,
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [
                        ^0,
                    ],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [
                CanonicalVarInfo {
                    kind: PlaceholderTy(
                        Placeholder {
                            universe: U0,
                            bound: BoundTy {
                                var: 0,
                                kind: Anon,
                            },
                        },
                    ),
                },
            ],
        },
    },
]
Computing goal Goal {
    predicate: Binder(TraitPredicate(<() as std::marker::Sized>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<() as std::marker::Sized>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<() as std::marker::Sized>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Adding []
probe_and_evaluate_goal_for_constituent_tys
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
CANDIDATES: [
    Candidate {
        source: BuiltinImpl,
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [],
        },
    },
]
Computing goal Goal {
    predicate: Binder(WellFormed(Node<&()>), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::wf
Adding wellformed Goal { predicate: Node<&()>, param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Wellformed yields subgoals [Goal { predicate: Binder(TraitPredicate(<&() as std::marker::Sized>, polarity:Positive), []), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }, Goal { predicate: Binder(OutlivesPredicate((), '?0), []), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }]
Computing goal Goal {
    predicate: Binder(TraitPredicate(<&() as std::marker::Sized>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<&() as std::marker::Sized>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<&() as std::marker::Sized>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Adding []
probe_and_evaluate_goal_for_constituent_tys
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
CANDIDATES: [
    Candidate {
        source: BuiltinImpl,
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [
                        ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }),
                    ],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [
                CanonicalVarInfo {
                    kind: Region(
                        U0,
                    ),
                },
            ],
        },
    },
]
Computing goal Goal {
    predicate: Binder(OutlivesPredicate((), '?0), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::typeoutlives
Adding ty outlives Goal { predicate: OutlivesPredicate((), '?0), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
INPUT: QueryRegionConstraints {
    outlives: [
        (
            OutlivesPredicate(
                (),
                '?0,
            ),
            BoringNoLocation,
        ),
    ],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [
        (
            OutlivesPredicate(
                (),
                '?0,
            ),
            BoringNoLocation,
        ),
    ],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
INPUT: QueryRegionConstraints {
    outlives: [
        (
            OutlivesPredicate(
                (),
                '?0,
            ),
            BoringNoLocation,
        ),
    ],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [
        (
            OutlivesPredicate(
                (),
                '?0,
            ),
            BoringNoLocation,
        ),
    ],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Computing goal Goal {
    predicate: Binder(TraitPredicate(<Node<&()> as std::marker::Sized>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<Node<&()> as std::marker::Sized>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<Node<&()> as std::marker::Sized>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Adding []
probe_and_evaluate_goal_for_constituent_tys
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
CANDIDATES: [
    Candidate {
        source: BuiltinImpl,
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [
                        ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }),
                    ],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [
                CanonicalVarInfo {
                    kind: Region(
                        U0,
                    ),
                },
            ],
        },
    },
]
Computing goal Goal {
    predicate: Binder(TraitPredicate(<Node<&()> as std::marker::Send>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<Node<&()> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<Node<&()> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Assembling with goal Goal { predicate: TraitPredicate(<Node<&()> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Auto trait candidate Goal {
    predicate: TraitPredicate(<Node<&()> as std::marker::Send>, polarity:Positive),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
Disqualify auto trait self ty: Node<&()>
Adding [
    Goal {
        predicate: Binder(TraitPredicate(<&() as std::marker::Send>, polarity:Positive), []),
        param_env: ParamEnv {
            caller_bounds: [],
            reveal: UserFacing,
            constness: NotConst,
        },
    },
    Goal {
        predicate: Binder(TraitPredicate(<Unique<Node<&()>> as std::marker::Send>, polarity:Positive), []),
        param_env: ParamEnv {
            caller_bounds: [],
            reveal: UserFacing,
            constness: NotConst,
        },
    },
]
probe_and_evaluate_goal_for_constituent_tys
Computing goal Goal {
    predicate: Binder(TraitPredicate(<&() as std::marker::Send>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<&() as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<&() as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Consider impl candidate
Computing goal Goal {
    predicate: Binder(TraitPredicate(<() as std::marker::Sync>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<() as std::marker::Sync>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<() as std::marker::Sync>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Assembling with goal Goal { predicate: TraitPredicate(<() as std::marker::Sync>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Auto trait candidate Goal {
    predicate: TraitPredicate(<() as std::marker::Sync>, polarity:Positive),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
Disqualify auto trait self ty: ()
Adding []
probe_and_evaluate_goal_for_constituent_tys
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
CANDIDATES: [
    Candidate {
        source: BuiltinImpl,
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [],
        },
    },
]
INPUT: QueryRegionConstraints {
    outlives: [
        (
            OutlivesPredicate(
                '?1,
                '?0,
            ),
            BoringNoLocation,
        ),
        (
            OutlivesPredicate(
                '?0,
                '?1,
            ),
            BoringNoLocation,
        ),
    ],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [
        (
            OutlivesPredicate(
                '?1,
                '?0,
            ),
            BoringNoLocation,
        ),
        (
            OutlivesPredicate(
                '?0,
                '?1,
            ),
            BoringNoLocation,
        ),
    ],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Assembling with goal Goal { predicate: TraitPredicate(<&() as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Auto trait candidate Goal {
    predicate: TraitPredicate(<&() as std::marker::Send>, polarity:Positive),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
Disqualify auto trait self ty: &()
CANDIDATES: [
    Candidate {
        source: Impl(
            DefId(2:2677 ~ core[c742]::marker::{impl#2}),
        ),
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [
                        ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }),
                    ],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [
                                    (
                                        OutlivesPredicate(
                                            ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }),
                                            ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }),
                                        ),
                                        BoringNoLocation,
                                    ),
                                    (
                                        OutlivesPredicate(
                                            ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }),
                                            ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }),
                                        ),
                                        BoringNoLocation,
                                    ),
                                ],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [
                CanonicalVarInfo {
                    kind: Region(
                        U0,
                    ),
                },
                CanonicalVarInfo {
                    kind: Region(
                        U0,
                    ),
                },
            ],
        },
    },
]
Computing goal Goal {
    predicate: Binder(TraitPredicate(<Unique<Node<&()>> as std::marker::Send>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<Unique<Node<&()>> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<Unique<Node<&()>> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Consider impl candidate
INPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Assembling with goal Goal { predicate: TraitPredicate(<Unique<Node<&()>> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Auto trait candidate Goal {
    predicate: TraitPredicate(<Unique<Node<&()>> as std::marker::Send>, polarity:Positive),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
Disqualify auto trait self ty: Unique<Node<&()>>
CANDIDATES: [
    Candidate {
        source: Impl(
            DefId(0:3 ~ dedup_placeholders[a62d]::{impl#0}),
        ),
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [
                        ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }),
                    ],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [
                CanonicalVarInfo {
                    kind: Region(
                        U0,
                    ),
                },
            ],
        },
    },
]
INPUT: QueryRegionConstraints {
    outlives: [
        (
            OutlivesPredicate(
                '?1,
                '?0,
            ),
            BoringNoLocation,
        ),
        (
            OutlivesPredicate(
                '?0,
                '?1,
            ),
            BoringNoLocation,
        ),
    ],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [
        (
            OutlivesPredicate(
                '?1,
                '?0,
            ),
            BoringNoLocation,
        ),
        (
            OutlivesPredicate(
                '?0,
                '?1,
            ),
            BoringNoLocation,
        ),
    ],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
CANDIDATES: [
    Candidate {
        source: BuiltinImpl,
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [
                        ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }),
                    ],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [
                                    (
                                        OutlivesPredicate(
                                            ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }),
                                            ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }),
                                        ),
                                        BoringNoLocation,
                                    ),
                                    (
                                        OutlivesPredicate(
                                            ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }),
                                            ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }),
                                        ),
                                        BoringNoLocation,
                                    ),
                                ],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [
                CanonicalVarInfo {
                    kind: Region(
                        U0,
                    ),
                },
                CanonicalVarInfo {
                    kind: Region(
                        U0,
                    ),
                },
            ],
        },
    },
]
Computing goal Goal {
    predicate: Binder(TraitPredicate(<Node<&()> as std::marker::Send>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<Node<&()> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<Node<&()> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Assembling with goal Goal { predicate: TraitPredicate(<Node<&()> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Auto trait candidate Goal {
    predicate: TraitPredicate(<Node<&()> as std::marker::Send>, polarity:Positive),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
Disqualify auto trait self ty: Node<&()>
Adding [
    Goal {
        predicate: Binder(TraitPredicate(<&() as std::marker::Send>, polarity:Positive), []),
        param_env: ParamEnv {
            caller_bounds: [],
            reveal: UserFacing,
            constness: NotConst,
        },
    },
    Goal {
        predicate: Binder(TraitPredicate(<Unique<Node<&()>> as std::marker::Send>, polarity:Positive), []),
        param_env: ParamEnv {
            caller_bounds: [],
            reveal: UserFacing,
            constness: NotConst,
        },
    },
]
probe_and_evaluate_goal_for_constituent_tys
Computing goal Goal {
    predicate: Binder(TraitPredicate(<Unique<Node<&()>> as std::marker::Send>, polarity:Positive), []),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
clause::trait
Computing trait goal Goal { predicate: TraitPredicate(<Unique<Node<&()>> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Computing candidates for Goal { predicate: TraitPredicate(<Unique<Node<&()>> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Consider impl candidate
INPUT: QueryRegionConstraints {
    outlives: [
        (
            OutlivesPredicate(
                '?1,
                '?0,
            ),
            BoringNoLocation,
        ),
        (
            OutlivesPredicate(
                '?0,
                '?1,
            ),
            BoringNoLocation,
        ),
    ],
    member_constraints: [],
}
OUTPUT: QueryRegionConstraints {
    outlives: [
        (
            OutlivesPredicate(
                '?1,
                '?0,
            ),
            BoringNoLocation,
        ),
        (
            OutlivesPredicate(
                '?0,
                '?1,
            ),
            BoringNoLocation,
        ),
    ],
    member_constraints: [],
}
Exiting eval_added_goals - NOT an overflow
Assembling with goal Goal { predicate: TraitPredicate(<Unique<Node<&()>> as std::marker::Send>, polarity:Positive), param_env: ParamEnv { caller_bounds: [], reveal: UserFacing, constness: NotConst } }
Auto trait candidate Goal {
    predicate: TraitPredicate(<Unique<Node<&()>> as std::marker::Send>, polarity:Positive),
    param_env: ParamEnv {
        caller_bounds: [],
        reveal: UserFacing,
        constness: NotConst,
    },
}
Disqualify auto trait self ty: Unique<Node<&()>>
CANDIDATES: [
    Candidate {
        source: Impl(
            DefId(0:3 ~ dedup_placeholders[a62d]::{impl#0}),
        ),
        result: Canonical {
            value: Response {
                certainty: Yes,
                var_values: CanonicalVarValues {
                    var_values: [
                        ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }),
                    ],
                },
                external_constraints: ExternalConstraints(
                    Interned(
                        ExternalConstraintsData {
                            region_constraints: QueryRegionConstraints {
                                outlives: [
                                    (
                                        OutlivesPredicate(
                                            ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }),
                                            ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }),
                                        ),
                                        BoringNoLocation,
                                    ),
                                    (
                                        OutlivesPredicate(
                                            ReLateBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon(None) }),
                                            ReLateBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon(None) }),
                                        ),
                                        BoringNoLocation,
                                    ),
                                ],
                                member_constraints: [],
                            },
                            opaque_types: [],
                        },
                        PrivateZst,
                    ),
                ),
            },
            max_universe: U0,
            variables: [
                CanonicalVarInfo {
                    kind: Region(
                        U0,
                    ),
                },
                CanonicalVarInfo {
                    kind: Region(
                        U0,
                    ),
                },
            ],
        },
    },
]
INPUT: QueryRegionConstraints {
    outlives: [
        (
            OutlivesPredicate(
                '?1,
                '?0,
            ),
            BoringNoLocation,
        ),
        (
            OutlivesPredicate(
                '?2,
                '?0,
            ),
            BoringNoLocation,
        ),
        (
            OutlivesPredicate(
                '?0,
                '?1,
            ),
            BoringNoLocation,
        ),
        (
            OutlivesPredicate(
                '?0,
                '?2,
            ),
            BoringNoLocation,
        ),
    ],
    member_constraints: [],
}
------------------------------------------
--- stderr -------------------------------
thread 'rustc' panicked at 'HERE'S THE STACK', compiler/rustc_trait_selection/src/solve/eval_ctxt/canonical/dedup_solver/constraint_walker.rs:59:53
stack backtrace:
   0:     0x7f0400691b37 - std::backtrace_rs::backtrace::trace_unsynchronized::h352d783f8836f973
   1:     0x7f0400687fab - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::h68e861c138d09dfc
   2:     0x7f0400704da9 - core::fmt::write::hc9837b4a6b405547
   3:     0x7f0400655401 - std::io::Write::write_fmt::hb24223809381b675
   4:     0x7f0400687e1d - std::sys_common::backtrace::print::h4375715fac3c73a0
   5:     0x7f040066c6f7 - std::panicking::default_hook::{{closure}}::h1cd100ebfe0cbede
   6:     0x7f040066c49a - std::panicking::default_hook::hb341913f9cf3b16c
   7:     0x7f040101409f - rustc_driver_impl[3012c1cd686720e8]::DEFAULT_HOOK::{closure#0}::{closure#0}
   8:     0x7f040066cc72 - std::panicking::rust_panic_with_hook::h7b51e523793dcd2c
   9:     0x7f040065ef32 - std::panicking::begin_panic_handler::{{closure}}::h4eff0803b93bf7f1
  10:     0x7f040065eea6 - std::sys_common::backtrace::__rust_end_short_backtrace::hc754a8eb77b3845c
  11:     0x7f040066c7f2 - rust_begin_unwind
  12:     0x7f04006543e3 - core::panicking::panic_fmt::h766f9bd0d9567fe0
  13:     0x7f04031024de - <rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::canonical::dedup_solver::constraint_walker::DedupWalker as rustc_type_ir[ec05b60311a3d35]::fold::TypeFolder<rustc_middle[5074ee5b4c22835b]::ty::context::TyCtxt>>::fold_region
  14:     0x7f040321a4a8 - <rustc_middle[5074ee5b4c22835b]::ty::subst::GenericArg as rustc_type_ir[ec05b60311a3d35]::fold::TypeFoldable<rustc_middle[5074ee5b4c22835b]::ty::context::TyCtxt>>::try_fold_with::<rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::canonical::dedup_solver::constraint_walker::DedupWalker>
  15:     0x7f04031939b3 - <rustc_middle[5074ee5b4c22835b]::ty::OutlivesPredicate<rustc_middle[5074ee5b4c22835b]::ty::subst::GenericArg, rustc_middle[5074ee5b4c22835b]::ty::sty::Region> as rustc_type_ir[ec05b60311a3d35]::fold::TypeFoldable<rustc_middle[5074ee5b4c22835b]::ty::context::TyCtxt>>::fold_with::<rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::canonical::dedup_solver::constraint_walker::DedupWalker>
  16:     0x7f04032a370e - <rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::canonical::dedup_solver::constraint_walker::DedupWalker>::erase_dedupables::<rustc_middle[5074ee5b4c22835b]::ty::OutlivesPredicate<rustc_middle[5074ee5b4c22835b]::ty::subst::GenericArg, rustc_middle[5074ee5b4c22835b]::ty::sty::Region>>
  17:     0x7f04032a60d6 - <rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::canonical::dedup_solver::Deduper>::dedup
  18:     0x7f040322e3ea - <rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::EvalCtxt>::evaluate_added_goals_and_make_canonical_response
  19:     0x7f04032465fa - <rustc_infer[4d3928fb3ea1ef4e]::infer::InferCtxt>::probe::<core[4df9b0e25e0d2810]::result::Result<rustc_middle[5074ee5b4c22835b]::infer::canonical::Canonical<rustc_middle[5074ee5b4c22835b]::traits::solve::Response>, rustc_middle[5074ee5b4c22835b]::traits::query::NoSolution>, <rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::EvalCtxt>::probe<core[4df9b0e25e0d2810]::result::Result<rustc_middle[5074ee5b4c22835b]::infer::canonical::Canonical<rustc_middle[5074ee5b4c22835b]::traits::solve::Response>, rustc_middle[5074ee5b4c22835b]::traits::query::NoSolution>, <rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::EvalCtxt>::probe_and_evaluate_goal_for_constituent_tys<rustc_trait_selection[141dd5e2308adcf0]::solve::assembly::structural_traits::instantiate_constituent_tys_for_auto_trait>::{closure#0}>::{closure#0}>
  20:     0x7f04030f623f - <rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::EvalCtxt>::probe_and_evaluate_goal_for_constituent_tys::<rustc_trait_selection[141dd5e2308adcf0]::solve::assembly::structural_traits::instantiate_constituent_tys_for_auto_trait>
  21:     0x7f0403149fa0 - <rustc_middle[5074ee5b4c22835b]::ty::TraitPredicate as rustc_trait_selection[141dd5e2308adcf0]::solve::assembly::GoalKind>::consider_auto_trait_candidate
  22:     0x7f04030ef1e2 - <rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::EvalCtxt>::assemble_and_evaluate_candidates::<rustc_middle[5074ee5b4c22835b]::ty::TraitPredicate>
  23:     0x7f040322f9f9 - <rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::EvalCtxt>::compute_trait_goal
  24:     0x7f040322ae0a - <rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::EvalCtxt>::compute_goal
  25:     0x7f040328e72f - <rustc_trait_selection[141dd5e2308adcf0]::solve::search_graph::SearchGraph as rustc_trait_selection[141dd5e2308adcf0]::solve::search_graph::overflow::OverflowHandler>::repeat_while_none::<rustc_middle[5074ee5b4c22835b]::infer::canonical::Canonical<rustc_middle[5074ee5b4c22835b]::traits::solve::Response>, <rustc_trait_selection[141dd5e2308adcf0]::solve::search_graph::SearchGraph>::with_new_goal<<rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::EvalCtxt>::evaluate_canonical_goal::{closure#0}::{closure#0}>::{closure#0}::{closure#0}, <rustc_trait_selection[141dd5e2308adcf0]::solve::search_graph::SearchGraph>::with_new_goal<<rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::EvalCtxt>::evaluate_canonical_goal::{closure#0}::{closure#0}>::{closure#0}::{closure#1}>
  26:     0x7f040330c86f - <rustc_query_system[2c39904fb33629ae]::dep_graph::graph::DepGraph<rustc_middle[5074ee5b4c22835b]::dep_graph::dep_node::DepKind>>::with_anon_task::<rustc_middle[5074ee5b4c22835b]::ty::context::TyCtxt, <rustc_trait_selection[141dd5e2308adcf0]::solve::search_graph::SearchGraph>::with_new_goal<<rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::EvalCtxt>::evaluate_canonical_goal::{closure#0}::{closure#0}>::{closure#0}, core[4df9b0e25e0d2810]::result::Result<rustc_middle[5074ee5b4c22835b]::infer::canonical::Canonical<rustc_middle[5074ee5b4c22835b]::traits::solve::Response>, rustc_middle[5074ee5b4c22835b]::traits::query::NoSolution>>
  27:     0x7f040328e9c0 - <rustc_trait_selection[141dd5e2308adcf0]::solve::search_graph::SearchGraph>::with_new_goal::<<rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::EvalCtxt>::evaluate_canonical_goal::{closure#0}::{closure#0}>
  28:     0x7f04032297b8 - <rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::EvalCtxt>::evaluate_goal
  29:     0x7f040325df5b - <rustc_infer[4d3928fb3ea1ef4e]::infer::InferCtxt as rustc_trait_selection[141dd5e2308adcf0]::solve::eval_ctxt::InferCtxtEvalExt>::evaluate_root_goal
  30:     0x7f04032a2f86 - <rustc_trait_selection[141dd5e2308adcf0]::solve::fulfill::FulfillmentCtxt as rustc_infer[4d3928fb3ea1ef4e]::traits::engine::TraitEngine>::select_where_possible
  31:     0x7f040146a22b - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::select_obligations_where_possible::<<rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::lookup_op_method::{closure#2}>
  32:     0x7f04013de626 - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::check_argument_types
  33:     0x7f04013bbb55 - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::confirm_builtin_call
  34:     0x7f04013baec2 - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::check_call
  35:     0x7f040141ad55 - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::check_expr_kind
  36:     0x7f04013cc618 - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args
  37:     0x7f0401419b01 - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::check_expr_with_expectation
  38:     0x7f04013e563d - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::check_stmt
  39:     0x7f040146a93d - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::with_breakable_ctxt::<<rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::check_block_with_expected::{closure#0}, ()>
  40:     0x7f04013e582e - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::check_block_with_expected
  41:     0x7f040141a784 - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::check_expr_kind
  42:     0x7f04013cc618 - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::check_expr_with_expectation_and_args
  43:     0x7f0401419b01 - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::check_expr_with_expectation
  44:     0x7f04013cde27 - <rustc_hir_typeck[6337532b6125a2ea]::fn_ctxt::FnCtxt>::check_return_expr
  45:     0x7f040149c666 - rustc_hir_typeck[6337532b6125a2ea]::check::check_fn
  46:     0x7f04015bb721 - rustc_hir_typeck[6337532b6125a2ea]::typeck_with_fallback::<rustc_hir_typeck[6337532b6125a2ea]::typeck::{closure#0}>
  47:     0x7f040283edcd - <std[e0afd7ea5d3fe186]::thread::local::LocalKey<core[4df9b0e25e0d2810]::cell::Cell<*const ()>>>::with::<rustc_middle[5074ee5b4c22835b]::ty::context::tls::enter_context<rustc_query_system[2c39904fb33629ae]::query::plumbing::execute_job_incr<rustc_query_impl[d83653c600d19515]::queries::typeck, rustc_query_impl[d83653c600d19515]::plumbing::QueryCtxt>::{closure#2}::{closure#0}, rustc_middle[5074ee5b4c22835b]::query::erase::Erased<[u8; 8usize]>>::{closure#0}, rustc_middle[5074ee5b4c22835b]::query::erase::Erased<[u8; 8usize]>>
  48:     0x7f040295b9aa - rustc_query_system[2c39904fb33629ae]::query::plumbing::try_execute_query::<rustc_query_impl[d83653c600d19515]::queries::typeck, rustc_query_impl[d83653c600d19515]::plumbing::QueryCtxt>
  49:     0x7f0402661ab4 - rustc_query_impl[d83653c600d19515]::get_query::typeck
  50:     0x7f040152d03c - rustc_middle[5074ee5b4c22835b]::ty::query::query_get_at::<rustc_query_system[2c39904fb33629ae]::query::caches::VecCache<rustc_span[bc72e8cf61038315]::def_id::LocalDefId, rustc_middle[5074ee5b4c22835b]::query::erase::Erased<[u8; 8usize]>>>
  51:     0x7f040152d5b9 - rustc_hir_typeck[6337532b6125a2ea]::used_trait_imports
  52:     0x7f0402837acd - <std[e0afd7ea5d3fe186]::thread::local::LocalKey<core[4df9b0e25e0d2810]::cell::Cell<*const ()>>>::with::<rustc_middle[5074ee5b4c22835b]::ty::context::tls::enter_context<rustc_query_system[2c39904fb33629ae]::query::plumbing::execute_job_non_incr<rustc_query_impl[d83653c600d19515]::queries::used_trait_imports, rustc_query_impl[d83653c600d19515]::plumbing::QueryCtxt>::{closure#0}, rustc_middle[5074ee5b4c22835b]::query::erase::Erased<[u8; 8usize]>>::{closure#0}, rustc_middle[5074ee5b4c22835b]::query::erase::Erased<[u8; 8usize]>>
  53:     0x7f040291352a - rustc_query_system[2c39904fb33629ae]::query::plumbing::try_execute_query::<rustc_query_impl[d83653c600d19515]::queries::used_trait_imports, rustc_query_impl[d83653c600d19515]::plumbing::QueryCtxt>
  54:     0x7f0402662574 - rustc_query_impl[d83653c600d19515]::get_query::used_trait_imports
  55:     0x7f040177a595 - rustc_hir_analysis[2d38e76667e9459]::check_unused::check_crate
  56:     0x7f040176c426 - rustc_hir_analysis[2d38e76667e9459]::check_crate
  57:     0x7f04010ca581 - rustc_interface[7e80568d2ceb88d0]::passes::analysis
  58:     0x7f040283efc4 - <std[e0afd7ea5d3fe186]::thread::local::LocalKey<core[4df9b0e25e0d2810]::cell::Cell<*const ()>>>::with::<rustc_middle[5074ee5b4c22835b]::ty::context::tls::enter_context<rustc_query_system[2c39904fb33629ae]::query::plumbing::execute_job_non_incr<rustc_query_impl[d83653c600d19515]::queries::analysis, rustc_query_impl[d83653c600d19515]::plumbing::QueryCtxt>::{closure#0}, rustc_middle[5074ee5b4c22835b]::query::erase::Erased<[u8; 1usize]>>::{closure#0}, rustc_middle[5074ee5b4c22835b]::query::erase::Erased<[u8; 1usize]>>
  59:     0x7f040295d147 - rustc_query_system[2c39904fb33629ae]::query::plumbing::try_execute_query::<rustc_query_impl[d83653c600d19515]::queries::analysis, rustc_query_impl[d83653c600d19515]::plumbing::QueryCtxt>
  60:     0x7f0402644aba - rustc_query_impl[d83653c600d19515]::get_query::analysis
  61:     0x7f040107abfe - <std[e0afd7ea5d3fe186]::thread::local::LocalKey<core[4df9b0e25e0d2810]::cell::Cell<*const ()>>>::with::<rustc_middle[5074ee5b4c22835b]::ty::context::tls::enter_context<<rustc_middle[5074ee5b4c22835b]::ty::context::GlobalCtxt>::enter<rustc_driver_impl[3012c1cd686720e8]::run_compiler::{closure#1}::{closure#2}::{closure#4}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>
  62:     0x7f0401067f88 - <rustc_middle[5074ee5b4c22835b]::ty::context::GlobalCtxt>::enter::<rustc_driver_impl[3012c1cd686720e8]::run_compiler::{closure#1}::{closure#2}::{closure#4}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>
  63:     0x7f0401091994 - <rustc_interface[7e80568d2ceb88d0]::interface::Compiler>::enter::<rustc_driver_impl[3012c1cd686720e8]::run_compiler::{closure#1}::{closure#2}, core[4df9b0e25e0d2810]::result::Result<core[4df9b0e25e0d2810]::option::Option<rustc_interface[7e80568d2ceb88d0]::queries::Linker>, rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>
  64:     0x7f040101eac9 - rustc_span[bc72e8cf61038315]::set_source_map::<core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>, rustc_interface[7e80568d2ceb88d0]::interface::run_compiler<core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>, rustc_driver_impl[3012c1cd686720e8]::run_compiler::{closure#1}>::{closure#0}::{closure#0}>
  65:     0x7f040101f75f - <scoped_tls[d59a433dba1d5125]::ScopedKey<rustc_span[bc72e8cf61038315]::SessionGlobals>>::set::<rustc_interface[7e80568d2ceb88d0]::interface::run_compiler<core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>, rustc_driver_impl[3012c1cd686720e8]::run_compiler::{closure#1}>::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>
  66:     0x7f0401084250 - std[e0afd7ea5d3fe186]::sys_common::backtrace::__rust_begin_short_backtrace::<rustc_interface[7e80568d2ceb88d0]::util::run_in_thread_pool_with_globals<rustc_interface[7e80568d2ceb88d0]::interface::run_compiler<core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>, rustc_driver_impl[3012c1cd686720e8]::run_compiler::{closure#1}>::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>
  67:     0x7f040109ae44 - <core[4df9b0e25e0d2810]::panic::unwind_safe::AssertUnwindSafe<<std[e0afd7ea5d3fe186]::thread::Builder>::spawn_unchecked_<rustc_interface[7e80568d2ceb88d0]::util::run_in_thread_pool_with_globals<rustc_interface[7e80568d2ceb88d0]::interface::run_compiler<core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>, rustc_driver_impl[3012c1cd686720e8]::run_compiler::{closure#1}>::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>::{closure#1}::{closure#0}> as core[4df9b0e25e0d2810]::ops::function::FnOnce<()>>::call_once
  68:     0x7f04010745e4 - std[e0afd7ea5d3fe186]::panicking::try::<core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>, core[4df9b0e25e0d2810]::panic::unwind_safe::AssertUnwindSafe<<std[e0afd7ea5d3fe186]::thread::Builder>::spawn_unchecked_<rustc_interface[7e80568d2ceb88d0]::util::run_in_thread_pool_with_globals<rustc_interface[7e80568d2ceb88d0]::interface::run_compiler<core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>, rustc_driver_impl[3012c1cd686720e8]::run_compiler::{closure#1}>::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>::{closure#1}::{closure#0}>>
  69:     0x7f04010833e9 - std[e0afd7ea5d3fe186]::panic::catch_unwind::<core[4df9b0e25e0d2810]::panic::unwind_safe::AssertUnwindSafe<<std[e0afd7ea5d3fe186]::thread::Builder>::spawn_unchecked_<rustc_interface[7e80568d2ceb88d0]::util::run_in_thread_pool_with_globals<rustc_interface[7e80568d2ceb88d0]::interface::run_compiler<core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>, rustc_driver_impl[3012c1cd686720e8]::run_compiler::{closure#1}>::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>::{closure#1}::{closure#0}>, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>
  70:     0x7f040109d822 - <<std[e0afd7ea5d3fe186]::thread::Builder>::spawn_unchecked_<rustc_interface[7e80568d2ceb88d0]::util::run_in_thread_pool_with_globals<rustc_interface[7e80568d2ceb88d0]::interface::run_compiler<core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>, rustc_driver_impl[3012c1cd686720e8]::run_compiler::{closure#1}>::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>::{closure#0}::{closure#0}, core[4df9b0e25e0d2810]::result::Result<(), rustc_span[bc72e8cf61038315]::ErrorGuaranteed>>::{closure#1} as core[4df9b0e25e0d2810]::ops::function::FnOnce<()>>::call_once::{shim:vtable#0}
  71:     0x7f04006a561a - <alloc::boxed::Box<F,A> as core::ops::function::FnOnce<Args>>::call_once::h481e59266d00f875
  72:     0x7f04006ab7fa - std::sys::unix::thread::Thread::new::thread_start::h7e46e4f9732e143e
  73:     0x7f03f721cea7 - start_thread
  74:     0x7f0400502a2f - clone
  75:                0x0 - <unknown>

error: the compiler unexpectedly panicked. this is a bug.

note: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md

note: rustc 1.71.0-dev running on x86_64-unknown-linux-gnu

note: compiler flags: -Z threads=1 -C codegen-units=1 -Z ui-testing -Z simulate-remapped-rust-src-base=/rustc/FAKE_PREFIX -Z translate-remapped-path-to-local-path=no -Z deduplicate-diagnostics=no -C strip=debuginfo -C prefer-dynamic -C rpath -C debuginfo=0 -Z trait-solver=next

query stack during panic:
#0 [typeck] type-checking `main`
#1 [used_trait_imports] finding used_trait_imports `main`
#2 [analysis] running analysis passes on this crate
end of query stack
------------------------------------------



failures:
    [ui] tests/ui/traits/new-solver/dedup-placeholders.rs

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 14899 filtered out; finished in 53.67ms

Some tests failed in compiletest suite=ui mode=ui host=x86_64-unknown-linux-gnu target=x86_64-unknown-linux-gnu
